var searchIndex = JSON.parse('{\
"anyhow":{"doc":"github crates-io docs-rs","t":[3,8,3,5,6,14,11,11,14,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["Chain","Context","Error","Ok","Result","anyhow","as_ref","as_ref","bail","borrow","borrow","borrow_mut","borrow_mut","chain","clone","clone_into","context","context","default","deref","deref_mut","downcast","downcast_mut","downcast_ref","drop","ensure","fmt","fmt","format_err","from","from","from","from","into","into","into_iter","is","len","msg","new","new","next","next_back","root_cause","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_context"],"q":["anyhow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Iterator of a chain of source errors.","Provides the <code>context</code> method for <code>Result</code>.","The <code>Error</code> type, a wrapper around a dynamic error type.","Equivalent to Ok::&lt;_, anyhow::Error&gt;(value).","<code>Result&lt;T, Error&gt;</code>","Construct an ad-hoc error from a string or existing non-…","","","Return early with an error.","","","","","An iterator of the chain of source errors contained by …","","","Wrap the error value with additional context.","Wrap the error value with additional context.","","","","Attempt to downcast the error object to a concrete type.","Downcast this error object by mutable reference.","Downcast this error object by reference.","","Return early with an error if a condition is not satisfied.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if <code>E</code> is the type held by this error object.","","Create a new error object from a printable error message.","Create a new error object from any error type.","","","","The lowest level cause of this error — this error’s …","","","","","","","","","","Wrap the error value with additional context that is …"],"i":[0,0,0,0,0,0,2,2,0,2,4,2,4,2,4,4,14,2,4,2,2,2,2,2,2,0,2,2,0,2,2,2,4,2,4,4,2,4,2,2,4,4,4,2,4,4,2,2,4,2,4,2,4,14],"f":[0,0,0,[[],1],0,0,[2,3],[2,3],0,[[]],[[]],[[]],[[]],[2,4],[4,4],[[]],[[],[[1,[2]]]],[2,2],[[],4],[2],[2],[2,[[5,[2]]]],[2,6],[2,6],[2],0,[[2,7],8],[[2,7],8],0,[9],[[]],[[],2],[[]],[[]],[[]],[[]],[2,10],[4,11],[[],2],[[],2],[3,4],[4,6],[4,6],[2,3],[4],[[]],[[],12],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],[[1,[2]]]]],"p":[[6,"Result"],[3,"Error"],[8,"Error"],[3,"Chain"],[4,"Result"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"never"],[15,"bool"],[15,"usize"],[3,"String"],[3,"TypeId"],[8,"Context"]]},\
"base64":{"doc":"Configs","t":[17,17,13,13,17,4,3,13,4,17,13,13,13,13,17,17,13,17,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,0,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BCRYPT","BINHEX","Bcrypt","BinHex","CRYPT","CharacterSet","Config","Crypt","DecodeError","IMAP_MUTF7","ImapMutf7","InvalidByte","InvalidLastSymbol","InvalidLength","STANDARD","STANDARD_NO_PAD","Standard","URL_SAFE","URL_SAFE_NO_PAD","UrlSafe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode_allow_trailing_bits","decode_config","decode_config_buf","decode_config_slice","description","display","encode","encode_config","encode_config_buf","encode_config_slice","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","pad","provide","read","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","0","0","1","1","Base64Display","borrow","borrow_mut","fmt","from","into","to_string","try_from","try_into","type_id","with_config","DecoderReader","borrow","borrow_mut","fmt","from","into","new","read","try_from","try_into","type_id","EncoderStringWriter","EncoderWriter","borrow","borrow","borrow_mut","borrow_mut","drop","finish","flush","flush","fmt","from","from","from","into","into","into_inner","new","new","try_from","try_from","try_into","try_into","type_id","type_id","write","write"],"q":["base64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","base64::DecodeError","","","","base64::display","","","","","","","","","","","base64::read","","","","","","","","","","","base64::write","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Bcrypt character set","BinHex character set","The bcrypt character set (uses …","The character set used in BinHex 4.0 files.","As per <code>crypt(3)</code> requirements","Available encoding character sets","Contains configuration parameters for base64 encoding","The <code>crypt(3)</code> character set (uses …","Errors that can occur while decoding.","IMAP modified UTF-7 requirements","The character set used in IMAP-modified UTF-7 (uses <code>+</code> and <code>,</code>…","An invalid byte was found in the input. The offset and …","The last non-padding input symbol’s encoded 6 bits have …","The length of the input is invalid. A typical cause of …","Standard character set with padding.","Standard character set without padding.","The standard character set (uses <code>+</code> and <code>/</code>).","URL-safe character set with padding","URL-safe character set without padding","The URL safe character set (uses <code>-</code> and <code>_</code>).","","","","","","","","","","","","","","Decode from string reference as octets. Returns a Result …","Sets whether to emit errors for nonzero trailing bits.","Decode from string reference as octets. Returns a Result …","Decode from string reference as octets. Writes into the …","Decode the input into the provided output slice.","","Enables base64’d output anywhere you might use a <code>Display</code> …","Encode arbitrary octets as base64. Returns a String. …","Encode arbitrary octets as base64. Returns a String.","Encode arbitrary octets as base64. Writes into the …","Encode arbitrary octets as base64. Writes into the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>Config</code>.","Sets whether to pad output with <code>=</code> characters.","","Implementations of <code>io::Read</code> to transparently decode base64.","","","","","","","","","","","","","","Implementations of <code>io::Write</code> to transparently handle …","","","","","A convenience wrapper for base64’ing bytes into a format …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Create a <code>Base64Display</code> with the provided config.","A <code>Read</code> implementation that decodes base64 data read from …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new decoder that will read from the provided …","Decode input from the wrapped reader.","","","","A <code>Write</code> implementation that base64-encodes data using the …","A <code>Write</code> implementation that base64 encodes data before …","","","","","","Encode all remaining buffered data and write it, including …","Because this is usually treated as OK to call multiple …","","","Returns the argument unchanged.","Create a EncoderStringWriter that will append to the …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Encode all remaining buffered data, including any trailing …","Create a new encoder that will write to the provided …","Create a EncoderStringWriter that will encode into a new …","","","","","","","Encode input and then write to the delegate writer.",""],"i":[0,0,4,4,0,0,0,4,0,0,4,1,1,1,0,0,4,0,0,4,1,4,5,1,4,5,1,1,4,5,1,4,5,0,5,0,0,0,1,0,0,0,0,0,1,1,1,4,5,1,4,5,1,4,5,5,5,1,0,1,4,5,1,1,4,5,1,4,5,1,4,5,0,26,27,26,27,0,18,18,18,18,18,18,18,18,18,18,0,21,21,21,21,21,21,21,21,21,21,0,0,24,25,24,25,24,24,24,25,24,24,25,25,24,25,25,24,25,24,25,24,25,24,25,24,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[1,1],[4,4],[5,5],[[]],[[]],[[]],[6,[[9,[[8,[7]],1]]]],[[5,10],5],[[6,5],[[9,[[8,[7]],1]]]],[[6,5,8],[[9,[1]]]],[[6,5],[[9,[11,1]]]],[1,12],0,[6,13],[[6,5],13],[[6,5,13]],[[6,5],11],[[1,1],10],[[1,14],15],[[1,14],15],[[4,14],15],[[5,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[4,10],5],[[5,10],5],[16],0,[[]],[[]],[[]],[[],13],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],17],[[],17],[[],17],0,0,0,0,0,0,[[]],[[]],[[18,14],[[9,[19]]]],[[]],[[]],[[],13],[[],9],[[],9],[[],17],[5,18],0,[[]],[[]],[[[21,[20]],14],15],[[]],[[]],[5,[[21,[20]]]],[[[21,[20]]],[[22,[11]]]],[[],9],[[],9],[[],17],0,0,[[]],[[]],[[]],[[]],[[[24,[23]]]],[[[24,[23]]],[[22,[23]]]],[[[24,[23]]],22],[[[25,[0]]],22],[[[24,[23]],14],15],[[]],0,[[]],[[]],[[]],0,[[23,5],[[24,[23]]]],[5,[[25,[13]]]],[[],9],[[],9],[[],9],[[],9],[[],17],[[],17],[[[24,[23]]],[[22,[11]]]],[[[25,[0]]],[[22,[11]]]]],"p":[[4,"DecodeError"],[8,"Error"],[4,"Option"],[4,"CharacterSet"],[3,"Config"],[8,"AsRef"],[15,"u8"],[3,"Vec"],[4,"Result"],[15,"bool"],[15,"usize"],[15,"str"],[3,"String"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"TypeId"],[3,"Base64Display"],[3,"Error"],[8,"Read"],[3,"DecoderReader"],[6,"Result"],[8,"Write"],[3,"EncoderWriter"],[3,"EncoderStringWriter"],[13,"InvalidByte"],[13,"InvalidLastSymbol"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"p":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"clap":{"doc":"<strong>Command Line Argument Parser for Rust</strong>","t":[13,13,13,3,4,3,3,8,13,4,3,8,13,13,13,13,13,13,6,13,13,8,13,13,3,13,13,8,13,13,13,8,13,13,13,8,4,13,14,11,11,10,10,10,10,11,11,11,11,11,0,11,11,11,11,11,10,14,10,14,14,14,14,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,0,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,14,10,11,13,13,3,4,3,4,3,3,3,13,13,13,13,13,18,13,3,13,13,3,13,13,13,8,13,3,3,3,3,13,16,3,3,3,3,3,13,4,18,13,13,13,3,3,3,8,13,13,13,13,16,4,3,8,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,4,4,13,3,13,13,13,3,8,4,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,6,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,13,13,13,13,3,3,4,3,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Always","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgMatches","Args","Auto","ColorChoice","Command","CommandFactory","CommandName","CommandString","CommandWithArguments","Count","DirPath","EmailAddress","Error","ExecutablePath","FilePath","FromArgMatches","Help","Hostname","Id","Never","Other","Parser","Set","SetFalse","SetTrue","Subcommand","Unknown","Url","Username","ValueEnum","ValueHint","Version","arg","as_ref","as_str","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","builder","clone","clone","clone_into","clone_into","cmp","command","command","command_for_update","crate_authors","crate_description","crate_name","crate_version","default","default","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_str","from_str","from_str","group_id","group_id","has_subcommand","hash","into","into","parse","parse","parse_from","parse_from","parser","partial_cmp","to_owned","to_owned","to_possible_value","to_possible_value","to_string","to_string","try_from","try_from","try_into","try_into","try_parse","try_parse","try_parse_from","try_parse_from","try_update_from","try_update_from","type_id","type_id","update_from","update_from","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","value_parser","value_variants","value_variants","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgPredicate","BoolValueParser","BoolishValueParser","Command","CommandName","CommandString","CommandWithArguments","Count","DirPath","EMPTY","EmailAddress","EnumValueParser","Equals","ExecutablePath","FalseyValueParser","FilePath","Help","Hostname","IntoResettable","IsPresent","MapValueParser","NonEmptyStringValueParser","OsStr","OsStringValueParser","Other","Parser","PathBufValueParser","PossibleValue","PossibleValuesParser","RangedI64ValueParser","RangedU64ValueParser","Reset","Resettable","SINGLE","Set","SetFalse","SetTrue","Str","StringValueParser","StyledStr","TypedValueParser","Unknown","Url","Username","Value","Value","ValueHint","ValueParser","ValueParserFactory","ValueRange","Version","about","action","after_help","after_long_help","alias","alias","alias","aliases","aliases","aliases","allow_external_subcommands","allow_hyphen_values","allow_missing_positional","allow_negative_numbers","ansi","arg","arg","arg_required_else_help","args","args","args_conflicts_with_subcommands","args_override_self","as_os_str","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","author","before_help","before_long_help","bin_name","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","color","conflicts_with","conflicts_with","conflicts_with_all","conflicts_with_all","debug_assert","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_missing_value","default_missing_value_os","default_missing_values","default_missing_values_os","default_value","default_value_if","default_value_ifs","default_values","deref","deref","disable_colored_help","disable_help_flag","disable_help_subcommand","disable_version_flag","display_name","display_order","display_order","dont_delimit_trailing_values","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","exclusive","external_subcommand_value_parser","find_subcommand","find_subcommand_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fd","from_filelike","from_into_filelike","from_into_socketlike","from_socketlike","from_str","get_about","get_action","get_after_help","get_after_long_help","get_all_aliases","get_all_aliases","get_all_long_flag_aliases","get_all_short_aliases","get_all_short_flag_aliases","get_arg_conflicts_with","get_args","get_arguments","get_author","get_before_help","get_before_long_help","get_bin_name","get_color","get_default_values","get_display_name","get_external_subcommand_value_parser","get_groups","get_help","get_help","get_help_heading","get_id","get_id","get_index","get_long","get_long_about","get_long_and_visible_aliases","get_long_flag","get_long_help","get_long_version","get_matches","get_matches_from","get_matches_mut","get_name","get_name","get_name_and_aliases","get_next_help_heading","get_num_args","get_opts","get_positionals","get_possible_values","get_short","get_short_and_visible_aliases","get_short_flag","get_subcommand_help_heading","get_subcommand_value_name","get_subcommands","get_subcommands_mut","get_value_delimiter","get_value_hint","get_value_names","get_value_parser","get_version","get_visible_aliases","get_visible_aliases","get_visible_long_flag_aliases","get_visible_short_aliases","get_visible_short_flag_aliases","global","group","group","groups","groups","has_subcommands","hash","hash","hash","hash","hash","help","help","help_expected","help_heading","help_template","hide","hide","hide","hide_default_value","hide_long_help","hide_possible_values","hide_possible_values","hide_short_help","id","id","ignore_case","ignore_errors","index","index","infer_long_args","infer_subcommands","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","into_resettable","is_allow_external_subcommands_set","is_allow_hyphen_values_set","is_allow_missing_positional_set","is_allow_negative_numbers_set","is_arg_required_else_help_set","is_args_conflicts_with_subcommands_set","is_disable_colored_help_set","is_disable_help_flag_set","is_disable_help_subcommand_set","is_disable_version_flag_set","is_dont_delimit_trailing_values_set","is_exclusive_set","is_global_set","is_hide_default_value_set","is_hide_long_help_set","is_hide_possible_values_set","is_hide_set","is_hide_set","is_hide_set","is_hide_short_help_set","is_ignore_case_set","is_last_set","is_multicall_set","is_multiple","is_next_line_help_set","is_next_line_help_set","is_no_binary_name_set","is_positional","is_propagate_version_set","is_require_equals_set","is_required_set","is_required_set","is_subcommand_negates_reqs_set","is_subcommand_precedence_over_arg_set","is_subcommand_required_set","is_trailing_var_arg_set","last","long","long_about","long_flag","long_flag_alias","long_flag_aliases","long_help","long_version","map","map","matches","max_term_width","max_values","min_values","multicall","multiple","mut_arg","mut_subcommand","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_display_order","next_help_heading","next_line_help","next_line_help","no_binary_name","num_args","os_string","override_help","override_usage","overrides_with","overrides_with_all","parse","parse","parse","parse","parse","parse","parse","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path_buf","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","print_help","print_long_help","propagate_version","range","range","raw","render_help","render_long_help","render_long_version","render_usage","render_version","require_equals","required","required","required_if_eq","required_if_eq_all","required_if_eq_any","required_unless_present","required_unless_present_all","required_unless_present_any","requires","requires","requires_all","requires_if","requires_ifs","set_bin_name","short","short_alias","short_aliases","short_flag","short_flag_alias","short_flag_aliases","start_bound","string","subcommand","subcommand_help_heading","subcommand_negates_reqs","subcommand_precedence_over_arg","subcommand_required","subcommand_value_name","subcommands","takes_values","takes_values","term_width","to_os_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","trailing_var_arg","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_matches","try_get_matches_from","try_get_matches_from_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map","try_map","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_delimiter","value_hint","value_name","value_names","value_parser","value_parser","value_terminator","version","visible_alias","visible_alias","visible_aliases","visible_aliases","visible_long_flag_alias","visible_long_flag_aliases","visible_short_alias","visible_short_aliases","visible_short_flag_alias","visible_short_flag_aliases","0","0","ActualNumValues","ArgumentConflict","Bool","ContextKind","ContextValue","Custom","DefaultFormatter","DisplayHelp","DisplayHelpOnMissingArgumentOrSubcommand","DisplayVersion","Error","ErrorFormatter","ErrorKind","ExpectedNumValues","Format","InvalidArg","InvalidSubcommand","InvalidSubcommand","InvalidUtf8","InvalidValue","InvalidValue","Io","KindFormatter","MinValues","MissingRequiredArgument","MissingSubcommand","NoEquals","None","Number","PriorArg","Result","RichFormatter","String","Strings","StyledStr","StyledStrs","Suggested","SuggestedArg","SuggestedCommand","SuggestedSubcommand","SuggestedValue","TooFewValues","TooManyValues","TrailingArg","UnknownArgument","Usage","ValidSubcommand","ValidValue","ValueValidation","WrongNumberOfValues","apply","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","exit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_error","format_error","format_error","from","from","from","from","from","from","from","from","get","hash","hash","insert","into","into","into","into","into","into","kind","new","print","provide","raw","render","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","use_stderr","with_cmd","0","0","0","0","0","0","ArgMatches","CommandLine","DefaultValue","Downcast","EnvVariable","IdsRef","Indices","MatchesError","RawValues","UnknownArgument","ValueSource","Values","ValuesRef","args_present","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_id","default","default","default","default","default","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_count","get_flag","get_many","get_one","get_raw","ids","index_of","indices_of","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","partial_cmp","provide","remove_many","remove_one","remove_subcommand","size_hint","size_hint","size_hint","size_hint","size_hint","subcommand","subcommand_matches","subcommand_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_contains_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_many","try_get_one","try_get_raw","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_remove_many","try_remove_one","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_source","actual","expected"],"q":["clap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clap::builderclap::builder::ArgPredicate","clap::builder::Resettable","clap::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clap::error::ContextValue","","","","","","clap::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clap::parser::MatchesError",""],"d":["Enables colored output regardless of whether or not the …","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Container for parse results.","Parse a set of arguments into a user-defined container.","Enables colored output only when the output is going to a …","Represents the color preferences for program output","Build a command-line interface.","Create a <code>Command</code> relevant for a user-defined container.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Email address.","Command Line Argument Parser Error","Path to an executable file.","Path to a file.","Converts an instance of <code>ArgMatches</code> to a user-defined …","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","<code>Arg</code> or <code>ArgGroup</code> identifier","Disables colored output no matter if the output is going …","None of the hints below apply. Disables shell completion …","Parse command-line arguments into <code>Self</code>.","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","Parse a sub-command into a user-defined enum.","Default value if hint is not specified. Follows shell …","Complete web address.","Name of a local operating system user.","Parse arguments into enums.","Provide shell with hint on how to complete an argument.","When encountered, display <code>Command::version</code>","Create an <code>Arg</code> from a usage string.","","Get the raw string of the <code>Id</code>","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","","","","","","Define <code>Command</code> line arguments","","","","","","Build a <code>Command</code> that can instantiate <code>Self</code>.","Allows you to build the <code>Command</code> instance from your …","Build a <code>Command</code> that can update <code>self</code>.","Allows you to pull the authors for the command from your …","Allows you to pull the description from your Cargo.toml at …","Allows you to pull the name from your Cargo.toml at …","Allows you to pull the version from your Cargo.toml at …","","","","","","","","","Error reporting","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Parse an argument into <code>Self</code>.","Parse an argument into <code>Self</code>.","","Report the <code>ArgGroup::id</code> for this set of arguments","Report the <code>ArgGroup::id</code> for this set of arguments","Test whether <code>Self</code> can parse a specific subcommand","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parse from <code>std::env::args_os()</code>, exit on error","Parse from <code>std::env::args_os()</code>, exit on error","Parse from iterator, exit on error","Parse from iterator, exit on error","<code>Command</code> line argument parser","","","","The canonical argument value.","","","","","","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Parse from iterator, return Err on error.","Update from iterator, return Err on error.","Update from iterator, return Err on error.","","","Update from iterator, exit on error","Update from iterator, exit on error","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Select a <code>ValueParser</code> implementation from the intended type","All possible argument values, in display order.","","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Operations to perform on argument values","Implementation for <code>ValueParser::bool</code>","Parse bool-like string values, everything else is <code>true</code>","Build a command-line interface.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Nor argument values, or a flag","Email address.","Parse an <code>ValueEnum</code> value.","Does the argument match the specified value?","Path to an executable file.","Parse false-like string values, everything else is <code>true</code>","Path to a file.","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","Convert to the intended resettable type","Is the argument present?","Adapt a <code>TypedValueParser</code> from one value to another","Parse non-empty string values","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::os_string</code>","None of the hints below apply. Disables shell completion …","Generated parser, usually <code>ValueParser</code>.","Implementation for <code>ValueParser::path_buf</code>","A possible value of an argument.","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Parse number that fall within a range of values","Parse number that fall within a range of values","Reset builder value","Clearable builder value","A single argument value, the most common case for options","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::string</code>","Terminal-styling container","Parse/validate argument values","Default value if hint is not specified. Follows shell …","Complete web address.","Name of a local operating system user.","Overwrite builder value","Argument’s value type","Provide shell with hint on how to complete an argument.","Parse/validate argument values","Register a type with value_parser!","Values per occurrence for an argument","When encountered, display <code>Command::version</code>","Sets the program’s description for the short help (<code>-h</code>).","Specify how to react to an argument when parsing it.","Free-form help text for after auto-generated short help (<code>-h</code>…","Free-form help text for after auto-generated long help (…","Add an alias, which functions as a hidden long flag.","Sets a hidden alias to this subcommand.","Sets a <em>hidden</em> alias for this argument value.","Add aliases, which function as hidden long flags.","Sets multiple hidden aliases to this subcommand.","Sets multiple <em>hidden</em> aliases for this argument value.","Assume unexpected positional arguments are a <code>subcommand</code>.","Allows values which start with a leading hyphen (<code>-</code>)","Allows one to implement two styles of CLIs where …","Allows negative numbers to pass as values.","Display using ANSI Escape Code styling","Adds an argument to this group by name","Adds an argument to the list of valid possibilities.","Exit gracefully if no arguments are present (e.g. <code>$ myprog</code>…","Adds multiple arguments to this group by name","Adds multiple arguments to the list of valid possibilities.","Specifies that use of an argument prevents the use of …","Replace prior occurrences of arguments rather than error","Get the raw string as an <code>std::ffi::OsStr</code>","","","","","","","Get the raw string of the <code>Str</code>","Sets the author(s) for the help message.","Free-form help text for before auto-generated short help (…","Free-form help text for before auto-generated long help (…","Overrides the runtime-determined name of the binary for …","<code>bool</code> parser for argument values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Prepare for introspecting on all included <code>Command</code>s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets when to color output.","This argument is mutually exclusive with the specified …","Specify an argument or group that must <strong>not</strong> be present when …","This argument is mutually exclusive with the specified …","Specify arguments or groups that must <strong>not</strong> be present when …","Catch problems earlier in the development cycle.","","","","","","","","","","","","","","","","","","","","","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when not present.","Specifies the value of the argument if <code>arg</code> has been used …","Specifies multiple values and conditions in the same …","Value for the argument when not present.","","","Disables colorized help messages.","Disables <code>-h</code> and <code>--help</code> flag.","Disables the <code>help</code> <code>subcommand</code>.","Disables <code>-V</code> and <code>--version</code> flag.","Overrides the runtime-determined display name of the …","Allows custom ordering of args within the help message.","Set the placement of this subcommand within the help.","Disables the automatic delimiting of values after <code>--</code> or …","","","","","","","","","","","","","","","","","","","","","","","Custom error message for post-parsing validation","This argument must be passed alone; it conflicts with all …","Specifies how to parse external subcommand arguments.","Find subcommand such that its name or one of aliases …","Find subcommand such that its name or one of aliases …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Get the help message specified via <code>Command::about</code>.","Behavior when parsing the argument","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get <em>all</em> aliases for this argument, if any, both visible …","Iterate through the set of <em>all</em> the aliases for this …","Iterate through the set of <em>all</em> the long aliases for this …","Get <em>all</em> short aliases for this argument, if any, both …","Iterate through the set of <em>all</em> the short aliases for this …","Get a list of all arguments the given argument conflicts …","Getters for all args. It will return a vector of <code>Id</code>","Iterate through the set of arguments.","Get the authors of the cmd.","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get the name of the binary.","Should we color the output?","Get the default values specified for this argument, if any","Get the name of the binary.","Configured parser for values passed to an external …","Iterate through the set of groups.","Get the help specified for this argument, if any","Get the help specified for this argument, if any","Get the help heading specified for this argument, if any","Get the name of the argument","Get the name of the group","Get the index of this argument, if any","Get the long option name for this argument, if any","Get the help message specified via <code>Command::long_about</code>.","Get the long option name and its visible aliases, if any","Get the long flag of the subcommand.","Get the long help specified for this argument, if any","Get the long version of the cmd.","Parse <code>env::args_os</code>, exiting on failure.","Parse the specified arguments, exiting on failure.","Parse <code>env::args_os</code>, exiting on failure.","Get the name of the cmd.","Get the name of the argument value","Returns all valid values of the argument value.","Get the custom section heading specified via …","Get the number of values for this argument.","Iterate through the <em>options</em>.","Iterate through the <em>positionals</em> arguments.","Get the names of possible values for this argument. Only …","Get the short option name for this argument, if any","Get the short option name and its visible aliases, if any","Get the short flag of the subcommand.","Returns the help heading for listing subcommands.","Returns the subcommand value name.","Iterate through the set of subcommands, getting a …","Iterate through the set of subcommands, getting a mutable …","Get the delimiter between multiple values","Get the value hint of this argument","Get the names of values for this argument.","Configured parser for argument values","Get the version of the cmd.","Get visible aliases for this argument, if any","Iterate through the <em>visible</em> aliases for this subcommand.","Iterate through the <em>visible</em> long aliases for this …","Get visible short aliases for this argument, if any","Iterate through the <em>visible</em> short aliases for this …","Specifies that an argument can be matched to all child …","The name of the <code>ArgGroup</code> the argument belongs to.","Adds an <code>ArgGroup</code> to the application.","The names of <code>ArgGroup</code>’s the argument belongs to.","Adds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.","Returns <code>true</code> if this <code>Command</code> has subcommands.","","","","","","Sets the description of the argument for short help (<code>-h</code>).","Sets the help description of the value.","Panic if help descriptions are omitted.","Override the current help section.","Sets the help template to be used, overriding the default …","Do not display the argument in help message.","Specifies that this <code>subcommand</code> should be hidden from help …","Hides this value from help and shell completions.","Do not display the default value of the argument in the …","Hides an argument from long help (<code>--help</code>).","Do not display the possible values in the help message.","Tells <code>clap</code> <em>not</em> to print possible values when displaying …","Hides an argument from short help (<code>-h</code>).","Set the identifier used for referencing this argument in …","Sets the group name.","Match values against <code>PossibleValuesParser</code> without matching …","Try not to fail on parse errors, like missing option …","Specifies the index of a positional argument <strong>starting at</strong> 1.","","Allow partial matches of long arguments or their aliases.","Allow partial matches of subcommand names and their aliases…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to the intended resettable type","","","","Report whether <code>Command::allow_external_subcommands</code> is set","Report whether <code>Arg::allow_hyphen_values</code> is set","Report whether <code>Command::allow_missing_positional</code> is set","Report whether <code>Arg::allow_negative_numbers</code> is set","Report whether <code>Command::arg_required_else_help</code> is set","Report whether <code>Command::args_conflicts_with_subcommands</code> is …","Report whether <code>Command::disable_colored_help</code> is set","Report whether <code>Command::disable_help_flag</code> is set","Report whether <code>Command::disable_help_subcommand</code> is set","Report whether <code>Command::disable_version_flag</code> is set","Report whether <code>Command::dont_delimit_trailing_values</code> is set","Reports whether <code>Arg::exclusive</code> is set","Report whether <code>Arg::global</code> is set","Report whether <code>Arg::hide_default_value</code> is set","Report whether <code>Arg::hide_long_help</code> is set","Report whether <code>Arg::hide_possible_values</code> is set","Report whether <code>Arg::hide</code> is set","Report whether <code>Command::hide</code> is set","Report if <code>PossibleValue::hide</code> is set","Report whether <code>Arg::hide_short_help</code> is set","Reports whether <code>Arg::ignore_case</code> is set","Reports whether <code>Arg::last</code> is set","Report whether <code>Command::multicall</code> is set","Return true if the group allows more than one of the …","Report whether <code>Arg::next_line_help</code> is set","Report whether <code>Command::next_line_help</code> is set","Report whether <code>Command::no_binary_name</code> is set","Checks whether this argument is a positional or not.","Report whether <code>Command::propagate_version</code> is set","Report whether <code>Arg::require_equals</code> is set","Reports whether <code>Arg::required</code> is set","Reports whether <code>ArgGroup::required</code> is set","Report whether <code>Command::subcommand_negates_reqs</code> is set","Report whether <code>Command::subcommand_precedence_over_arg</code> is …","Report whether <code>Command::subcommand_required</code> is set","Report whether <code>Arg::trailing_var_arg</code> is set","This arg is the last, or final, positional argument (i.e. …","Sets the long version of the argument without the …","Sets the program’s description for the long help (<code>--help</code>…","Sets the long version of the subcommand flag without the …","Add an alias, which functions as a “hidden” long flag …","Add aliases, which function as “hidden” long flag …","Sets the description of the argument for long help (<code>--help</code>…","Sets the version for the long version (<code>--version</code>) and help …","Adapt a <code>TypedValueParser</code> from one value to another","Adapt a <code>TypedValueParser</code> from one value to another","Tests if the value is valid for this argument value","Limit the line length for wrapping help when using the …","Most number of values the argument accepts","Fewest number of values the argument accepts","Multiple-personality program dispatched on the binary name …","Allows more than one of the <code>Arg</code>s in this group to be used. …","Allows one to mutate an <code>Arg</code> after it’s been added to a …","Allows one to mutate a <code>Command</code> after it’s been added as …","(Re)Sets the program’s name.","Custom parser for argument values","Create a new <code>Arg</code> with a unique name.","Create a <code>ArgGroup</code> using a unique name.","Creates a new instance of an <code>Command</code>.","Create a <code>PossibleValue</code> with its name.","Create a range","Create an empty buffer","Implementation for <code>ValueParser::string</code>","Implementation for <code>ValueParser::os_string</code>","Implementation for <code>ValueParser::path_buf</code>","Parse an <code>ValueEnum</code>","Verify the value is from an enumerated set pf <code>PossibleValue</code>…","Select full range of <code>i64</code>","Select full range of <code>u64</code>","Implementation for <code>ValueParser::bool</code>","Parse false-like string values, everything else is <code>true</code>","Parse bool-like string values, everything else is <code>true</code>","Parse non-empty string values","Change the starting value for assigning future display …","Set the default section heading for future args.","Render the help on the line after the argument.","Places the help string for all arguments and subcommands …","Specifies that the parser should not assume the first …","Specifies the number of arguments parsed per occurrence","<code>OsString</code> parser for argument values","Overrides the <code>clap</code> generated help message (both <code>-h</code> and …","Overrides the <code>clap</code> generated usage string for help and …","Sets an overridable argument.","Sets multiple mutually overridable arguments by name.","Parse the argument value","Parse the argument value","","","","","","Parse the argument value","","","","","","","","","","","","","","","","","","<code>PathBuf</code> parser for argument values","Reflect on enumerated value properties","Reflect on enumerated value properties","Reflect on enumerated value properties","","","","","","","Prints the short help message (<code>-h</code>) to <code>io::stdout()</code>.","Prints the long help message (<code>--help</code>) to <code>io::stdout()</code>.","Specifies to use the version of the current command for …","Narrow the supported range","Narrow the supported range","Consume all following arguments.","Render the short help message (<code>-h</code>) to a <code>StyledStr</code>","Render the long help message (<code>--help</code>) to a <code>StyledStr</code>.","Version message rendered as if the user ran <code>--version</code>.","Usage statement","Version message rendered as if the user ran <code>-V</code>.","Requires that options use the <code>--option=val</code> syntax","Specifies that the argument must be present.","Require an argument from the group to be present when …","This argument is required only if the specified <code>arg</code> is …","Specify this argument is required based on multiple …","Specify this argument is required based on multiple …","Set this arg as required as long as the specified argument …","Sets this arg as required unless <em>all</em> of the specified …","Sets this arg as required unless <em>any</em> of the specified …","Sets an argument that is required when this one is present","Specify an argument or group that must be present when …","Specify arguments or groups that must be present when this …","Require another argument if this arg matches the …","Allows multiple conditional requirements.","Set binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.","Sets the short version of the argument without the …","Add an alias, which functions as a hidden short flag.","Add aliases, which functions as a hidden short flag.","Sets the short version of the subcommand flag without the …","Add an alias, which functions as  “hidden” short flag …","Add aliases, which function as “hidden” short flag …","","<code>String</code> parser for argument values","Adds a subcommand to the list of valid possibilities.","Sets the help heading used for subcommands when printing …","Allows <code>subcommands</code> to override all requirements of the …","Prevent subcommands from being consumed as an arguments …","If no <code>subcommand</code> is present at runtime, error and exit …","Sets the value name used for subcommands when printing …","Adds multiple subcommands to the list of valid …","Returns whether this action accepts values on the …","Report whether the argument takes any values (ie is a flag)","Sets the terminal width at which to wrap help messages.","Get the raw string as an <code>OsString</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is a “VarArg” and everything that follows should …","","","","","","","","","","","","","","","","","","","","","","","","","","Parse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.","Parse the specified arguments, returning a <code>clap::Result</code> on …","Parse the specified arguments, returning a <code>clap::Result</code> on …","","","","","","","","","","","","","","","","","","","","","","","","","","Adapt a <code>TypedValueParser</code> from one value to another","Adapt a <code>TypedValueParser</code> from one value to another","Describes the content of <code>AnyValue</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Allow grouping of multiple values via a delimiter.","Provide the shell a hint about how to complete this …","Placeholder for the argument’s value in the help message …","Placeholders for the argument’s values in the help …","Create the specified <code>Self::Parser</code>","Specify the typed behavior of the argument.","Sentinel to <strong>stop</strong> parsing multiple values of a given …","Sets the version for the short version (<code>-V</code>) and help …","Add an alias, which functions as a visible long flag.","Sets a visible alias to this subcommand.","Add aliases, which function as visible long flags.","Sets multiple visible aliases to this subcommand.","Add an alias, which functions as a “visible” long flag …","Add aliases, which function as <em>visible</em> long flag …","Add an alias, which functions as a visible short flag.","Add aliases, which function as visible short flags.","Add an alias, which functions as  “visible” short flag …","Add aliases, which function as <em>visible</em> short flag …","","","Number of values present","Occurs when the user provides two values which conflict …","A single value","Semantics for a piece of error information","A piece of error information","An opaque message to the user","Richly formatted error context","Not a true “error” as it means <code>--help</code> or similar was …","Occurs when either an argument or a <code>Subcommand</code> is …","Not a true “error” as it means <code>--version</code> or similar …","Command Line Argument Parser Error","Defines how to format an error for displaying to the user","Command line argument parser kind of error","Number of allowed values","Represents a Format error (which is a part of <code>Display</code>). …","The cause of the error","The cause of the error","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Occurs when the user provides a value containing invalid …","Rejected values","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an I/O error. Can occur when writing to <code>stderr</code> …","Report <code>ErrorKind</code>","Minimum number of allowed values","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","Occurs when the user doesn’t use equals for an option …","<code>ContextKind</code> is self-sufficient, no additional information …","A single value","Existing arguments","Short hand for <code>Result</code> type","Richly formatted error context","A single value","Many values","A single value","many value","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more values for an argument …","Trailing argument","Occurs when a user provides a flag, option, argument or …","A usage string","Accepted subcommands","Accepted values","Occurs when the user provides a value for an argument with …","Occurs when the user provides a different number of values …","Apply an alternative formatter to the error","End-user description of the error case, where relevant","End-user description of the error case, where relevant","","","","","","","","","","","","","","","","","","","Additional information to further qualify the error","","","","Prints the error and exits.","","","","","","","","","Format the existing message with the Command’s context","Stylize the error for the terminal","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Lookup a piece of context","","","Insert a piece of context","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Type of error for programmatic processing","Create an error with a pre-defined message","Prints formatted and colored error to <code>stdout</code> or <code>stderr</code> …","","Create an unformatted error","Render the error message to a <code>StyledStr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Should the message be written to <code>stdout</code> or not?","Apply <code>Command</code>’s formatting to the error","","","","","","","Container for parse results.","Value was passed in on the command-line","Value came <code>Arg::default_value</code>","Failed to downcast <code>AnyValue</code> to the specified type","Value came [<code>Arg::env</code>][crate::Arg::env]","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","Iterate over indices for where an argument appeared when …","Violation of <code>ArgMatches</code> assumptions","Iterate over raw argument values via <code>ArgMatches::get_raw</code>.","Argument not defined in <code>Command</code>","Origin of the argument’s value","Iterate over multiple values for an argument via …","Iterate over multiple values for an argument via …","Check if any args were present on the command line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if values are present for the argument or group id","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the value of a specific <code>ArgAction::Count</code> flag","Gets the value of a specific <code>ArgAction::SetTrue</code> or …","Iterate over values of a specific option or positional …","Gets the value of a specific option or positional argument.","Iterate over the original argument values.","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","The first index of that an argument showed up.","All indices an argument appeared at when parsing.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Return values of a specific option or positional argument.","Returns the value of a specific option or positional …","Return the name and <code>ArgMatches</code> of the current subcommand.","","","","","","The name and <code>ArgMatches</code> of the current subcommand.","The <code>ArgMatches</code> for the current subcommand.","The name of the current subcommand.","","","","","","","","","","Non-panicking version of <code>ArgMatches::contains_id</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::get_many</code>","Non-panicking version of <code>ArgMatches::get_one</code>","Non-panicking version of <code>ArgMatches::get_raw</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::remove_many</code>","Non-panicking version of <code>ArgMatches::remove_one</code>","","","","","","","","","Report where argument value came from","Type for value stored in <code>ArgMatches</code>","The target type to downcast to"],"i":[4,33,20,0,0,0,0,0,4,0,0,0,33,33,33,20,33,33,0,33,33,0,20,33,0,4,33,0,20,20,20,0,33,33,33,0,0,20,0,1,1,94,94,95,95,1,1,4,1,4,0,1,4,1,4,1,96,0,96,0,0,0,0,1,4,1,1,1,1,1,4,0,1,1,4,4,1,1,1,1,1,1,4,97,97,97,37,37,4,94,94,95,1,1,4,98,98,98,98,0,1,1,4,37,4,1,4,1,4,1,4,98,98,98,98,98,98,1,4,98,98,97,97,97,0,37,4,33,20,0,0,0,0,0,0,0,33,33,33,20,33,30,33,0,29,33,0,33,20,33,0,29,0,0,0,0,33,99,0,0,0,0,0,32,0,30,20,20,20,0,0,0,0,33,33,33,32,100,0,0,0,0,20,3,19,3,3,19,3,15,19,3,15,3,19,3,19,17,23,3,3,23,3,3,3,25,25,25,7,7,7,7,7,3,3,3,3,28,28,20,19,23,29,3,25,25,15,30,32,7,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,3,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,19,25,32,7,17,3,19,23,19,23,3,19,23,3,25,15,30,7,17,17,33,34,35,36,40,44,46,47,48,49,50,19,19,19,19,19,19,19,19,25,7,3,3,3,3,3,19,3,3,30,19,23,29,25,25,25,25,25,25,15,30,32,7,7,7,7,7,7,7,17,33,3,19,3,3,3,28,20,19,19,23,29,3,3,25,15,30,30,32,7,7,17,17,33,34,35,36,40,41,44,46,47,48,49,50,51,28,28,28,28,28,28,28,28,28,28,20,19,19,23,23,29,29,3,3,25,25,25,25,25,25,25,25,15,15,30,30,30,30,30,30,30,30,32,32,32,32,7,7,7,7,7,17,17,17,17,17,33,34,35,36,40,41,41,44,44,46,46,47,48,49,50,51,32,32,32,32,32,33,3,19,3,3,19,3,3,19,3,3,23,3,3,3,3,3,3,19,3,3,3,19,15,19,19,23,19,19,3,19,3,19,3,3,3,3,3,15,15,3,19,3,3,19,19,19,3,3,3,3,3,19,19,19,19,3,19,3,3,19,3,19,19,3,19,3,3,25,30,32,7,33,19,15,3,19,3,19,3,15,19,19,19,3,19,19,23,19,3,19,3,3,3,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,18,20,32,33,3,19,3,19,3,3,3,3,3,3,3,19,19,19,19,19,19,3,15,19,19,19,3,23,19,3,3,19,3,19,19,23,3,3,3,19,19,19,3,3,3,3,19,3,100,100,15,3,30,30,3,23,3,3,3,28,19,23,3,15,30,17,34,35,36,40,41,44,46,47,48,49,50,3,3,19,3,3,19,28,3,3,19,19,100,100,34,35,36,41,51,100,34,35,36,40,41,44,46,47,48,49,50,51,19,25,32,7,17,28,28,100,100,40,41,47,48,49,51,3,3,3,44,46,19,3,3,3,3,3,19,19,23,19,19,19,19,19,19,19,23,23,19,19,3,19,19,19,3,3,3,30,28,3,3,3,3,3,3,3,20,30,3,25,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,19,3,30,7,17,19,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,3,3,3,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,100,100,28,28,20,19,23,29,3,25,15,30,32,7,17,33,34,35,36,40,41,44,46,47,48,49,50,51,19,19,19,19,99,19,19,3,19,3,19,3,3,3,19,19,3,3,101,102,80,57,81,0,0,80,0,57,57,57,0,0,0,80,57,80,80,57,57,80,57,57,0,80,57,57,57,81,81,80,0,0,81,81,81,81,80,80,80,80,80,57,57,80,57,80,80,80,57,57,79,80,57,103,104,79,80,81,57,103,104,79,80,81,57,80,81,57,80,81,57,79,80,81,57,79,79,79,80,80,81,81,57,57,79,78,103,104,103,104,79,79,79,80,81,57,79,80,57,79,103,104,79,80,81,57,79,79,79,79,79,79,79,80,81,57,79,80,81,57,103,104,79,80,81,57,103,104,79,80,81,57,103,104,79,80,81,57,79,79,105,106,107,108,109,110,0,91,91,85,91,0,0,0,0,85,0,0,0,11,85,11,86,87,88,89,90,91,85,11,86,87,88,89,90,91,85,11,86,87,88,89,90,91,85,11,86,87,88,89,90,91,91,11,11,87,88,89,90,11,91,85,85,11,86,87,88,89,90,91,85,11,86,87,88,89,90,91,11,11,11,11,11,11,11,11,85,11,86,87,88,89,90,91,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,91,85,11,11,11,86,87,88,89,90,11,11,11,85,11,86,87,88,89,90,91,85,11,85,11,86,87,88,89,90,91,11,11,11,85,11,86,87,88,89,90,91,11,11,85,11,86,87,88,89,90,91,11,111,111],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[3,3],[3,3],[3,3],[3,3],[1,2],[[]],[[]],[[]],[[]],0,[1,1],[4,4],[[]],[[]],[[1,1],5],[[],3],0,[[],3],0,0,0,0,[[],1],[[],4],[[1,2],6],[[1,2],6],[[1,1],6],[[1,7],6],[[1,8],6],[[4,4],6],0,[[1,9],10],[[1,9],10],[[4,9],10],[[4,9],10],[7,1],[2,1],[7,1],[2,1],[1,1],[[]],[[]],[11,[[13,[12]]]],[11,[[13,[12]]]],[11,[[13,[12]]]],[[2,6],[[13,[8]]]],[[2,6],[[13,[8]]]],[2,[[13,[4]]]],[[],[[14,[1]]]],[[],[[14,[1]]]],[2,6],[1],[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,1],[[14,[5]]]],[[]],[[]],[[],[[14,[15]]]],[4,[[14,[15]]]],[[],8],[[],8],[[],13],[[],13],[[],13],[[],13],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],16],[[],16],[[]],[[]],[11,[[13,[12]]]],[11,[[13,[12]]]],[11,[[13,[12]]]],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,[18,[17]]],3],[[19,[18,[20]]],19],[[3,[18,[17]]],3],[[3,[18,[17]]],3],[[19,[18,[7]]],19],[[3,[18,[7]]],3],[[15,[18,[7]]],15],[[19,21],19],[[3,21],3],[[15,21],15],[[3,6],3],[[19,6],19],[[3,6],3],[[19,6],19],[17,22],[[23,[18,[1]]],23],[[3,[24,[19]]],3],[[3,6],3],[[23,21],23],[[3,21],3],[[3,6],3],[[3,6],3],[25,26],[25,27],[25,26],[7,26],[7,27],[7],[7,2],[7,2],[[3,[18,[7]]],3],[[3,[18,[17]]],3],[[3,[18,[17]]],3],[[3,[18,[8]]],3],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,26],[[]],[[]],[[]],[7,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[28,28],[20,20],[19,19],[23,23],[29,29],[3,3],[25,25],[15,15],[30,30],[[[32,[31]]],[[32,[31]]]],[7,7],[17,17],[33,33],[34,34],[35,35],[36,36],[[[40,[[0,[31,37,31,38,39]]]]],[[40,[[0,[31,37,31,38,39]]]]]],[41,41],[[[44,[[0,[31,[43,[42]],31,38,39]]]]],[[44,[[0,[31,[43,[42]],31,38,39]]]]]],[[[46,[[0,[31,[43,[45]]]]]]],[[46,[[0,[31,[43,[45]]]]]]]],[47,47],[48,48],[49,49],[50,50],[[[51,[31,31]]],[[51,[31,31]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[19,19],5],[[25,25],5],[[[32,[52]],32],5],[[7,7],5],[[17,17],5],[[3,4],3],[[19,[18,[1]]],19],[[23,[18,[1]]],23],[[19,21],19],[[23,21],23],[3],[[],19],[[],23],[[],3],[[],25],[[],15],[[],30],[[],7],[[],17],[[],17],[[],33],[[],34],[[],35],[[],36],[[],[[40,[[0,[37,31,38,39]]]]]],[[],[[44,[[0,[[43,[42]],31,38,39]]]]]],[[],[[46,[[43,[45]]]]]],[[],47],[[],48],[[],49],[[],50],[[19,[18,[25]]],19],[[19,[24,[25]]],19],[[19,21],19],[[19,21],19],[[19,[18,[25]]],19],[[19,[24,[1]],[24,[29]],[18,[25]]],19],[[19,21],19],[[19,21],19],[25,26],[7,2],[[3,6],3],[[3,6],3],[[3,6],3],[[3,6],3],[[3,[18,[8]]],3],[[19,[18,[53]]],19],[[3,[18,[53]]],3],[[3,6],3],[30,[[54,[53]]]],[[19,19],6],[[23,23],6],[[29,29],6],[[25,55],6],[[25,25],6],[[25,2],6],[[25,8],6],[[25,2],6],[[25,26],6],[[15,15],6],[[30,30],6],[[[32,[56]],32],6],[[7,8],6],[[7,1],6],[[7,7],6],[[7,26],6],[[7,2],6],[[7,26],6],[[7,2],6],[[17,17],6],[[33,33],6],[[3,57,22],12],[[19,6],19],[[3,[18,[28]]],3],[[3,[58,[26]]],[[14,[3]]]],[[3,[58,[26]]],[[14,[3]]]],[[28,9],[[13,[59]]]],[[20,9],10],[[19,9],10],[[19,9],[[13,[59]]]],[[23,9],10],[[29,9],10],[[3,9],10],[[3,9],10],[[25,9],10],[[15,9],10],[[30,9],10],[[30,9],10],[[[32,[60]],9],10],[[7,9],10],[[7,9],10],[[17,9],10],[[17,9],10],[[33,9],10],[[34,9],10],[[35,9],10],[[36,9],10],[[[40,[[0,[60,37,31,38,39]]]],9],10],[[41,9],10],[[[44,[[0,[60,[43,[42]],31,38,39]]]],9],10],[[[46,[[0,[60,[43,[45]]]]]],9],10],[[47,9],10],[[48,9],10],[[49,9],10],[[50,9],10],[[[51,[60,60]],9],10],[61,28],[[[62,[42]]],28],[[[63,[42]]],28],[[[64,[42]]],28],[[[65,[42]]],28],[[[66,[42]]],28],[[],28],[[],28],[67,28],[[]],[[]],[19,19],[[]],[[]],[23,23],[[]],[[[24,[25]]],29],[3,3],[[]],[25,25],[[]],[7,25],[26,25],[26,25],[2,25],[2,25],[7,25],[[]],[[[24,[7]]],15],[[[62,[53]]],30],[53,30],[[[66,[53]]],30],[[[65,[53]]],30],[[[63,[53]]],30],[[[64,[53]]],30],[61,30],[[]],[[]],[68],[14,32],[[],32],[[]],[1,7],[2,7],[7,7],[2,7],[2,17],[2,17],[8,17],[[]],[8,17],[[]],[[]],[[]],[[]],[[]],[[],41],[[]],[[]],[[[69,[42]]],[[44,[[0,[[43,[42]],31,38,39]]]]]],[[[69,[45]]],[[46,[[43,[45]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[70],[70],[[]],[[]],[70],[2,[[13,[33]]]],[3,[[14,[17]]]],[19,20],[3,[[14,[17]]]],[3,[[14,[17]]]],[19,[[14,[[67,[2]]]]]],[3,71],[3,71],[19,[[14,[[67,[72]]]]]],[3,71],[[3,19],[[67,[19]]]],[23,71],[3,71],[3,[[14,[2]]]],[3,[[14,[17]]]],[3,[[14,[17]]]],[3,[[14,[2]]]],[3,4],[19],[3,[[14,[2]]]],[3,[[14,[28]]]],[3,71],[19,[[14,[17]]]],[15,[[14,[17]]]],[19,[[14,[2]]]],[19,1],[23,1],[19,[[14,[53]]]],[19,[[14,[2]]]],[3,[[14,[17]]]],[19,[[14,[[67,[2]]]]]],[3,[[14,[2]]]],[19,[[14,[17]]]],[3,[[14,[2]]]],[3,11],[3,11],[3,11],[3,2],[15,2],[15,71],[3,[[14,[2]]]],[19,[[14,[30]]]],[3,71],[3,71],[19,[[67,[15]]]],[19,[[14,[72]]]],[19,[[14,[[67,[72]]]]]],[3,[[14,[72]]]],[3,[[14,[2]]]],[3,[[14,[2]]]],[3,71],[3,71],[19,[[14,[72]]]],[19,33],[19,14],[19,28],[3,[[14,[2]]]],[19,[[14,[[67,[2]]]]]],[3,71],[3,71],[19,[[14,[[67,[72]]]]]],[3,71],[[19,6],19],[[19,[18,[1]]],19],[[3,[24,[23]]],3],[[19,21],19],[[3,21],3],[3,6],[25],[30],[[[32,[73]]]],[7],[33],[[19,[18,[17]]],19],[[15,[18,[17]]],15],[[3,6],3],[[19,[18,[7]]],19],[[3,[18,[17]]],3],[[19,6],19],[[3,6],3],[[15,6],15],[[19,6],19],[[19,6],19],[[19,6],19],[[3,6],3],[[19,6],19],[[19,[24,[1]]],19],[[23,[24,[1]]],23],[[19,6],19],[[3,6],3],[[19,[18,[53]]],19],[[3,1]],[[3,6],3],[[3,6],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[20,[[32,[20]]]],[32,32],[33,[[32,[33]]]],[3,6],[19,6],[3,6],[19,6],[3,6],[3,6],[3,6],[3,6],[3,6],[3,6],[3,6],[19,6],[19,6],[19,6],[19,6],[19,6],[19,6],[3,6],[15,6],[19,6],[19,6],[19,6],[3,6],[23,6],[19,6],[3,6],[3,6],[19,6],[3,6],[19,6],[19,6],[23,6],[3,6],[3,6],[3,6],[19,6],[[19,6],19],[[19,[18,[7]]],19],[[3,[18,[17]]],3],[[3,[24,[7]]],3],[[3,[18,[7]]],3],[[3,21],3],[[19,[18,[17]]],19],[[3,[18,[7]]],3],[[],51],[[],51],[[15,2,6],6],[[3,53],3],[30,53],[30,53],[[3,6],3],[[23,6],23],[[3,[58,[2]]],3],[[3,[58,[2]]],3],[[3,[24,[7]]],3],[[],28],[[[24,[1]]],19],[[[24,[1]]],23],[[[24,[7]]],3],[[[24,[7]]],15],[[[24,[30]]],30],[[],17],[[],34],[[],35],[[],36],[[],[[40,[[0,[37,31,38,39]]]]]],[[[24,[41]]],41],[[],[[44,[[0,[[43,[42]],31,38,39]]]]]],[[],[[46,[[43,[45]]]]]],[[],47],[[],48],[[],49],[[],50],[[3,[18,[53]]],3],[[3,[18,[7]]],3],[[19,6],19],[[3,6],3],[[3,6],3],[[19,[18,[30]]],19],[[],28],[[3,[18,[17]]],3],[[3,[18,[17]]],3],[[19,[18,[1]]],19],[[19,21],19],[[3,[14,[19]],55],[[13,[12]]]],[[3,[14,[19]],55],[[13,[12]]]],[[34,3,[14,[19]],55],[[13,[12]]]],[[35,3,[14,[19]],55],[[13,[12]]]],[[36,3,[14,[19]],55],[[13,[12]]]],[[41,3,[14,[19]],55],[[13,[8,12]]]],[[51,3,[14,[19]],55],[[13,[12]]]],[[3,[14,[19]],26],[[13,[12]]]],[[34,3,[14,[19]],26],[[13,[12]]]],[[35,3,[14,[19]],26],[[13,[12]]]],[[36,3,[14,[19]],26],[[13,[12]]]],[[[40,[[0,[37,31,38,39]]]],3,[14,[19]],26],[[13,[12]]]],[[41,3,[14,[19]],26],[[13,[12]]]],[[[44,[[0,[[43,[42]],31,38,39]]]],3,[14,[19]],26],[[13,[12]]]],[[[46,[[0,[[43,[45]],31,38,39]]]],3,[14,[19]],26],[[13,[12]]]],[[47,3,[14,[19]],26],[[13,[12]]]],[[48,3,[14,[19]],26],[[13,[12]]]],[[49,3,[14,[19]],26],[[13,[12]]]],[[50,3,[14,[19]],26],[[13,[12]]]],[[51,3,[14,[19]],26],[[13,[12]]]],[[19,19],[[14,[5]]]],[[25,25],[[14,[5]]]],[[[32,[74]],32],[[14,[5]]]],[[7,7],[[14,[5]]]],[[17,17],[[14,[5]]]],[[],28],[28,[[14,[[75,[71]]]]]],[[],[[14,[[75,[71]]]]]],[[],[[14,[[75,[71]]]]]],[[[40,[[0,[37,31,38,39]]]]],[[14,[[75,[71]]]]]],[41,[[14,[[75,[71]]]]]],[47,[[14,[[75,[71]]]]]],[48,[[14,[[75,[71]]]]]],[49,[[14,[[75,[71]]]]]],[51,[[14,[[75,[71]]]]]],[3,76],[3,76],[[3,6],3],[[[44,[[0,[[43,[42]],31,38,39]]]],[69,[42]]],[[44,[[0,[[43,[42]],31,38,39]]]]]],[[[46,[[43,[45]]]],[69,[45]]],[[46,[[43,[45]]]]]],[[19,6],19],[3,17],[3,17],[3,8],[3,17],[3,8],[[19,6],19],[[19,6],19],[[23,6],23],[[19,[24,[1]],[24,[25]]],19],[[19,21],19],[[19,21],19],[[19,[18,[1]]],19],[[19,21],19],[[19,21],19],[[19,[18,[1]]],19],[[23,[18,[1]]],23],[[23,21],23],[[19,[24,[29]],[24,[1]]],19],[[19,21],19],[[3,[24,[8]]]],[[19,[18,[72]]],19],[[19,[18,[72]]],19],[[19,21],19],[[3,[18,[72]]],3],[[3,[18,[72]]],3],[[3,21],3],[30,[[54,[53]]]],[[],28],[[3,[24,[3]]],3],[[3,[18,[7]]],3],[[3,6],3],[[3,6],3],[[3,6],3],[[3,[18,[7]]],3],[[3,21],3],[20,6],[30,6],[[3,53],3],[25,55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[19,6],19],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[3,[[77,[11]]]],[3,[[77,[11]]]],[3,[[77,[11]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[19,[18,[72]]],19],[[19,[18,[33]]],19],[[19,[18,[7]]],19],[[19,21],19],[[]],[[19,[18,[28]]],19],[[19,[18,[7]]],19],[[3,[18,[7]]],3],[[19,[18,[7]]],19],[[3,[18,[7]]],3],[[19,21],19],[[3,21],3],[[3,[18,[7]]],3],[[3,21],3],[[19,[18,[72]]],19],[[19,21],19],[[3,[18,[72]]],3],[[3,21],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[79,[78]]],[[79,[78]]]],[80,[[14,[2]]]],[57,[[14,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[80,80],[81,81],[57,57],[[]],[[]],[[]],[[[79,[78]]],71],[[80,80],6],[[81,81],6],[[57,57],6],[[[79,[78]]],68],[[[79,[78]],9],[[77,[59]]]],[[[79,[78]],9],10],[[80,9],10],[[80,9],10],[[81,9],10],[[81,9],10],[[57,9],10],[[57,9],10],[[[79,[78]],3],[[79,[78]]]],[79,17],[79,17],[79,17],[[]],[[]],[[]],[59,[[79,[78]]]],[82,[[79,[78]]]],[[]],[[]],[[]],[[[79,[78]],80],[[14,[81]]]],[80],[57],[[[79,[78]],80,81],[[14,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[79,[78]]],57],[57,[[79,[78]]]],[[[79,[78]]],76],[83],[[57,22],[[79,[78]]]],[[[79,[78]]],17],[[[79,[78]]],[[14,[84]]]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[79,[78]]],6],[[[79,[78]],3],[[79,[78]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,85],[11,11],[86,86],[[[87,[31]]],[[87,[31]]]],[[[88,[31]]],[[88,[31]]]],[89,89],[90,90],[91,91],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[91,91],5],[[11,2],6],[[],11],[[],87],[[],88],[[],89],[[],90],[[11,11],6],[[91,91],6],[[85,9],10],[[85,9],10],[[11,9],10],[[86,9],10],[[[87,[60]],9],10],[[[88,[60]],9],10],[[89,9],10],[[90,9],10],[[91,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,2],92],[[11,2],6],[[11,2],[[14,[[88,[[0,[93,31,38,39]]]]]]]],[[11,2],14],[[11,2],[[14,[89]]]],[11,86],[[11,2],[[14,[53]]]],[[11,2],[[14,[90]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[86,[[14,[1]]]],[87,14],[88,14],[89,[[14,[26]]]],[90,[[14,[53]]]],[86,[[14,[1]]]],[87,14],[88,14],[89,[[14,[26]]]],[90,[[14,[53]]]],[[91,91],[[14,[5]]]],[83],[[11,2],[[14,[[87,[[0,[93,31,38,39]]]]]]]],[[11,2],[[14,[[0,[93,31,38,39]]]]]],[11,14],[86],[87],[88],[89],[90],[11,14],[[11,2],[[14,[11]]]],[11,[[14,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[11,2],[[13,[6,85]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[11,2],[[13,[[14,[[88,[[0,[93,31,38,39]]]]]],85]]]],[[11,2],[[13,[14,85]]]],[[11,2],[[13,[[14,[89]],85]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[11,2],[[13,[[14,[[87,[[0,[93,31,38,39]]]]]],85]]]],[[11,2],[[13,[[14,[[0,[93,31,38,39]]]],85]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[11,2],[[14,[91]]]],0,0],"p":[[3,"Id"],[15,"str"],[3,"Command"],[4,"ColorChoice"],[4,"Ordering"],[15,"bool"],[3,"Str"],[3,"String"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[4,"Option"],[3,"PossibleValue"],[3,"TypeId"],[3,"StyledStr"],[8,"IntoResettable"],[3,"Arg"],[4,"ArgAction"],[8,"IntoIterator"],[8,"Display"],[3,"ArgGroup"],[8,"Into"],[3,"OsStr"],[3,"OsStr"],[3,"Path"],[3,"ValueParser"],[4,"ArgPredicate"],[3,"ValueRange"],[8,"Clone"],[4,"Resettable"],[4,"ValueHint"],[3,"StringValueParser"],[3,"OsStringValueParser"],[3,"PathBufValueParser"],[8,"ValueEnum"],[8,"Send"],[8,"Sync"],[3,"EnumValueParser"],[3,"PossibleValuesParser"],[15,"i64"],[8,"TryFrom"],[3,"RangedI64ValueParser"],[15,"u64"],[3,"RangedU64ValueParser"],[3,"BoolValueParser"],[3,"FalseyValueParser"],[3,"BoolishValueParser"],[3,"NonEmptyStringValueParser"],[3,"MapValueParser"],[8,"Ord"],[15,"usize"],[4,"Bound"],[3,"OsString"],[8,"PartialEq"],[4,"ErrorKind"],[8,"AsRef"],[3,"Error"],[8,"Debug"],[3,"RangeFull"],[3,"RangeToInclusive"],[3,"RangeTo"],[3,"RangeFrom"],[3,"RangeInclusive"],[3,"Range"],[3,"Vec"],[15,"never"],[8,"RangeBounds"],[3,"OwnedFd"],[8,"Iterator"],[15,"char"],[8,"Hash"],[8,"PartialOrd"],[3,"Box"],[6,"Result"],[6,"Result"],[8,"ErrorFormatter"],[3,"Error"],[4,"ContextKind"],[4,"ContextValue"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"MatchesError"],[3,"IdsRef"],[3,"Values"],[3,"ValuesRef"],[3,"RawValues"],[3,"Indices"],[4,"ValueSource"],[15,"u8"],[8,"Any"],[8,"Args"],[8,"Subcommand"],[8,"CommandFactory"],[8,"FromArgMatches"],[8,"Parser"],[8,"ValueParserFactory"],[8,"TypedValueParser"],[13,"Equals"],[13,"Value"],[3,"KindFormatter"],[3,"RichFormatter"],[13,"Bool"],[13,"String"],[13,"Strings"],[13,"StyledStr"],[13,"StyledStrs"],[13,"Number"],[13,"Downcast"]]},\
"clap_lex":{"doc":"Minimal, flexible command-line parser","tn":["ArgCursor","Current","End","ParsedArg","RawArgs","RawOsStr","RawOsString","SeekFrom","ShortFlags","Start","advance_by","as_raw_bytes","as_ref","as_ref","assert_from_raw_bytes","assert_from_raw_vec","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contains","cursor","default","default","default","deref","display","ends_with","ends_with_os","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_args","from_raw_bytes_unchecked","from_raw_vec_unchecked","from_str","from_string","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","insert","into","into","into","into","into","into","into_box","into_iter","into_os_string","into_raw_vec","into_string","is_empty","is_empty","is_empty","is_end","is_escape","is_long","is_number","is_number","is_short","is_stdio","new","new","new","next","next","next_flag","next_os","next_value_os","partial_cmp","partial_cmp","partial_cmp","partial_cmp","peek","peek_os","raw_len","remaining","rfind","rsplit_once","seek","shrink_to_fit","split","split_at","split_off","split_once","starts_with","starts_with_os","strip_prefix","strip_suffix","to_long","to_os_str","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_short","to_str","to_str_lossy","to_value","to_value_os","trim_end_matches","trim_matches","trim_start_matches","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0"],"q":["clap_lex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clap_lex::SeekFrom","",""],"d":["Position within <code>RawArgs</code>","Sets the offset to the current position plus the specified …","Sets the offset to the size of this object plus the …","Command-line Argument","Command-line arguments","A container for borrowed byte strings converted by this …","A container for owned byte strings converted by this crate.","Enumeration of possible methods to seek within an I/O …","Walk through short flags within a <code>ParsedArg</code>","Sets the offset to the provided number of bytes.","Move the iterator forward by <code>n</code> short flags","Returns the byte string stored by this container.","","","Wraps a byte string, without copying or encoding …","Wraps a byte string, without copying or encoding …","","","","","","","","","","","","","","","","Equivalent to <code>String::clear</code>.","","","","","","","","","","","","","","","","","Equivalent to <code>str::contains</code>.","Create a cursor for walking the arguments","","","","","Safely print an argument that may contain non-UTF8 content","Equivalent to <code>str::ends_with</code>.","Equivalent to <code>str::ends_with</code> but accepts this type for the …","","","","","","","","","","","","","","","","","Equivalent to <code>str::find</code>.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","<strong>NOTE:</strong> The argument returned will be the current binary.","Wraps a byte string, without copying or encoding …","Wraps a byte string, without copying or encoding …","Wraps a string, without copying or encoding conversion.","Wraps a string, without copying or encoding conversion.","","","","","","","","","","","","","","","","Inject arguments before the <code>RawArgs::next</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Equivalent to <code>String::into_boxed_str</code>.","","Converts this representation back to a platform-native …","Returns the byte string stored by this container.","Equivalent to <code>OsString::into_string</code>.","Argument is length of 0","No short flags left","Equivalent to <code>str::is_empty</code>.","Any remaining args?","Does the argument look like an argument escape (<code>--</code>)","Can treat as a long-flag","Does the argument look like a number","Does the short flag look like a number","Can treat as a short-flag","Does the argument look like a stdio argument (<code>-</code>)","Example","Converts a platform-native string into a representation …","Converts a platform-native string into a representation …","Advance the cursor, returning the next <code>ParsedArg</code>","","Advance the iterator, returning the next short flag on …","Advance the cursor, returning a raw argument value.","Advance the iterator, returning everything left as a value","","","","","Return the next <code>ParsedArg</code>","Return a raw argument value.","Returns the length of the byte string stored by this …","Return all remaining raw arguments, advancing the cursor …","Equivalent to <code>str::rfind</code>.","Equivalent to <code>str::rsplit_once</code>.","Adjust the cursor’s position","Equivalent to <code>String::shrink_to_fit</code>.","Equivalent to <code>str::split</code>, but empty patterns are not …","Equivalent to <code>str::split_at</code>.","Equivalent to <code>String::split_off</code>.","Equivalent to <code>str::split_once</code>.","Equivalent to <code>str::starts_with</code>.","Equivalent to <code>str::starts_with</code> but accepts this type for …","Equivalent to <code>str::strip_prefix</code>.","Equivalent to <code>str::strip_suffix</code>.","Treat as a long-flag","Converts this representation back to a platform-native …","","","","","","","","Treat as a short-flag","Equivalent to <code>OsStr::to_str</code>.","Converts this string to the best UTF-8 representation …","Treat as a value","Treat as a value","Equivalent to <code>str::trim_end_matches</code>.","Equivalent to <code>str::trim_matches</code>.","Equivalent to <code>str::trim_start_matches</code>.","Equivalent to <code>String::truncate</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,12,12,0,0,0,0,0,0,12,1,4,4,5,4,5,9,10,11,1,4,5,5,12,9,10,11,1,4,5,12,5,9,10,11,1,5,12,9,10,11,1,5,12,10,11,4,5,4,9,9,4,5,5,11,4,4,9,10,11,4,4,4,4,4,4,5,5,5,5,5,5,12,4,9,10,11,1,4,5,12,9,9,10,11,1,5,5,5,12,9,4,5,4,5,11,4,5,4,4,4,4,4,4,5,5,5,5,5,5,9,9,10,11,1,5,12,5,1,5,5,5,11,1,4,9,11,11,11,1,11,11,9,4,5,9,1,1,9,1,10,11,4,5,9,9,4,9,4,4,9,5,4,4,5,4,4,4,4,4,11,4,9,10,11,1,4,5,12,11,4,4,11,11,4,4,4,5,9,10,11,1,5,12,9,10,11,1,5,12,9,10,11,1,4,5,12,37,38,39],"f":[0,0,0,0,0,0,0,0,0,0,[[1,2],[[3,[2]]]],[4],[4,4],[5,4],[[],4],[[[8,[6,7]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[5,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5],[9,9],[10,10],[11,11],[1,1],[5,5],[12,12],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],13],[[11,11],13],[[4,4],13],[[5,5],13],[4,14],[9,10],[[],9],[[],4],[[],5],[5],[11,15],[4,14],[[4,4],14],[[9,9],14],[[10,10],14],[[11,11],14],[[4,5],14],[[4,5],14],[[4,4],14],[[4,16],14],[[4,17],14],[[4,16],14],[[5,16],14],[[5,4],14],[[5,5],14],[[5,17],14],[[5,4],14],[[5,17],14],[[12,12],14],[4,[[18,[2]]]],[[9,19],20],[[10,19],20],[[11,19],20],[[1,19],20],[[4,19],[[3,[21]]]],[[5,19],[[3,[21]]]],[[12,19],[[3,[21]]]],[[]],[[],9],[[]],[[]],[[]],[16,5],[[]],[[[22,[4,7]]],5],[[]],[[],9],[[],4],[[[8,[6,7]]],5],[17,4],[16,5],[11],[4],[5],[[4,[23,[2]]]],[[4,[24,[2]]]],[[4,[25,[2]]]],[[4,26]],[[4,[27,[2]]]],[[4,[28,[2]]]],[[5,[27,[2]]]],[[5,[24,[2]]]],[[5,[28,[2]]]],[[5,26]],[[5,[23,[2]]]],[[5,[25,[2]]]],[[9,10,29]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[22,[4,7]]]],[[]],[5,30],[5,[[8,[6,7]]]],[5,[[3,[16,5]]]],[11,14],[1,14],[4,14],[[9,10],14],[11,14],[11,14],[11,14],[1,14],[11,14],[11,14],[29,9],[31,[[32,[4]]]],[30,5],[[9,10],[[18,[11]]]],[1,18],[1,[[18,[[3,[33,4]]]]]],[[9,10],[[18,[31]]]],[1,[[18,[4]]]],[[10,10],[[18,[13]]]],[[11,11],[[18,[13]]]],[[4,4],[[18,[13]]]],[[5,5],[[18,[13]]]],[[9,10],[[18,[11]]]],[[9,10],[[18,[31]]]],[4,2],[[9,10],34],[4,[[18,[2]]]],[4,18],[[9,10,12]],[5],[4,35],[[4,2]],[[5,2],5],[4,18],[4,14],[[4,4],14],[4,[[18,[4]]]],[4,[[18,[4]]]],[11,18],[4,[[32,[31]]]],[[]],[[]],[[]],[[]],[4],[[]],[[]],[11,[[18,[1]]]],[4,[[18,[17]]]],[4,[[32,[17]]]],[11,[[3,[17,4]]]],[11,4],[4,4],[4,4],[4,4],[[5,2]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],0,0,0],"p":[[3,"ShortFlags"],[15,"usize"],[4,"Result"],[3,"RawOsStr"],[3,"RawOsString"],[15,"u8"],[3,"Global"],[3,"Vec"],[3,"RawArgs"],[3,"ArgCursor"],[3,"ParsedArg"],[4,"SeekFrom"],[4,"Ordering"],[15,"bool"],[8,"Display"],[3,"String"],[15,"str"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Box"],[3,"RangeFrom"],[3,"RangeToInclusive"],[3,"RangeTo"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"Range"],[8,"IntoIterator"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[15,"char"],[8,"Iterator"],[3,"Split"],[3,"TypeId"],[13,"Start"],[13,"End"],[13,"Current"]]},\
"embed_doc_image":{"doc":"Embed images in documentation.","t":[23,14],"n":["embed_doc_image","embed_image"],"q":["embed_doc_image",""],"d":["Produces a doc string for inclusion in Markdown …","Produces a doc string for inclusion in Markdown …"],"i":[0,0],"f":[0,0],"p":[]},\
"errno":{"doc":"Cross-platform interface to the <code>errno</code> variable.","t":[12,3,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11],"n":["0","Errno","borrow","borrow_mut","clone","cmp","eq","errno","from","hash","into","into","partial_cmp","set_errno","try_from","try_into","type_id"],"q":["errno","","","","","","","","","","","","","","","",""],"d":["","Wraps a platform-specific error code.","","","","","","Returns the platform-specific value of <code>errno</code>.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Sets the platform-specific value of <code>errno</code>.","","",""],"i":[1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[1,1],2],[[1,1],3],[[],1],[[]],[1],[[]],[1,4],[[1,1],[[5,[2]]]],[1],[[],6],[[],6],[[],7]],"p":[[3,"Errno"],[4,"Ordering"],[15,"bool"],[15,"i32"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[18,18,3,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","into","provide","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Calls <code>U::from(self)</code>.","","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[1,2],[[1,1],3],[[1,4],5],[[1,4],5],[2,1],[[]],[[],[[6,[1]]]],[[]],[7],[1,[[9,[8]]]],[[]],[[],10],[[],6],[[],6],[[],11]],"p":[[3,"Error"],[3,"NonZeroU32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"Demand"],[15,"i32"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"heck":{"doc":"<strong>heck</strong> is a case conversion library.","t":[12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,10,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","0","0","0","0","0","0","0","AsKebabCase","AsLowerCamelCase","AsPascalCase","AsShoutyKebabCase","AsShoutySnakeCase","AsShoutySnekCase","AsSnakeCase","AsSnekCase","AsTitleCase","AsUpperCamelCase","TO_SHOUTY_SNEK_CASE","ToKebabCase","ToLowerCamelCase","ToPascalCase","ToShoutyKebabCase","ToShoutySnakeCase","ToShoutySnekCase","ToSnakeCase","ToSnekCase","ToTitleCase","ToUpperCamelCase","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","to_kebab_case","to_lower_camel_case","to_pascal_case","to_shouty_kebab_case","to_shouty_snake_case","to_snake_case","to_snek_case","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_title_case","to_upper_camel_case","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["heck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","This wrapper performs a kebab case conversion in …","This wrapper performs a lower camel case conversion in …","This wrapper performs a upper camel case conversion in …","This wrapper performs a kebab case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a title case conversion in …","This wrapper performs a upper camel case conversion in …","CONVERT THIS TYPE TO SNEK CASE.","This trait defines a kebab case conversion.","This trait defines a lower camel case conversion.","ToPascalCase is an alias for ToUpperCamelCase. See …","This trait defines a shouty kebab case conversion.","This trait defines a shouty snake case conversion.","Oh heck, ToShoutySnekCase is an alias for …","This trait defines a snake case conversion.","Oh heck, SnekCase is an alias for ToSnakeCase. See …","This trait defines a title case conversion.","This trait defines an upper camel case conversion.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this type to kebab case.","Convert this type to lower camel case.","Convert this type to upper camel case.","Convert this type to shouty kebab case.","Convert this type to shouty snake case.","Convert this type to snake case.","Convert this type to snek case.","","","","","","","","Convert this type to title case.","Convert this type to upper camel case.","","","","","","","","","","","","","","","","","","","","",""],"i":[3,6,7,8,8,9,9,10,11,11,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,16,17,18,19,20,21,22,3,6,7,8,9,10,11,23,24,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]],4],5],[[[6,[[2,[1]]]],4],5],[[[7,[[2,[1]]]],4],5],[[[8,[[2,[1]]]],4],5],[[[9,[[2,[1]]]],4],5],[[[10,[[2,[1]]]],4],5],[[[11,[[2,[1]]]],4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14]],"p":[[15,"str"],[8,"AsRef"],[3,"AsKebabCase"],[3,"Formatter"],[6,"Result"],[3,"AsLowerCamelCase"],[3,"AsShoutyKebabCase"],[3,"AsShoutySnakeCase"],[3,"AsSnakeCase"],[3,"AsTitleCase"],[3,"AsUpperCamelCase"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"ToShoutySnekCase"],[8,"ToKebabCase"],[8,"ToLowerCamelCase"],[8,"ToPascalCase"],[8,"ToShoutyKebabCase"],[8,"ToShoutySnakeCase"],[8,"ToSnakeCase"],[8,"ToSnekCase"],[8,"ToTitleCase"],[8,"ToUpperCamelCase"]]},\
"io_lifetimes":{"doc":"Experimental new types and traits to replace the <code>Raw</code> …","t":[8,8,8,3,6,6,8,8,8,8,8,8,3,6,6,10,11,11,10,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,10,11,11,11,10,11,11,10,10,11,11,11,10,11,11,0,11,11,11,11,11,11,11,11,11,0,17,17,17,17,17,17,5,5,5,8,8,8,8,8,8,6,6,10,10,10,10,10,10,3,8,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AsFd","AsFilelike","AsSocketlike","BorrowedFd","BorrowedFilelike","BorrowedSocketlike","FromFd","FromFilelike","FromSocketlike","IntoFd","IntoFilelike","IntoSocketlike","OwnedFd","OwnedFilelike","OwnedSocketlike","as_fd","as_fd","as_fd","as_filelike","as_filelike_view","as_raw_fd","as_raw_fd","as_raw_filelike","as_raw_filelike","as_raw_socketlike","as_raw_socketlike","as_socketlike","as_socketlike_view","borrow","borrow","borrow_mut","borrow_mut","borrow_raw","clone","clone_into","drop","example_ffi","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_fd","from_filelike","from_into_fd","from_into_fd","from_into_filelike","from_into_socketlike","from_raw_fd","from_raw_filelike","from_raw_socketlike","from_socketlike","into","into","into_fd","into_filelike","into_raw_fd","into_raw_filelike","into_raw_socketlike","into_socketlike","is_terminal","is_terminal","raw","to_owned","try_clone","try_clone_to_owned","try_from","try_from","try_into","try_into","type_id","type_id","views","O_CLOEXEC","O_CREAT","O_RDONLY","O_RDWR","O_TRUNC","O_WRONLY","open","read","write","AsRawFilelike","AsRawSocketlike","FromRawFilelike","FromRawSocketlike","IntoRawFilelike","IntoRawSocketlike","RawFilelike","RawSocketlike","as_raw_filelike","as_raw_socketlike","from_raw_filelike","from_raw_socketlike","into_raw_filelike","into_raw_socketlike","FilelikeView","FilelikeViewType","SocketlikeView","SocketlikeViewType","borrow","borrow","borrow_mut","borrow_mut","deref","deref","drop","drop","fmt","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","view_raw","view_raw"],"q":["io_lifetimes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","io_lifetimes::example_ffi","","","","","","","","","io_lifetimes::raw","","","","","","","","","","","","","","io_lifetimes::views","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A trait to borrow the file descriptor from an underlying …","A portable trait to borrow a reference from an underlying …","A portable trait to borrow a reference from an underlying …","A borrowed file descriptor.","A reference to a filelike object.","A reference to a socketlike object.","A trait to express the ability to construct an object from …","A portable trait to express the ability to construct an …","A portable trait to express the ability to construct an …","A trait to express the ability to consume an object and …","A portable trait to express the ability to consume an …","A portable trait to express the ability to consume an …","An owned file descriptor.","An owned filelike object.","An owned socketlike object.","Borrows the file descriptor.","","","Borrows the reference.","Return a borrowing view of a resource which dereferences …","","","","","","","Borrows the reference.","Return a borrowing view of a resource which dereferences …","","","","","Return a <code>BorrowedFd</code> holding the given raw file descriptor.","","","","This is just a sample of what FFI using this crate can …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new instance of <code>Self</code> from the given file …","Constructs a new instance of <code>Self</code> from the given filelike …","Constructs a new instance of <code>Self</code> from the given file …","Constructs a new instance of <code>Self</code> from the given file …","Constructs a new instance of <code>Self</code> from the given filelike …","Constructs a new instance of <code>Self</code> from the given …","Constructs a new instance of <code>Self</code> from the given raw file …","","","Constructs a new instance of <code>Self</code> from the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this object, returning the underlying file …","Consumes this object, returning the underlying filelike …","","","","Consumes this object, returning the underlying socketlike …","","","Portability abstractions over <code>Raw*</code>.","","Creates a new <code>OwnedFd</code> instance that shares the same …","Creates a new <code>OwnedFd</code> instance that shares the same …","","","","","","","Typed views using temporary objects.","","","","","","","","","","A portable trait to obtain the raw value of an underlying …","This is a portability abstraction over Unix-like <code>AsRawFd</code> …","This is a portability abstraction over Unix-like <code>FromRawFd</code> …","This is a portability abstraction over Unix-like <code>FromRawFd</code> …","This is a portability abstraction over Unix-like <code>IntoRawFd</code> …","This is a portability abstraction over Unix-like <code>IntoRawFd</code> …","A raw filelike object.","A raw socketlike object.","Returns the raw value.","Returns the raw value.","Constructs <code>Self</code> from the raw value.","Constructs <code>Self</code> from the raw value.","Returns the raw value.","Returns the raw value.","A non-owning view of a resource which dereferences to a …","Declare that a type is safe to use in a <code>FilelikeView</code>.","A non-owning view of a resource which dereferences to a …","Declare that a type is safe to use in a <code>SocketlikeView</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Construct a temporary <code>Target</code> from raw and wrap it in a …","Construct a temporary <code>Target</code> from raw and wrap it in a …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,2,1,35,35,2,1,2,1,2,1,36,36,2,1,2,1,1,1,1,2,0,2,1,2,2,2,2,2,2,2,2,2,2,2,1,37,38,37,37,38,39,2,2,2,39,2,1,40,25,2,2,2,26,2,1,0,1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,43,44,45,46,0,0,0,0,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[1,1],[[],3],[[],[[5,[4]]]],[2,6],[1,6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],[[9,[8]]]],[[]],[[]],[[]],[[]],[6,1],[1,1],[[]],[2],0,[[2,10],[[12,[11]]]],[[1,10],[[12,[11]]]],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[19,2],[20,2],[21,2],[22,2],[[]],[[]],[2],[23],[[[24,[2]]]],[[[24,[2]]]],[25],[26],[6,2],[6],[6],[27],[[]],[[]],[[],2],[[],23],[2,6],[[],6],[[],6],[[],27],[2,28],[1,28],0,[[]],[2,[[12,[2,29]]]],[1,[[12,[2,29]]]],[[],12],[[],12],[[],12],[[],12],[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],31],[[],32],[31],[32],[[],31],[[],32],0,0,0,0,[[]],[[]],[[]],[[]],[[[5,[4]]]],[[[9,[8]]]],[[[5,[4]]]],[[[9,[8]]]],[[[5,[4]],10],33],[[[9,[8]],10],33],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],30],[[],30],[31,[[5,[4]]]],[32,[[9,[8]]]]],"p":[[3,"BorrowedFd"],[3,"OwnedFd"],[6,"BorrowedFilelike"],[8,"FilelikeViewType"],[3,"FilelikeView"],[15,"i32"],[6,"BorrowedSocketlike"],[8,"SocketlikeViewType"],[3,"SocketlikeView"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"TcpListener"],[3,"UdpSocket"],[3,"TcpStream"],[3,"File"],[3,"UnixDatagram"],[3,"ChildStdout"],[3,"UnixListener"],[3,"ChildStdin"],[3,"ChildStderr"],[3,"UnixStream"],[6,"OwnedFilelike"],[8,"Into"],[8,"IntoFilelike"],[8,"IntoSocketlike"],[6,"OwnedSocketlike"],[15,"bool"],[3,"Error"],[3,"TypeId"],[6,"RawFilelike"],[6,"RawSocketlike"],[6,"Result"],[8,"AsFd"],[8,"AsFilelike"],[8,"AsSocketlike"],[8,"FromFd"],[8,"FromFilelike"],[8,"FromSocketlike"],[8,"IntoFd"],[8,"AsRawFilelike"],[8,"AsRawSocketlike"],[8,"FromRawFilelike"],[8,"FromRawSocketlike"],[8,"IntoRawFilelike"],[8,"IntoRawSocketlike"]]},\
"is_terminal":{"doc":"is-terminal is a simple utility that answers one question:","t":[8,10],"n":["IsTerminal","is_terminal"],"q":["is_terminal",""],"d":["","Returns true if this is a terminal."],"i":[0,2],"f":[0,[[],1]],"p":[[15,"bool"],[8,"IsTerminal"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,11,11],"n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":["itoa","","","","","","","","","","","",""],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[],1],[[1,2],3],[[]],[[]],[[],1],[[],4],[[],4],[[],5]],"p":[[3,"Buffer"],[8,"Integer"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","tn":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NDRV","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","ATTR_BIT_MAP_COUNT","ATTR_CMNEXT_CLONEID","ATTR_CMNEXT_EXT_FLAGS","ATTR_CMNEXT_LINKID","ATTR_CMNEXT_NOFIRMLINKPATH","ATTR_CMNEXT_PRIVATESIZE","ATTR_CMNEXT_REALDEVID","ATTR_CMNEXT_REALFSID","ATTR_CMNEXT_RECURSIVE_GENCOUNT","ATTR_CMNEXT_RELPATH","ATTR_CMN_ACCESSMASK","ATTR_CMN_ACCTIME","ATTR_CMN_ADDEDTIME","ATTR_CMN_BKUPTIME","ATTR_CMN_CHGTIME","ATTR_CMN_CRTIME","ATTR_CMN_DATA_PROTECT_FLAGS","ATTR_CMN_DEVID","ATTR_CMN_DOCUMENT_ID","ATTR_CMN_EXTENDED_SECURITY","ATTR_CMN_FILEID","ATTR_CMN_FLAGS","ATTR_CMN_FNDRINFO","ATTR_CMN_FSID","ATTR_CMN_FULLPATH","ATTR_CMN_GEN_COUNT","ATTR_CMN_GRPID","ATTR_CMN_GRPUUID","ATTR_CMN_MODTIME","ATTR_CMN_NAME","ATTR_CMN_OBJID","ATTR_CMN_OBJPERMANENTID","ATTR_CMN_OBJTAG","ATTR_CMN_OBJTYPE","ATTR_CMN_OWNERID","ATTR_CMN_PARENTID","ATTR_CMN_PAROBJID","ATTR_CMN_RETURNED_ATTRS","ATTR_CMN_SCRIPT","ATTR_CMN_USERACCESS","ATTR_CMN_UUID","ATTR_DIR_ALLOCSIZE","ATTR_DIR_DATALENGTH","ATTR_DIR_ENTRYCOUNT","ATTR_DIR_IOBLOCKSIZE","ATTR_DIR_LINKCOUNT","ATTR_DIR_MOUNTSTATUS","ATTR_FILE_ALLOCSIZE","ATTR_FILE_DATAALLOCSIZE","ATTR_FILE_DATALENGTH","ATTR_FILE_DEVTYPE","ATTR_FILE_FORKCOUNT","ATTR_FILE_FORKLIST","ATTR_FILE_IOBLOCKSIZE","ATTR_FILE_LINKCOUNT","ATTR_FILE_RSRCALLOCSIZE","ATTR_FILE_RSRCLENGTH","ATTR_FILE_TOTALSIZE","ATTR_VOL_ALLOCATIONCLUMP","ATTR_VOL_ATTRIBUTES","ATTR_VOL_CAPABILITIES","ATTR_VOL_DIRCOUNT","ATTR_VOL_ENCODINGSUSED","ATTR_VOL_FILECOUNT","ATTR_VOL_FSTYPE","ATTR_VOL_INFO","ATTR_VOL_IOBLOCKSIZE","ATTR_VOL_MAXOBJCOUNT","ATTR_VOL_MINALLOCATION","ATTR_VOL_MOUNTEDDEVICE","ATTR_VOL_MOUNTFLAGS","ATTR_VOL_MOUNTPOINT","ATTR_VOL_NAME","ATTR_VOL_OBJCOUNT","ATTR_VOL_QUOTA_SIZE","ATTR_VOL_RESERVED_SIZE","ATTR_VOL_SIGNATURE","ATTR_VOL_SIZE","ATTR_VOL_SPACEAVAIL","ATTR_VOL_SPACEFREE","ATTR_VOL_SPACEUSED","ATTR_VOL_UUID","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_OBJERR","CCCryptorStatus","CCRNGStatus","CCRandomGenerateBytes","CCStatus","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_MONOTONIC_RAW","CLOCK_MONOTONIC_RAW_APPROX","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CLOCK_UPTIME_RAW","CLOCK_UPTIME_RAW_APPROX","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","COPYFILE_ACL","COPYFILE_CHECK","COPYFILE_CLONE","COPYFILE_CLONE_FORCE","COPYFILE_CONTINUE","COPYFILE_COPY_DATA","COPYFILE_COPY_XATTR","COPYFILE_DATA","COPYFILE_DATA_SPARSE","COPYFILE_ERR","COPYFILE_EXCL","COPYFILE_FINISH","COPYFILE_METADATA","COPYFILE_MOVE","COPYFILE_NOFOLLOW","COPYFILE_NOFOLLOW_DST","COPYFILE_NOFOLLOW_SRC","COPYFILE_PACK","COPYFILE_PRESERVE_DST_TRACKED","COPYFILE_PROGRESS","COPYFILE_QUIT","COPYFILE_RECURSE_DIR","COPYFILE_RECURSE_DIR_CLEANUP","COPYFILE_RECURSE_ERROR","COPYFILE_RECURSE_FILE","COPYFILE_RECURSIVE","COPYFILE_RUN_IN_PLACE","COPYFILE_SECURITY","COPYFILE_SKIP","COPYFILE_START","COPYFILE_STAT","COPYFILE_UNLINK","COPYFILE_UNPACK","COPYFILE_VERBOSE","COPYFILE_XATTR","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DIR_MNTSTATUS_MNTPOINT","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","FSOPT_ATTR_CMN_EXTENDED","FSOPT_NOFOLLOW","FSOPT_NOFOLLOW_ANY","FSOPT_PACK_INVAL_ATTRS","FSOPT_REPORT_FULLSIZE","FSOPT_RETURN_REALDEV","F_ALLOCATEALL","F_ALLOCATECONTIG","F_BARRIERFSYNC","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GETPATH_NOFIRMLINK","F_GLOBAL_NOCACHE","F_LOCK","F_LOG2PHYS","F_LOG2PHYS_EXT","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_TEST","F_THAW_FS","F_TLOCK","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HOST_CPU_LOAD_INFO","HOST_CPU_LOAD_INFO_COUNT","HOST_EXPIRED_TASK_INFO","HOST_EXTMOD_INFO64","HOST_LOAD_INFO","HOST_VM_INFO","HOST_VM_INFO64","HOST_VM_INFO64_COUNT","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_BOUND_IF","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BLOCK_SOURCE","IP_BOUND_IF","IP_DONTFRAG","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","IP_UNBLOCK_SOURCE","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_ABORTED","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ALREADY_IN_SET","KERN_ALREADY_WAITING","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_CODESIGN_ERROR","KERN_COREDUMP","KERN_COREFILE","KERN_DEFAULT_SET","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXCEPTION_PROTECTED","KERN_EXEC","KERN_FAILURE","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_INSUFFICIENT_BUFFER_SIZE","KERN_INVALID_ADDRESS","KERN_INVALID_ARGUMENT","KERN_INVALID_CAPABILITY","KERN_INVALID_HOST","KERN_INVALID_LEDGER","KERN_INVALID_MEMORY_CONTROL","KERN_INVALID_NAME","KERN_INVALID_OBJECT","KERN_INVALID_POLICY","KERN_INVALID_PROCESSOR_SET","KERN_INVALID_RIGHT","KERN_INVALID_SECURITY","KERN_INVALID_TASK","KERN_INVALID_VALUE","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOCK_OWNED","KERN_LOCK_OWNED_SELF","KERN_LOCK_SET_DESTROYED","KERN_LOCK_UNSTABLE","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_MEMORY_DATA_MOVED","KERN_MEMORY_ERROR","KERN_MEMORY_FAILURE","KERN_MEMORY_PRESENT","KERN_MEMORY_RESTART_COPY","KERN_NAME_EXISTS","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NODE_DOWN","KERN_NOT_DEPRESSED","KERN_NOT_IN_SET","KERN_NOT_RECEIVER","KERN_NOT_SUPPORTED","KERN_NOT_WAITING","KERN_NO_ACCESS","KERN_NO_SPACE","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OPERATION_TIMED_OUT","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POLICY_LIMIT","KERN_POLICY_STATIC","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PROTECTION_FAILURE","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_RESOURCE_SHORTAGE","KERN_RIGHT_EXISTS","KERN_RPC_CONTINUE_ORPHAN","KERN_RPC_SERVER_TERMINATED","KERN_RPC_TERMINATE_ORPHAN","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SEMAPHORE_DESTROYED","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUCCESS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TERMINATED","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_UREFS_OVERFLOW","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MACH_PORT_NULL","MACH_TASK_BASIC_INFO","MACH_TASK_BASIC_INFO_COUNT","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPATHLEN","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MCL_CURRENT","MCL_FUTURE","MDMBUF","MEMORY_OBJECT_NULL","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OS_LOG_TYPE_DEBUG","OS_LOG_TYPE_DEFAULT","OS_LOG_TYPE_ERROR","OS_LOG_TYPE_FAULT","OS_LOG_TYPE_INFO","OS_SIGNPOST_EVENT","OS_SIGNPOST_INTERVAL_BEGIN","OS_SIGNPOST_INTERVAL_END","OS_UNFAIR_LOCK_INIT","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EVTONLY","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NOFOLLOW_ANY","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NDRV","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_CSM_ALL","PROC_CSM_NOSMT","PROC_CSM_TECS","PROC_PIDPATHINFO_MAXSIZE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTBSDINFO","PROC_PIDTHREADINFO","PROC_PIDVNODEPATHINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_INTROSPECTION_THREAD_CREATE","PTHREAD_INTROSPECTION_THREAD_DESTROY","PTHREAD_INTROSPECTION_THREAD_START","PTHREAD_INTROSPECTION_THREAD_TERMINATE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","QOS_CLASS_BACKGROUND","QOS_CLASS_DEFAULT","QOS_CLASS_UNSPECIFIED","QOS_CLASS_USER_INITIATED","QOS_CLASS_USER_INTERACTIVE","QOS_CLASS_UTILITY","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DEAD","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_GLOBAL","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_INFO_V0","RUSAGE_INFO_V1","RUSAGE_INFO_V2","RUSAGE_INFO_V3","RUSAGE_INFO_V4","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCHED_FIFO","SCHED_OTHER","SCHED_RR","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSDIR_DIRECTORY_ADMIN_APPLICATION","SYSDIR_DIRECTORY_ALL_APPLICATIONS","SYSDIR_DIRECTORY_ALL_LIBRARIES","SYSDIR_DIRECTORY_APPLICATION","SYSDIR_DIRECTORY_APPLICATION_SUPPORT","SYSDIR_DIRECTORY_AUTOSAVED_INFORMATION","SYSDIR_DIRECTORY_CACHES","SYSDIR_DIRECTORY_CORESERVICE","SYSDIR_DIRECTORY_DEMO_APPLICATION","SYSDIR_DIRECTORY_DESKTOP","SYSDIR_DIRECTORY_DEVELOPER","SYSDIR_DIRECTORY_DEVELOPER_APPLICATION","SYSDIR_DIRECTORY_DOCUMENT","SYSDIR_DIRECTORY_DOCUMENTATION","SYSDIR_DIRECTORY_DOWNLOADS","SYSDIR_DIRECTORY_INPUT_METHODS","SYSDIR_DIRECTORY_LIBRARY","SYSDIR_DIRECTORY_MOVIES","SYSDIR_DIRECTORY_MUSIC","SYSDIR_DIRECTORY_PICTURES","SYSDIR_DIRECTORY_PREFERENCE_PANES","SYSDIR_DIRECTORY_PRINTER_DESCRIPTION","SYSDIR_DIRECTORY_SHARED_PUBLIC","SYSDIR_DIRECTORY_USER","SYSDIR_DOMAIN_MASK_ALL","SYSDIR_DOMAIN_MASK_LOCAL","SYSDIR_DOMAIN_MASK_NETWORK","SYSDIR_DOMAIN_MASK_SYSTEM","SYSDIR_DOMAIN_MASK_USER","SYSPROTO_CONTROL","SYSPROTO_EVENT","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TASK_THREAD_TIMES_INFO","TASK_THREAD_TIMES_INFO_COUNT","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","THREAD_AFFINITY_POLICY","THREAD_AFFINITY_POLICY_COUNT","THREAD_AFFINITY_TAG_NULL","THREAD_BACKGROUND_POLICY","THREAD_BACKGROUND_POLICY_COUNT","THREAD_BACKGROUND_POLICY_DARWIN_BG","THREAD_BASIC_INFO","THREAD_BASIC_INFO_COUNT","THREAD_EXTENDED_INFO","THREAD_EXTENDED_INFO_COUNT","THREAD_EXTENDED_POLICY","THREAD_EXTENDED_POLICY_COUNT","THREAD_IDENTIFIER_INFO","THREAD_IDENTIFIER_INFO_COUNT","THREAD_LATENCY_QOS_POLICY","THREAD_LATENCY_QOS_POLICY_COUNT","THREAD_PRECEDENCE_POLICY","THREAD_PRECEDENCE_POLICY_COUNT","THREAD_STANDARD_POLICY","THREAD_STANDARD_POLICY_COUNT","THREAD_THROUGHPUT_QOS_POLICY","THREAD_THROUGHPUT_QOS_POLICY_COUNT","THREAD_TIME_CONSTRAINT_POLICY","THREAD_TIME_CONSTRAINT_POLICY_COUNT","TH_FLAGS_GLOBAL_FORCED_IDLE","TH_FLAGS_IDLE","TH_FLAGS_SWAPPED","TH_STATE_HALTED","TH_STATE_RUNNING","TH_STATE_STOPPED","TH_STATE_UNINTERRUPTIBLE","TH_STATE_WAITING","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAKE_TAG","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_PAGE_QUERY_PAGE_COPIED","VM_PAGE_QUERY_PAGE_CS_NX","VM_PAGE_QUERY_PAGE_CS_TAINTED","VM_PAGE_QUERY_PAGE_CS_VALIDATED","VM_PAGE_QUERY_PAGE_DIRTY","VM_PAGE_QUERY_PAGE_EXTERNAL","VM_PAGE_QUERY_PAGE_FICTITIOUS","VM_PAGE_QUERY_PAGE_PAGED_OUT","VM_PAGE_QUERY_PAGE_PRESENT","VM_PAGE_QUERY_PAGE_REF","VM_PAGE_QUERY_PAGE_SPECULATIVE","VM_PROT_EXECUTE","VM_PROT_NONE","VM_PROT_READ","VM_PROT_WRITE","VM_SWAPUSAGE","VOL_CAPABILITIES_FORMAT","VOL_CAPABILITIES_INTERFACES","VOL_CAP_FMT_2TB_FILESIZE","VOL_CAP_FMT_64BIT_OBJECT_IDS","VOL_CAP_FMT_CASE_PRESERVING","VOL_CAP_FMT_CASE_SENSITIVE","VOL_CAP_FMT_DECMPFS_COMPRESSION","VOL_CAP_FMT_DIR_HARDLINKS","VOL_CAP_FMT_DOCUMENT_ID","VOL_CAP_FMT_FAST_STATFS","VOL_CAP_FMT_HARDLINKS","VOL_CAP_FMT_HIDDEN_FILES","VOL_CAP_FMT_JOURNAL","VOL_CAP_FMT_JOURNAL_ACTIVE","VOL_CAP_FMT_NO_IMMUTABLE_FILES","VOL_CAP_FMT_NO_PERMISSIONS","VOL_CAP_FMT_NO_ROOT_TIMES","VOL_CAP_FMT_NO_VOLUME_SIZES","VOL_CAP_FMT_OPENDENYMODES","VOL_CAP_FMT_PATH_FROM_ID","VOL_CAP_FMT_PERSISTENTOBJECTIDS","VOL_CAP_FMT_SEALED","VOL_CAP_FMT_SHARED_SPACE","VOL_CAP_FMT_SPARSE_FILES","VOL_CAP_FMT_SYMBOLICLINKS","VOL_CAP_FMT_VOL_GROUPS","VOL_CAP_FMT_WRITE_GENERATION_COUNT","VOL_CAP_FMT_ZERO_RUNS","VOL_CAP_INT_ADVLOCK","VOL_CAP_INT_ALLOCATE","VOL_CAP_INT_ATTRLIST","VOL_CAP_INT_CLONE","VOL_CAP_INT_COPYFILE","VOL_CAP_INT_EXCHANGEDATA","VOL_CAP_INT_EXTENDED_ATTR","VOL_CAP_INT_EXTENDED_SECURITY","VOL_CAP_INT_FLOCK","VOL_CAP_INT_MANLOCK","VOL_CAP_INT_NAMEDSTREAMS","VOL_CAP_INT_NFSEXPORT","VOL_CAP_INT_READDIRATTR","VOL_CAP_INT_RENAME_EXCL","VOL_CAP_INT_RENAME_OPENFAIL","VOL_CAP_INT_RENAME_SWAP","VOL_CAP_INT_SEARCHFS","VOL_CAP_INT_SNAPSHOT","VOL_CAP_INT_USERACCESS","VOL_CAP_INT_VOL_RENAME","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_CS_DARWIN_USER_CACHE_DIR","_CS_DARWIN_USER_DIR","_CS_DARWIN_USER_TEMP_DIR","_CS_PATH","_IOFBF","_IOLBF","_IONBF","_NSGetEnviron","_NSGetExecutablePath","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__cpu","__cs","__darwin_mcontext64","__darwin_mmst_reg","__darwin_x86_exception_state64","__darwin_x86_float_state64","__darwin_x86_thread_state64","__darwin_xmm_reg","__err","__error","__es","__faultvaddr","__fpu_cs","__fpu_dp","__fpu_ds","__fpu_fop","__fpu_ftw","__fpu_ip","__fpu_mxcsr","__fpu_mxcsrmask","__fpu_reserved","__fpu_reserved1","__fpu_rsrv1","__fpu_rsrv2","__fpu_rsrv3","__fpu_stmm0","__fpu_stmm1","__fpu_stmm2","__fpu_stmm3","__fpu_stmm4","__fpu_stmm5","__fpu_stmm6","__fpu_stmm7","__fpu_xmm0","__fpu_xmm1","__fpu_xmm10","__fpu_xmm11","__fpu_xmm12","__fpu_xmm13","__fpu_xmm14","__fpu_xmm15","__fpu_xmm2","__fpu_xmm3","__fpu_xmm4","__fpu_xmm5","__fpu_xmm6","__fpu_xmm7","__fpu_xmm8","__fpu_xmm9","__fs","__fs","__gs","__mmst_reg","__mmst_rsrv","__r10","__r11","__r12","__r13","__r14","__r15","__r8","__r9","__rax","__rbp","__rbx","__rcx","__rdi","__rdx","__rflags","__rip","__rsi","__rsp","__ss","__trapno","__xmm_reg","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","active_count","active_count","address","addrinfo","adjtime","affinity_tag","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arc4random","arc4random_buf","arc4random_uniform","arphdr","array","atexit","atof","atoi","atol","atoll","attr_dataoffset","attr_length","attrgroup_t","attribute_set_t","attrlist","attrreference_t","backtrace","backtrace_async","backtrace_from_fp","backtrace_image_offsets","backtrace_symbols","backtrace_symbols_fd","basename","batch_free","batch_malloc","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","bitmapcount","blkcnt_t","blksize_t","blocks_in_use","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","bytes_free","bytes_total","bytes_used","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","calloc","capabilities","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","chunks_free","chunks_used","claimed_address","clearerr","clock_getres","clock_gettime","clock_settime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clonefile","clonefileat","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","commonattr","commonattr","compressions","compressor_page_count","computation","confstr","connect","connectx","constant","constraint","copyfile","copyfile_flags_t","copyfile_state_t","cow_faults","cow_faults","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_type","cpu_type_t","cpu_usage","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","decompressions","default_policy","denom","destroy","dev_t","difftime","dirattr","dirattr","dirent","dirfd","dirname","disconnectx","dispatch_qaddr","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","drand48","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","erand48","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execve","execvp","exit","ext","external_page_count","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_flags_ext","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","faults","faults","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclonefileat","fclose","fcntl","fcopyfile","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetattrlist","fgetc","fgetpos","fgets","fgetxattr","fileattr","fileattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flag","flags","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmount","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fopen","fork","forkattr","forkattr","forkpty","fpathconf","fpos_t","fprintf","fputc","fputs","frac_digits","fread","free","free","free_count","free_count","free_definite_size","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetattrlist","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","ftell","ftello","ftok","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getattrlist","getattrlistat","getattrlistbulk","getchar","getchar_unlocked","getcwd","getdomainname","getdtablesize","getegid","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","gethostuuid","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getopt_long","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","has_arg","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hdr_cnt","headers","hits","hits","host_flavor_t","host_info64_t","host_info_t","host_processor_info","host_statistics","host_statistics64","host_t","hostent","hstrerror","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_data64","if_freenameindex","if_index","if_indextoname","if_msghdr","if_msghdr2","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifi_addrlen","ifi_addrlen","ifi_baudrate","ifi_baudrate","ifi_collisions","ifi_collisions","ifi_hdrlen","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ibytes","ifi_ierrors","ifi_ierrors","ifi_imcasts","ifi_imcasts","ifi_ipackets","ifi_ipackets","ifi_iqdrops","ifi_iqdrops","ifi_lastchange","ifi_lastchange","ifi_metric","ifi_metric","ifi_mtu","ifi_mtu","ifi_noproto","ifi_noproto","ifi_obytes","ifi_obytes","ifi_oerrors","ifi_oerrors","ifi_omcasts","ifi_omcasts","ifi_opackets","ifi_opackets","ifi_physical","ifi_physical","ifi_recvquota","ifi_recvquota","ifi_recvtiming","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_type","ifi_typelen","ifi_typelen","ifi_unused1","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmitquota","ifi_xmittiming","ifi_xmittiming","ifm_addrs","ifm_addrs","ifm_data","ifm_data","ifm_flags","ifm_flags","ifm_index","ifm_index","ifm_msglen","ifm_msglen","ifm_snd_drops","ifm_snd_len","ifm_snd_maxlen","ifm_timer","ifm_type","ifm_type","ifm_version","ifm_version","image_offset","importance","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","inactive_count","inactive_count","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","internal_page_count","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","introspect","ioctl","iov_base","iov_len","iovec","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","jrand48","kCCAlignmentError","kCCBufferTooSmall","kCCCallSequenceError","kCCDecodeError","kCCInvalidKey","kCCKeySizeError","kCCMemoryFailure","kCCOverflow","kCCParamError","kCCRNGFailure","kCCSuccess","kCCUnimplemented","kCCUnspecifiedError","kern_return_t","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l2p_contigbytes","l2p_devoffset","l2p_flags","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lcong48","lconv","ledger_array_t","ledger_t","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","log2phys","login_tty","lookups","lookups","lrand48","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_header","mach_header_64","mach_host_self","mach_msg_type_number_t","mach_port_t","mach_task_basic_info","mach_task_basic_info_data_t","mach_task_basic_info_t","mach_task_self","mach_task_self_","mach_thread_self","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","mach_vm_address_t","mach_vm_map","mach_vm_offset_t","mach_vm_size_t","machine","madvise","magic","magic","major","makedev","malloc","malloc","malloc_default_zone","malloc_good_size","malloc_introspection_t","malloc_printf","malloc_size","malloc_statistics_t","malloc_zone_calloc","malloc_zone_check","malloc_zone_free","malloc_zone_from_ptr","malloc_zone_log","malloc_zone_malloc","malloc_zone_print","malloc_zone_print_ptr_info","malloc_zone_realloc","malloc_zone_statistics","malloc_zone_t","malloc_zone_valloc","max_align_t","max_size_in_use","maxerror","maxerror","maxprot","maxprot","mcontext_t","mem_entry_name_port_t","memalign","memchr","memcmp","memcpy","memmem","memmove","memory_object_offset_t","memory_object_t","memset","memset_pattern16","memset_pattern4","memset_pattern8","memset_s","microseconds","mincore","minor","mkdir","mkdirat","mkdtemp","mkfifo","mknod","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mrand48","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","mstats","mstats","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","name","nanosleep","nativeattr","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","no_data","nodename","nrand48","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","off_t","offset","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","option","os_log_create","os_log_t","os_log_type_enabled","os_log_type_t","os_signpost_enabled","os_signpost_id_generate","os_signpost_id_make_with_pointer","os_signpost_id_t","os_signpost_type_t","os_unfair_lock","os_unfair_lock_assert_not_owner","os_unfair_lock_assert_owner","os_unfair_lock_lock","os_unfair_lock_s","os_unfair_lock_t","os_unfair_lock_trylock","os_unfair_lock_unlock","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","pageins","pageins","pageouts","pageouts","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","period","perror","pid_t","pipe","policy","policy","policy_t","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getarchpref_np","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setarchpref_np","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","preemptible","pressure_relief","printf","priority","proc_bsdinfo","proc_kmsgbuf","proc_libversion","proc_listallpids","proc_listchildpids","proc_listpgrppids","proc_listpids","proc_name","proc_pid_rusage","proc_pidfdinfo","proc_pidfileportinfo","proc_pidinfo","proc_pidpath","proc_regionfilename","proc_set_csm","proc_set_no_smt","proc_setthread_csm","proc_setthread_no_smt","proc_taskallinfo","proc_taskinfo","proc_threadinfo","proc_vnodepathinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_cpu_usage","pth_curpri","pth_curpri","pth_flags","pth_flags","pth_maxpriority","pth_maxpriority","pth_name","pth_name","pth_policy","pth_policy","pth_priority","pth_priority","pth_run_state","pth_run_state","pth_sleep_time","pth_sleep_time","pth_system_time","pth_system_time","pth_user_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_get_qos_class_np","pthread_attr_getschedparam","pthread_attr_init","pthread_attr_set_qos_class_np","pthread_attr_setdetachstate","pthread_attr_setschedparam","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_cpu_number_np","pthread_create","pthread_create_from_mach_thread","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_qos_class_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_introspection_getspecific_np","pthread_introspection_hook_install","pthread_introspection_hook_t","pthread_introspection_setspecific_np","pthread_jit_write_callback_t","pthread_jit_write_freeze_callbacks_np","pthread_jit_write_protect_np","pthread_jit_write_protect_supported_np","pthread_jit_write_with_callback_np","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mach_thread_np","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_set_qos_class_self_np","pthread_setname_np","pthread_setschedparam","pthread_setspecific","pthread_sigmask","pthread_t","pthread_threadid_np","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","purgeable_count","purgeable_count","purges","purges","putchar","putchar_unlocked","putenv","puts","pututxline","pvi_cdir","pvi_rdir","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qos_class_t","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","reactivations","reactivations","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","reserved","resident_size","resident_size_max","revents","rewind","rewinddir","rfu_1","ri_billed_energy","ri_billed_system_time","ri_billed_system_time","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_cpu_time_qos_background","ri_cpu_time_qos_background","ri_cpu_time_qos_default","ri_cpu_time_qos_default","ri_cpu_time_qos_legacy","ri_cpu_time_qos_legacy","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_utility","ri_cpu_time_qos_utility","ri_cycles","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_instructions","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interval_max_phys_footprint","ri_lifetime_max_phys_footprint","ri_logical_writes","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_runnable_time","ri_serviced_energy","ri_serviced_system_time","ri_serviced_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","run_state","running","rusage","rusage_info_t","rusage_info_v0","rusage_info_v1","rusage_info_v2","rusage_info_v3","rusage_info_v4","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_get_priority_max","sched_get_priority_min","sched_param","sched_priority","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seconds","seed48","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setattrlist","setattrlistat","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostid","sethostname","setitimer","setlocale","setlogmask","setpgid","setpriority","setprogname","setpwent","setregid","setreuid","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size","size","size_allocated","size_in_use","size_t","sizeofcmds","sizeofcmds","sleep","sleep_time","slot_num","snd_family","snd_len","snd_name","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_ndrv","sockaddr_storage","sockaddr_un","socket","socketpair","socklen_t","speculative_count","speculative_count","speed_t","sprintf","srand","srand48","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtonum","strtoul","strtoull","strxfrm","sun_family","sun_len","sun_path","suseconds_t","suspend_count","suspend_count","swapins","swapouts","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","sysdir_get_next_search_path_enumeration","sysdir_search_path_directory_t","sysdir_search_path_domain_mask_t","sysdir_search_path_enumeration_state","sysdir_start_search_path_enumeration","syslog","sysname","system","system_time","system_time","system_time","tai","task_count","task_create","task_flavor_t","task_for_pid","task_info","task_info_t","task_inspect_t","task_set_info","task_t","task_terminate","task_thread_times_info","task_thread_times_info_data_t","task_thread_times_info_t","task_threads","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_act_array_t","thread_act_t","thread_affinity_policy","thread_affinity_policy_data_t","thread_affinity_policy_t","thread_background_policy","thread_background_policy_data_t","thread_background_policy_t","thread_basic_info","thread_basic_info_data_t","thread_basic_info_t","thread_count","thread_extended_info","thread_extended_info_data_t","thread_extended_info_t","thread_extended_policy","thread_extended_policy_data_t","thread_extended_policy_t","thread_flavor_t","thread_handle","thread_id","thread_identifier_info","thread_identifier_info_data_t","thread_identifier_info_t","thread_info","thread_info_t","thread_inspect_t","thread_latency_qos_policy","thread_latency_qos_policy_data_t","thread_latency_qos_policy_t","thread_latency_qos_t","thread_latency_qos_tier","thread_policy_flavor_t","thread_policy_get","thread_policy_set","thread_policy_t","thread_precedence_policy","thread_precedence_policy_data_t","thread_precedence_policy_t","thread_standard_policy","thread_standard_policy_data_t","thread_standard_policy_t","thread_t","thread_throughput_qos_policy","thread_throughput_qos_policy_data_t","thread_throughput_qos_policy_t","thread_throughput_qos_t","thread_throughput_qos_tier","thread_time_constraint_policy","thread_time_constraint_policy_data_t","thread_time_constraint_policy_t","throttled_count","time","time","time_state","time_t","time_value_t","timegm","times","timeshare","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","total_uncompressed_pages_in_compressor","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","user_time","user_time","user_time","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","uuid","uuid_t","val","val","valid","validattr","valloc","version","version","vi_fsid","vi_pad","vi_stat","vi_type","vinfo_stat","vip_path","vip_vi","virtual_size","vm_address_t","vm_deallocate","vm_inherit_t","vm_map_t","vm_offset_t","vm_page_size","vm_prot_t","vm_range_t","vm_size_t","vm_statistics","vm_statistics64","vm_statistics64_data_t","vm_statistics64_t","vm_statistics_data_t","vm_statistics_t","vmaddr","vmaddr","vmsize","vmsize","vnode_info","vnode_info_path","vol_attributes_attr_t","vol_capabilities_attr_t","vol_capabilities_set_t","volattr","volattr","vst_atime","vst_atimensec","vst_birthtime","vst_birthtimensec","vst_blksize","vst_blocks","vst_ctime","vst_ctimensec","vst_dev","vst_flags","vst_gen","vst_gid","vst_ino","vst_mode","vst_mtime","vst_mtimensec","vst_nlink","vst_qspare","vst_rdev","vst_size","vst_uid","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wire_count","wire_count","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred","zero_fill_count","zero_fill_count","zone_name"],"q":["libcddata includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/writehird Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggersae_associd_t)(-1ULL))","","((sae_connid_t)(-1ULL))","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable/Disable TCP Fastopen on this socketquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Notesalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,1],[4,4],[[3,1],1],[4,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,6]],[[5,6],7],[[5,6]],0,[6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,5],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,7],0,[5,5],[5,7],[5,7],[5,7],[5,7],0,0,0,[5,5],[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[6,6],[34,34],[3,3],[1,1],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,11],7],[[12,12],7],[[13,13],7],[[14,14],7],[[15,15],7],[[16,16],7],[[17,17],7],[[18,18],7],[[19,19],7],[[20,20],7],[[21,21],7],[[22,22],7],[[23,23],7],[[24,24],7],[[25,25],7],[[26,26],7],[[27,27],7],[[30,30],7],[[31,31],7],[[32,32],7],[[33,33],7],[[6,6],7],[[34,34],7],[[3,3],7],[[1,1],7],[[35,35],7],[[36,36],7],[[37,37],7],[[38,38],7],[[39,39],7],[[40,40],7],[[41,41],7],[[166,166],7],[[46,46],7],[[47,47],7],[[48,48],7],[[49,49],7],[[50,50],7],[[51,51],7],[[52,52],7],[[53,53],7],[[54,54],7],[[55,55],7],[[56,56],7],[[57,57],7],[[58,58],7],[[59,59],7],[[60,60],7],[[61,61],7],[[62,62],7],[[63,63],7],[[64,64],7],[[65,65],7],[[66,66],7],[[67,67],7],[[68,68],7],[[69,69],7],[[70,70],7],[[71,71],7],[[72,72],7],[[73,73],7],[[74,74],7],[[75,75],7],[[76,76],7],[[77,77],7],[[78,78],7],[[79,79],7],[[80,80],7],[[81,81],7],[[82,82],7],[[83,83],7],[[84,84],7],[[85,85],7],[[86,86],7],[[87,87],7],[[88,88],7],[[89,89],7],[[90,90],7],[[91,91],7],[[92,92],7],[[93,93],7],[[94,94],7],[[95,95],7],[[96,96],7],[[97,97],7],[[98,98],7],[[99,99],7],[[100,100],7],[[101,101],7],[[102,102],7],[[103,103],7],[[104,104],7],[[105,105],7],[[106,106],7],[[107,107],7],[[108,108],7],[[109,109],7],[[110,110],7],[[111,111],7],[[112,112],7],[[113,113],7],[[114,114],7],[[115,115],7],[[116,116],7],[[117,117],7],[[118,118],7],[[119,119],7],[[120,120],7],[[121,121],7],[[122,122],7],[[123,123],7],[[124,124],7],[[125,125],7],[[126,126],7],[[127,127],7],[[128,128],7],[[129,129],7],[[130,130],7],[[131,131],7],[[132,132],7],[[133,133],7],[[134,134],7],[[135,135],7],[[136,136],7],[[137,137],7],[[138,138],7],[[139,139],7],[[140,140],7],[[141,141],7],[[142,142],7],[[143,143],7],[[144,144],7],[[145,145],7],[[146,146],7],[[147,147],7],[[148,148],7],[[150,150],7],[[151,151],7],[[152,152],7],[[153,153],7],[[154,154],7],[[155,155],7],[[156,156],7],[[157,157],7],[[158,158],7],[[159,159],7],[[160,160],7],[[161,161],7],[[162,162],7],[[163,163],7],[[165,165],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[10,167],168],[[11,167],168],[[12,167],168],[[13,167],168],[[14,167],168],[[15,167],168],[[16,167],168],[[17,167],168],[[18,167],168],[[19,167],168],[[20,167],168],[[21,167],168],[[22,167],168],[[23,167],168],[[24,167],168],[[25,167],168],[[26,167],168],[[27,167],168],[[28,167],168],[[29,167],168],[[30,167],168],[[31,167],168],[[32,167],168],[[33,167],168],[[6,167],168],[[34,167],168],[[3,167],168],[[1,167],168],[[35,167],168],[[36,167],168],[[37,167],168],[[38,167],168],[[39,167],168],[[40,167],168],[[41,167],168],[[166,167],168],[[42,167],168],[[43,167],168],[[44,167],168],[[45,167],168],[[46,167],168],[[47,167],168],[[48,167],168],[[49,167],168],[[50,167],168],[[51,167],168],[[52,167],168],[[53,167],168],[[54,167],168],[[55,167],168],[[56,167],168],[[57,167],168],[[58,167],168],[[59,167],168],[[60,167],168],[[61,167],168],[[62,167],168],[[63,167],168],[[64,167],168],[[65,167],168],[[66,167],168],[[67,167],168],[[68,167],168],[[69,167],168],[[70,167],168],[[71,167],168],[[72,167],168],[[73,167],168],[[74,167],168],[[75,167],168],[[76,167],168],[[77,167],168],[[78,167],168],[[79,167],168],[[80,167],168],[[81,167],168],[[82,167],168],[[83,167],168],[[84,167],168],[[85,167],168],[[86,167],168],[[87,167],168],[[88,167],168],[[89,167],168],[[90,167],168],[[91,167],168],[[92,167],168],[[93,167],168],[[94,167],168],[[95,167],168],[[96,167],168],[[97,167],168],[[98,167],168],[[99,167],168],[[100,167],168],[[101,167],168],[[102,167],168],[[103,167],168],[[104,167],168],[[105,167],168],[[106,167],168],[[107,167],168],[[108,167],168],[[109,167],168],[[110,167],168],[[111,167],168],[[112,167],168],[[113,167],168],[[114,167],168],[[115,167],168],[[116,167],168],[[117,167],168],[[118,167],168],[[119,167],168],[[120,167],168],[[121,167],168],[[122,167],168],[[123,167],168],[[124,167],168],[[125,167],168],[[126,167],168],[[127,167],168],[[128,167],168],[[129,167],168],[[130,167],168],[[131,167],168],[[132,167],168],[[133,167],168],[[134,167],168],[[169,167],[[171,[170]]]],[[135,167],168],[[136,167],168],[[137,167],168],[[138,167],168],[[139,167],168],[[140,167],168],[[141,167],168],[[142,167],168],[[143,167],168],[[144,167],168],[[145,167],168],[[146,167],168],[[147,167],168],[[148,167],168],[[150,167],168],[[151,167],168],[[152,167],168],[[153,167],168],[[154,167],168],[[155,167],168],[[156,167],168],[[157,167],168],[[158,167],168],[[159,167],168],[[160,167],168],[[161,167],168],[[162,167],168],[[163,167],168],[[165,167],168],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[30],[31],[32],[33],[6],[34],[3],[1],[35],[36],[37],[38],[39],[40],[41],[166],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100],[101],[102],[103],[104],[105],[106],[107],[108],[109],[110],[111],[112],[113],[114],[115],[116],[117],[118],[119],[120],[121],[122],[123],[124],[125],[126],[127],[128],[129],[130],[131],[132],[133],[134],[135],[136],[137],[138],[139],[140],[141],[142],[143],[144],[145],[146],[147],[148],[150],[151],[152],[153],[154],[155],[156],[157],[158],[159],[160],[161],[162],[163],[165],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],172],0,0,0,0,0,0,0,0,0,0,0,0,0,[173,174],[[174,174],173],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[173,174],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[57,169],0,0,0,[57,175],0,0,[57,5],0,[57,176],0,[57,23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],[[],171],0,0,0,0,0,0,0,0,[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],[[],177],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[3,"fd_set"],[15,"bool"],[15,"u8"],[15,"u32"],[4,"DIR"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[4,"FILE"],[4,"fpos_t"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"fsid_t"],[3,"if_nameindex"],[3,"regex_t"],[3,"regmatch_t"],[3,"option"],[3,"sockaddr_un"],[3,"utsname"],[4,"timezone"],[4,"qos_class_t"],[4,"sysdir_search_path_directory_t"],[4,"sysdir_search_path_domain_mask_t"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"aiocb"],[3,"glob_t"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"sembuf"],[3,"arphdr"],[3,"in_addr"],[3,"sockaddr_ndrv"],[3,"sa_endpoints_t"],[3,"timex"],[3,"ntptimeval"],[3,"thread_standard_policy"],[3,"thread_extended_policy"],[3,"thread_time_constraint_policy"],[3,"thread_precedence_policy"],[3,"thread_affinity_policy"],[3,"thread_background_policy"],[3,"thread_latency_qos_policy"],[3,"thread_throughput_qos_policy"],[3,"malloc_statistics_t"],[3,"mstats"],[3,"vm_range_t"],[3,"sched_param"],[3,"vinfo_stat"],[3,"vnode_info"],[3,"vnode_info_path"],[3,"proc_vnodepathinfo"],[3,"vm_statistics"],[3,"task_thread_times_info"],[3,"rusage_info_v0"],[3,"rusage_info_v1"],[3,"rusage_info_v2"],[3,"rusage_info_v3"],[3,"rusage_info_v4"],[3,"image_offset"],[3,"attrlist"],[3,"attrreference_t"],[3,"vol_capabilities_attr_t"],[3,"attribute_set_t"],[3,"vol_attributes_attr_t"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"sigevent"],[3,"processor_cpu_load_info"],[3,"processor_basic_info"],[3,"processor_set_basic_info"],[3,"processor_set_load_info"],[3,"time_value_t"],[3,"thread_basic_info"],[3,"thread_identifier_info"],[3,"thread_extended_info"],[3,"if_data64"],[3,"if_msghdr2"],[3,"vm_statistics64"],[3,"mach_task_basic_info"],[3,"log2phys"],[3,"os_unfair_lock_s"],[19,"semun"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"ucontext_t"],[3,"__darwin_mcontext64"],[3,"__darwin_x86_exception_state64"],[3,"__darwin_x86_thread_state64"],[3,"__darwin_x86_float_state64"],[3,"__darwin_mmst_reg"],[3,"__darwin_xmm_reg"],[3,"malloc_introspection_t"],[3,"malloc_zone_t"],[3,"max_align_t"],[3,"in6_addr"],[6,"os_unfair_lock"],[3,"Formatter"],[6,"Result"],[4,"c_void"],[3,"Error"],[4,"Result"],[6,"mach_port_t"],[6,"dev_t"],[15,"i32"],[6,"pid_t"],[6,"uid_t"],[3,"TypeId"]],"a":{"__errno_location":[2357],"errno":[2357]}},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,19,4,4,6,6,8,7,11,0,1,3,1,3,19,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,4,6,6,4,4,6,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,4,4,6,6,1,3,8,7,1,3,19,0,0,0,4,4,6,6,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[8,10],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[4],[6],[8],[7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[18]]]],[[3,[12,[18]]],3],[1],0,0,[[],19],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[19,[[16,[15]]]],[19,[[16,[15]]]],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"nut":{"doc":"This is NUT!!! 🤣","t":[13,13,13,13,13,13,13,4,3,8,8,8,13,4,4,3,3,17,8,8,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,0,0,14,14,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,14,14,14,14,14,11,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,12,11,11,11,11,11,11,12,14,12,11,11,11,12,12,12,12,12,12,0,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,2,2,2,2,2,2,3,8,2,2,3,8,2,2,3,2,8,8,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,2,11,2,2,11,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,11,12,11,11,11,0,10,10,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,5,5,5,5,5,5,5,5,5,5,5,5,3,13,4,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,2,0,2,0,2,5,5,5,3,3,13,13,17,4,3,13,13,17,3,3,3,4,13,17,13,17,17,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,2,2,2,11,11,2,2,2,2,12,12,12,12,12,12,11,11,11,11,11,11,11,12,12,2,11,12,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,17,17,13,13,13,3,13,3,3,3,13,13,4,13,4,13,13,13,3,13,13,3,13,8,3,13,3,13,3,4,4,3,13,3,13,3,13,4,17,13,13,8,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,2,2,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Associative","Associative","Binary","Binary","Isa","Isa","Object","ObjectType","Object_v0","ReadCuckooModel","ReadSchema_v0","ReadSchema_v1","Relationship","Relationship_V1","Relationship_v0","Schema_v0","Schema_v1","UUID_NS_v0","WriteSchema_v0","WriteSchema_v1","add_attribute","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","codegen","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","drawing","emit","emitln","eq","eq","eq","eq","extract_ooa2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_json","from_json","from_json","function","get_a_across_r1","get_a_across_r10","get_a_across_r2","get_a_across_r3","get_a_across_r4","get_a_across_r5","get_a_across_r7","get_a_across_r8","get_a_across_r9","get_bui_across_r12","get_bui_across_r7","get_bui_across_r8","get_card_across_r8","get_card_across_r9","get_cond_across_r11","get_cond_across_r12","get_e_across_r14","get_e_across_r19","get_e_across_r20","get_e_across_r3","get_id","get_id","get_iui_across_r10","get_iui_across_r11","get_iui_across_r9","get_many_anch_across_r10","get_many_edg_across_r14","get_number","get_number","get_obj_across_r1","get_obj_across_r14","get_obj_across_r15","get_obj_across_r16","get_obj_across_r17","get_obj_across_r18","get_obj_across_r19","get_one_anch_across_r7","get_one_anch_across_r8","get_one_anch_across_r9","get_one_pnt_across_r13","get_one_pnt_across_r4","get_one_pnt_across_r5","get_one_r_bin_across_r12","get_oui_across_r1","get_oui_across_r13","get_oui_across_r14","get_p_across_r13","get_p_across_r4","get_p_across_r5","get_r_bin_across_r12","get_r_bin_across_r5","get_r_bin_across_r6","get_r_from_across_r11","get_r_from_across_r17","get_r_from_across_r6","get_r_from_across_r9","get_r_isa_across_r11","get_r_sub_across_r15","get_r_sup_across_r14","get_r_to_across_r12","get_r_to_across_r16","get_r_to_across_r5","get_r_to_across_r8","get_referent","get_referrer","get_s_across_r18","get_s_across_r20","get_subtypes","get_supertype","get_t_across_r2","id","into","into","into","into","into","into","key_letter","maybe_get_one_edg_across_r3","name","new","new_binary","new_isa","obj","objects","objects_","rel","relationships","relationships_","sarzak","serialize","serialize","serialize","serialize","serialize","serialize","to_json","to_json","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","version","version","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","Attr","CachingContext","Config","ConfigValue","Context","DRAWING_UUID_NS","DrawingObjectStore","Extrude","Field","ImportedObject","JSFormat","ReadModel","Ref","SarzakModel","SarzakObjectStore","SingletonObject","WriteModel","WriteObjectStore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","context","deserialize","deserialize","deserialize","emit","emit_binary_main","emit_doc_string","emit_enum_main","emit_generated_code_comments","emit_many_unconditional","emit_many_unconditional_lookup","emit_one_conditional","emit_one_conditional_lookup","emit_one_unconditional","emit_one_unconditional_lookup","emit_singleton","emit_struct_main","emitln","exhume_anchor","exhume_any_edge","exhume_attribute","exhume_binary","exhume_binary_key","exhume_binaryui","exhume_edge","exhume_isa","exhume_isa_key","exhume_isaui","exhume_object","exhume_object_key","exhume_objectui","exhume_point","exhume_referent","exhume_referrer","exhume_relationship","exhume_relationship_ui","exhume_subtype","exhume_supertype","extrude","fmt","fmt","fmt","from","from","from","from","from","from_json","function","get_obj","get_referent","get_referrer","get_rel","get_subtypes","get_supertype","inter_anchor","inter_attribute","inter_binary","inter_binary_key","inter_binaryui","inter_edge","inter_isa","inter_isa_key","inter_isaui","inter_object","inter_object_key","inter_objectui","inter_point","inter_referent","inter_referrer","inter_rel","inter_relationship","inter_relationship_ui","inter_subtype","inter_supertype","into","into","into","iter_anchor","iter_binary","iter_binaryui","iter_object","iter_objectui","iter_relationship","iter_supertype","macros","new","new","object_ui_len","objects","objects","paper","relationships","relationships","serialize","serialize","serialize","template","to_json","to_json","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","vzip","vzip","vzip","0","Config","ConfigValue","ImportedObject","SingletonObject","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","domain","fmt","fmt","fmt","fmt","from","from","from","from","get","get_imported","get_imported_objects","get_singleton","get_singleton_objects","imported_object","insert","into","into","into","into","is_imported","is_singleton","model_path","new","new","package","serialize","serialize","serialize","serialize","singleton_object","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CachingContext","Context","add_assign","add_assign","borrow","borrow","borrow_mut","borrow_mut","commit","commit","decrease_indent","decrease_indent","deref","from","from","from","increase_indent","increase_indent","into","into","new","new","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","write","writeln","writeln","emit_generated_code_comments","macros","types","emit_binary_main","emit_many_unconditional","emit_many_unconditional_lookup","emit_one_conditional","emit_one_conditional_lookup","emit_one_unconditional","emit_one_unconditional_lookup","emit_doc_string","emit_enum_main","emit_enum_main_impl","emit_singleton","emit_struct_main","Attr","Attribute","Field","Ref","Reference","attribute","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cmp","cmp","cmp","eq","eq","eq","from","from","from","into","into","into","object","optional","param_str","partial_cmp","partial_cmp","partial_cmp","ref_attr","render","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","generate_macros","generate_macros","generate_store","generate_store","generate_types","generate_types","generate_macros","generate_store","generate_types","Anchor","BinaryUI","BinaryUI","Bottom","Bottom","Edge","IsaUI","IsaUI","Left","Left","ObjectStore","ObjectUI","Point","RelationshipUI","Right","Right","Top","Top","UUID_NS","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","edge","edges","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_a_across_r3","get_bui_across_r7","get_bui_across_r8","get_id","get_id","get_many_edg_across_r14","get_oui_across_r1","get_p_across_r13","get_r_bin_across_r12","height","id","id","id","id","id","into","into","into","into","into","into","into","isa","location","maybe_get_one_edg_across_r3","new","object","offset","origin","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","width","x","y","0","0","0","0","0","0","AS_IDENT","AS_TYPE","AssocFrom","AssocOne","AssocOther","Associative","Associative","Attribute","AttributeName","Binary","Binary","Boolean","Cardinality","Conditional","Conditionality","Float","ForeignKey","Integer","Isa","Isa","Many","Object","One","ReadSarzakModel","Referent","Referent","Referrer","Referrer","RelPointer","RelSide","Relationship","SarzakModel","String","Subtype","Subtype","Supertype","Supertype","Type","UUID_NS","Unconditional","Uuid","WriteSarzakModel","as_bytes","attr_t","attributes","binary_id","binary_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cardinality","cardinality","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","conditionality","conditionality","config","default","default","description","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","drawing","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_json","get_id","get_number","get_obj_across_r17","get_r_from_across_r6","id","id","id","id","id","id","id","id","id","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_referrer","isa_id","isa_id","key_letter","load_cuckoo_model","name","name","new","new","new","new","number","number","number","obj_id","obj_id","obj_id","obj_id","one","other","partial_cmp","partial_cmp","partial_cmp","partial_cmp","referential_attribute","rels","render","render","render","sarzak","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","side","subtypes","supertype","to","to_json","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0"],"q":["nutnut::ObjectType","","nut::Relationship_V1","","","nut::Relationship_v0","","","nut::codegen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nut::codegen::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nut::codegen::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nut::codegen::template","","","nut::codegen::template::macros","","","","","","","nut::codegen::template::types","","","","","nut::codegen::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nut::codegen::types::Field","","nut::domain","","","","","","nut::domain::generate_macros","nut::domain::generate_store","nut::domain::generate_types","nut::drawing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nut::drawing::Edge","","","","nut::drawing::RelationshipUI","","nut::sarzaknut::sarzak::Relationship","","","nut::sarzak::Type"],"d":["","","","","","","","“Type erase” our objects","In general an object is a memory representation of a set …","Read the Cuckoo","","","","An association between two or more objects","","ooa_0 Schema","OOA_1 Schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","Code Generation Doings","","","","","","","","","The Drawing Domain","Emit a String <em>without</em> a line break added","Emit a String with a line break added","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","This macro prints the name of the function in which it’s …","Macro to traverse Object ➡ Attribute, via R1","Macro to traverse IsaUI ➡ Anchor, via R10","Macro to traverse Type ➡ Attribute, via R2","Macro to traverse Edge ➡ Anchor, via R3","Macro to traverse Point ➡ Anchor, via R4","Macro to traverse Point ➡ Anchor, via R5","Macro to traverse BinaryUI ➡ Anchor, via R7","Macro to traverse BinaryUI ➡ Anchor, via R8","Macro to traverse IsaUI ➡ Anchor, via R9","Macro to traverse Binary ➡ BinaryUI, via R12","Macro to traverse Anchor ➡ BinaryUI, via R7","Macro to traverse Anchor ➡ BinaryUI, via R8","Macro to traverse Referent ➡ Cardinality, via R8","Macro to traverse Referrer ➡ Cardinality, via R9","Macro to traverse Referrer ➡ Conditionality, via R11","Macro to traverse Referent ➡ Conditionality, via R12","Macro to traverse ObjectUI ➡ Edge, via R14","Macro to traverse Object ➡ Event, via R19","Macro to traverse State ➡ Event, via R20","Macro to traverse Anchor ➡ Edge, via R3","","","Macro to traverse Anchor ➡ IsaUI, via R10","Macro to traverse Isa ➡ IsaUI, via R11","Macro to traverse Anchor ➡ IsaUI, via R9","❌ Macro to traverse IsaUI ➡ Anchor, via R10","❌ Macro to traverse ObjectUI ➡ Edge, via R14","","","Macro to traverse Attribute ➡ Object, via R1","Macro to traverse Supertype ➡ Object, via R14","Macro to traverse Subtype ➡ Object, via R15","Macro to traverse Referent ➡ Object, via R16","Macro to traverse Referrer ➡ Object, via R17","Macro to traverse State ➡ Object, via R18","Macro to traverse Event ➡ Object, via R19","Macro to traverse BinaryUI ➡ Anchor, via R7","Macro to traverse BinaryUI ➡ Anchor, via R8","Macro to traverse IsaUI ➡ Anchor, via R9","Macro to traverse ObjectUI ➡ Point, via R13","Macro to traverse Anchor ➡ Point, via R4","Macro to traverse Anchor ➡ Point, via R5","Macro to traverse BinaryUI ➡ Binary, via R12","Macro to traverse Object ➡ ObjectUI, via R1","Macro to traverse Point ➡ ObjectUI, via R13","Macro to traverse Edge ➡ ObjectUI, via R14","Macro to traverse ObjectUI ➡ Point, via R13","Macro to traverse Anchor ➡ Point, via R4","Macro to traverse Anchor ➡ Point, via R5","Macro to traverse BinaryUI ➡ Binary, via R12","Macro to traverse Referent ➡ Binary, via R5","Macro to traverse Referrer ➡ Binary, via R6","Macro to traverse Conditionality ➡ Referrer, via R11","Macro to traverse Object ➡ Referrer, via R17","Macro to traverse Binary ➡ Referrer, via R6","Macro to traverse Cardinality ➡ Referrer, via R9","Macro to traverse IsaUI ➡ Isa, via R11","Macro to traverse Object ➡ Subtype, via R15","Macro to traverse Object ➡ Supertype, via R14","Macro to traverse Conditionality ➡ Referent, via R12","Macro to traverse Object ➡ Referent, via R16","Macro to traverse Binary ➡ Referent, via R5","Macro to traverse Cardinality ➡ Referent, via R8","Macro to get the Referent side of a Binary relationship","Macro to get the Referrer side of a Binary relationship","Macro to traverse Object ➡ State, via R18","Macro to traverse Event ➡ State, via R20","Macro to get the Supertype from an Isa relationship","Macro to get the Supertype from an Isa relationship","Macro to traverse Attribute ➡ Type, via R2","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Macro to traverse Anchor ➡ Edge, via R3(c)","","","","","","","","","","","Sarzak OOA of OOA","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extrude a new type","","","","Read a Cuckoo Model file","","","","","","","","","","","","","","","","","Code Generation Configuration","Context for Extrusion","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Inter a Relationship","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Macros to make code generation nicer. 😉","","","","","","","","","","","","","","","","","","","","","","","","","","Things that will help when generating types","","","","","","The Main Configuration","An Imported Object","A Singleton Object","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Context for writing output","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Template for the main body of a generated macro","Template for generating an inner macro body","Template for generating an inner macro body","Template for generating inner macro body","Template for generating a traversal across a 1(c)-1 …","","Template for generating a traversal across a 1-1 …","Generate struct/enum Documentation","Generate Enum","Generate Enum Implementations","Generate a singleton object","","","","I called it Parameter…","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Generate macros for drawing domain","","Generate ObjectStore for some domain","","Generate Domain Types","","","","","An anchor, or anchor point, is the location where an arrow …","This represents additional information necessary to render …","<code>BinaryUI(BinaryUI)</code>,","<code>Bottom(Bottom)</code>,","The bottom of a rendered box","An attachment point for an Anchor","This represents additional data necessary to render an <code>Isa</code> …","<code>IsaUI(IsaUI)</code>,","<code>Left(Left)</code>,","The left side of a rendered box","","Render a rectangle","A point is a two-tuple that represents a location on the …","Additional information necessary to render relationships …","<code>Right(Right)</code>,","The right side of a rendered box","<code>Top(Top)</code>,","The top edge of the rendered box","","[<code>nut::sarzak::Binary</code>]","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pub edge: <code>Edge</code>,","pub edges: <code>Vec&lt;Edge&gt;</code>,","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","pub from: <code>Anchor</code>,","pub from: <code>Anchor</code>,","","","","","","","","","","","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","[<code>nut::sarzak::Isa</code>]","pub location: <code>Point</code>,","","","[<code>nut::sarzak::Object</code>]","pub offset: <code>Point</code>,","pub origin: <code>Point</code>,","","","","","","","","pub to: <code>Anchor</code>,","pub to: <code>Vec&lt;Anchor&gt;</code>,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AttributeName NewType","A relationship between two objects","","","","","","","","","","","","The mighty Object","","","","","","","A struct to store a pointer and type","An enum to disambiguate relationship type","An association between two or more objects","A model from the tool","","","","This is a brand new class and has no From impl.","","","","","","","","","These are the Attributes that belong to the <code>Object</code>. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This formalizes the Isa relationship.","This formalizes the Isa relationship.","","","","","","","","","","","","","","This is the Object to which the relationship points.","This is the Object to which the relationship points.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Model Serialization Version Number","","","","","","","","","","","","","","","","","","","","",""],"i":[3,5,3,5,3,5,8,0,0,0,0,0,8,0,0,0,0,0,0,0,1,1,1,3,8,4,5,6,1,3,8,4,5,6,1,3,4,5,6,1,3,4,5,6,0,1,1,3,8,4,5,6,0,0,0,0,1,3,4,5,0,1,3,8,4,5,6,1,3,8,4,4,5,5,6,6,63,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,0,0,0,0,0,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,8,4,5,6,1,0,1,1,3,3,6,4,6,6,4,6,0,1,3,8,4,5,6,66,67,1,3,4,5,6,1,3,8,4,5,6,1,3,8,4,5,6,1,3,8,4,5,6,4,6,1,3,8,4,5,6,68,69,70,71,72,73,74,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,10,11,24,10,11,24,11,24,11,0,0,24,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,11,11,24,24,24,11,24,24,11,24,24,24,11,11,11,24,11,11,76,24,10,11,24,24,10,11,11,77,0,11,0,0,11,0,0,24,11,11,24,24,24,11,24,24,11,24,24,24,11,11,11,11,24,11,11,24,10,11,24,11,24,11,24,11,11,0,24,11,24,11,10,10,11,10,24,10,11,0,78,79,24,11,24,10,11,24,10,11,24,10,11,0,24,10,11,48,0,0,0,0,45,46,47,48,45,46,47,48,45,46,47,48,45,46,47,48,45,46,47,48,47,45,46,47,48,45,46,47,48,45,45,45,45,45,46,45,45,46,47,48,45,45,47,45,46,47,45,46,47,48,46,45,46,47,48,45,46,47,48,45,46,47,48,45,46,47,48,45,46,47,48,0,0,49,50,49,50,49,50,49,50,49,50,50,49,49,50,49,50,49,50,49,50,49,49,50,49,50,49,50,49,50,49,50,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,53,56,53,55,56,53,55,56,53,55,56,53,55,56,53,55,56,53,55,56,55,55,56,53,55,56,55,53,53,55,56,53,55,56,53,55,56,53,55,56,80,81,0,0,0,0,0,0,0,0,0,0,0,38,29,0,0,0,38,29,0,0,0,0,0,29,0,29,0,0,28,28,31,33,38,34,25,29,28,31,33,38,34,25,29,28,31,33,38,34,25,29,28,31,33,38,34,25,29,28,31,33,38,34,25,29,25,33,28,31,33,38,34,25,29,28,31,33,38,34,25,29,28,31,0,0,0,38,29,0,0,0,0,33,28,31,33,34,25,28,31,33,38,34,25,29,31,25,0,34,33,25,33,28,31,33,38,34,25,29,28,31,28,31,33,38,34,25,29,28,31,33,38,34,25,29,28,31,33,38,34,25,29,28,31,33,38,34,25,29,28,31,33,38,34,25,29,33,34,34,82,83,84,85,86,87,0,0,61,61,61,0,37,0,0,0,37,59,0,22,0,59,59,59,0,37,21,0,21,0,0,61,0,61,0,0,0,0,59,0,61,0,61,0,0,22,59,0,58,2,32,36,35,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,36,35,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,58,2,32,37,36,35,52,58,32,36,35,32,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,52,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,58,58,2,59,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,60,27,88,37,37,0,0,2,60,36,35,40,39,32,27,30,58,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,32,40,39,32,52,2,32,58,2,40,39,60,27,30,36,35,40,39,60,60,58,2,32,37,36,32,58,2,32,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,62,30,30,27,89,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,58,59,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,62,52,58,2,59,60,21,22,61,62,36,35,40,39,32,37,27,30,52,90,91,92,93],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[7,[1]]]],[[],[[7,[3]]]],[[],[[7,[8]]]],[[],[[7,[4]]]],[[],[[7,[5]]]],[[],[[7,[6]]]],0,0,0,0,[[1,1],9],[[3,3],9],[[4,4],9],[[5,5],9],[10,11],[[1,12],13],[[3,12],13],[[8,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[]],[[]],[[]],[[]],[[[16,[14,[15,[8]]]]],4],[3,5],[[]],[[]],[4,6],[[],[[17,[[16,[14,[15,[8]]]]]]]],[[],[[17,[4]]]],[[],[[17,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,18],[5,18],0,0,0,0,0,[3,19],[5,19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[20,20],1],[[19,18,21,22,20,20,18,21,22,20],3],[[19,18,[15,[18]]],3],0,0,0,0,0,0,0,[1,7],[3,7],[8,7],[4,7],[5,7],[6,7],[4,17],[6,17],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[11,11],[[]],[[]],0,0,[[],[[7,[24]]]],[[],[[7,[10]]]],[[],[[7,[11]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[24,18],[[26,[25]]]],[24,26],[[11,18],[[26,[2]]]],[[11,18],[[26,[27]]]],[[24,18],[[26,[18]]]],[[24,18],[[26,[28]]]],[[24,18],[[26,[29]]]],[[11,18],[[26,[30]]]],[[24,18],[[26,[18]]]],[[24,18],[[26,[31]]]],[[11,18],[[26,[32]]]],[[24,18],[[26,[18]]]],[[24,18],[[26,[33]]]],[[24,18],[[26,[34]]]],[[11,18],[[26,[35]]]],[[11,18],[[26,[36]]]],[[11,18],[[26,[37]]]],[[24,18],[[26,[38]]]],[[11,18],[[26,[39]]]],[[11,18],[[26,[40]]]],[[]],[[24,12],13],[[10,12],13],[[11,12],13],[10,24],[[]],[[]],[[]],[6,11],[[],[[17,[10]]]],0,[[11,[41,[20]]],[[26,[32]]]],0,0,[[11,[41,[20]]],[[26,[37]]]],0,0,[[24,25]],[[11,2]],[[11,27]],[[24,18,18]],[[24,28]],[[24,29]],[[11,30]],[[24,18,18]],[[24,31]],[[11,32]],[[24,18,18]],[[24,33]],[[24,34]],[[11,35]],[[11,36]],[[11,14,18]],[[11,37]],[[24,38]],[[11,39]],[[11,40]],[[]],[[]],[[]],[24,42],[11,42],[24,42],[11,42],[24,42],[11,42],[11,42],0,[[],24],[[],11],[24,43],[11,[[44,[18,32]]]],0,0,[11,[[44,[18,37]]]],0,[24,7],[10,7],[11,7],0,[10,17],[11,17],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],0,[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45,45],[46,46],[47,47],[48,48],[[]],[[]],[[]],[[]],[[],[[7,[45]]]],[[],[[7,[46]]]],[[],[[7,[47]]]],[[],[[7,[48]]]],0,[[45,12],13],[[46,12],13],[[47,12],13],[[48,12],13],[[]],[[]],[[]],[[]],[[45,18],[[26,[46]]]],[[45,18],[[26,[47]]]],[45,15],[[45,18],[[26,[48]]]],[45,15],0,[[45,18,46],[[26,[46]]]],[[]],[[]],[[]],[[]],[[45,18],9],[[45,18],9],0,[[],45],[[],46],0,[45,7],[46,7],[47,7],[48,7],0,[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[],23],[[]],[[]],[[]],[[]],0,0,[[49,49]],[[50,50]],[[]],[[]],[[]],[[]],[49,17],[50,14],[49],[50],[50],[50,49],[[]],[[]],[49],[50],[[]],[[]],[51,49],[[],50],[49,14],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[]],[[]],[[49,[41,[20]]]],[[50,[41,[20]]]],[[49,[41,[20]]]],[[50,[41,[20]]]],[[],50],0,0,[[20,20,20,20,19,9,20,50],50],[[20,20],50],[[20,20,20,9],50],[[20,20],50],[[20,20,9],50],[[20,20],50],[[20,20],50],[20,50],[[32,[15,[32]]],50],[[32,15],50],[32,50],[[32,15,52,20,20],50],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[53,53],54],[[55,55],54],[[56,56],54],[[53,53],9],[[55,55],9],[[56,56],9],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[53,53],[[26,[54]]]],[[55,55],[[26,[54]]]],[[56,56],[[26,[54]]]],0,[[53,20],14],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[52,51],17],[[52,51],17],[[52,51,20],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[31,31],[33,33],[38,38],[34,34],[25,25],[29,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[28]]]],[[],[[7,[31]]]],[[],[[7,[33]]]],[[],[[7,[38]]]],[[],[[7,[34]]]],[[],[[7,[25]]]],[[],[[7,[29]]]],0,0,[[28,12],13],[[31,12],13],[[33,12],13],[[38,12],13],[[34,12],13],[[25,12],13],[[29,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[38,18],[29,18],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[57,57],34],0,0,0,[28,7],[31,7],[33,7],[38,7],[34,7],[25,7],[29,7],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[58],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[58,58],[2,2],[59,59],[60,60],[21,21],[22,22],[61,61],[62,62],[36,36],[35,35],[40,40],[39,39],[32,32],[37,37],[27,27],[30,30],[52,52],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[58,58],54],[[2,2],54],[[32,32],54],[[37,37],54],0,0,0,[[],58],[[],32],0,0,0,[[],[[7,[58]]]],[[],[[7,[2]]]],[[],[[7,[59]]]],[[],[[7,[60]]]],[[],[[7,[21]]]],[[],[[7,[22]]]],[[],[[7,[61]]]],[[],[[7,[62]]]],[[],[[7,[36]]]],[[],[[7,[35]]]],[[],[[7,[40]]]],[[],[[7,[39]]]],[[],[[7,[32]]]],[[],[[7,[37]]]],[[],[[7,[27]]]],[[],[[7,[30]]]],[[],[[7,[52]]]],0,0,[[58,58],9],[[2,2],9],[[59,59],9],[[60,60],9],[[21,21],9],[[22,22],9],[[61,61],9],[[62,62],9],[[36,36],9],[[35,35],9],[[40,40],9],[[39,39],9],[[32,32],9],[[37,37],9],[[27,27],9],[[30,30],9],[[58,12],13],[[58,12],13],[[2,12],13],[[59,12],13],[[59,12],13],[[60,12],13],[[21,12],13],[[22,12],13],[[61,12],13],[[62,12],13],[[36,12],13],[[35,12],13],[[40,12],13],[[39,12],13],[[32,12],13],[[37,12],13],[[27,12],13],[[30,12],13],[[52,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[17,[52]]]],[37,18],[[37,11],[[26,[19]]]],0,0,0,0,0,0,0,0,0,0,0,[58,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[41,[20]]],[[17,[52]]]],0,0,[14,58],[[20,59],2],[[18,18],40],[[18,18],39],0,0,0,0,0,0,0,0,0,[[58,58],[[26,[54]]]],[[2,2],[[26,[54]]]],[[32,32],[[26,[54]]]],[[37,37],[[26,[54]]]],0,0,[[58,20],14],[[2,20],14],[[32,20],14],0,[58,7],[2,7],[59,7],[60,7],[21,7],[22,7],[61,7],[62,7],[36,7],[35,7],[40,7],[39,7],[32,7],[37,7],[27,7],[30,7],[52,7],0,0,0,0,[52,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0],"p":[[3,"Object_v0"],[3,"Attribute"],[4,"Relationship_v0"],[3,"Schema_v0"],[4,"Relationship_V1"],[3,"Schema_v1"],[4,"Result"],[4,"ObjectType"],[15,"bool"],[3,"JSFormat"],[3,"SarzakObjectStore"],[3,"Formatter"],[6,"Result"],[3,"String"],[3,"Vec"],[3,"HashMap"],[6,"Result"],[3,"Uuid"],[15,"u16"],[15,"str"],[4,"Cardinality"],[4,"Conditionality"],[3,"TypeId"],[3,"DrawingObjectStore"],[3,"Anchor"],[4,"Option"],[3,"Binary"],[3,"BinaryUI"],[4,"Edge"],[3,"Isa"],[3,"IsaUI"],[3,"Object"],[3,"ObjectUI"],[3,"Point"],[3,"Referent"],[3,"Referrer"],[4,"Relationship"],[4,"RelationshipUI"],[3,"Subtype"],[3,"Supertype"],[8,"AsRef"],[8,"Iterator"],[15,"usize"],[3,"Values"],[3,"Config"],[3,"ConfigValue"],[3,"ImportedObject"],[3,"SingletonObject"],[3,"Context"],[3,"CachingContext"],[3,"PathBuf"],[3,"SarzakModel"],[4,"Field"],[4,"Ordering"],[3,"Ref"],[3,"Attr"],[15,"i64"],[3,"AttributeName"],[4,"Type"],[3,"Associative"],[4,"RelSide"],[3,"RelPointer"],[8,"ReadCuckooModel"],[8,"ReadSchema_v0"],[8,"ReadSchema_v1"],[8,"WriteSchema_v0"],[8,"WriteSchema_v1"],[13,"Object"],[13,"Relationship"],[13,"Binary"],[13,"Isa"],[13,"Associative"],[13,"Binary"],[13,"Isa"],[13,"Associative"],[8,"Extrude"],[8,"ReadModel"],[8,"WriteModel"],[8,"WriteObjectStore"],[13,"Reference"],[13,"Attribute"],[13,"Top"],[13,"Left"],[13,"Bottom"],[13,"Right"],[13,"BinaryUI"],[13,"IsaUI"],[8,"ReadSarzakModel"],[8,"WriteSarzakModel"],[13,"Binary"],[13,"Isa"],[13,"Associative"],[13,"ForeignKey"]]},\
"once_cell":{"doc":"Overview","t":[0,0,0,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":["once_cell","","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,14,16,14,16,14,14,14,14,16,16,16,14,14,16,16,16,14,14,14,16,14,16,14,16,14,14,14,14,16,14,16,14,16,14,14,14,14,16,14,14,16,14,16,14,14,0,0,21,22,21,22,21,21,21,21,22,22,22,21,21,22,22,22,21,21,21,22,21,22,21,22,21,21,21,22,21,22,21,22,21,21,21,21,22,21,21,22,21,22,21],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[2],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[1,7],[2,7],[3,[[7,[8]]]],[4,[[7,[9]]]],[1],[2],[3,8],[4,9],[1,10],[2,10],[3,[[10,[8]]]],[4,[[10,[9]]]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[1,10],[[2,11],[[10,[11]]]],[[3,8],10],[[4,9],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[13]]]],[[[14,[13]],[14,[13]]]],[[]],[[],14],[[],[[16,[15]]]],[[[16,[17]]]],[[[16,[17]]]],[[[14,[18]],14],9],[[[14,[19]],5],6],[[[16,[19]],5],6],[16],[16],[[],14],[20],[[]],[[]],[14,7],[16,7],[14,7],[16,7],[14],[14,10],[14],[[]],[[]],[14,7],[16,10],[[],14],[[],16],[14,10],[14,7],[[]],[[],10],[[],10],[14,10],[[],10],[[],10],[[],12],[[],12],[14],[[],14],0,0,[[]],[[]],[[]],[[]],[[[21,[13]]],[[21,[13]]]],[[[21,[13]],[21,[13]]]],[[]],[[],21],[[],[[22,[15]]]],[[[22,[17]]]],[[[22,[17]]]],[[[21,[18]],[21,[18]]],9],[[[21,[19]],5],6],[[[22,[19]],5],6],[22],[22],[20],[[]],[[],21],[[]],[21,7],[22,7],[21,7],[22,7],[21],[21,10],[[]],[[]],[21,7],[22,10],[[],21],[[],22],[21,10],[21,7],[[]],[[],10],[[],10],[21,10],[[],10],[[],10],[[],12],[[],12],[[],21]],"p":[[3,"OnceRef"],[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"PartialEq"],[8,"Debug"],[15,"never"],[3,"OnceCell"],[3,"Lazy"]]},\
"os_str_bytes":{"doc":"This crate allows interacting with the data stored by <code>OsStr</code>…","t":[3,8,8,8,3,8,3,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["EncodingError","OsStrBytes","OsStringBytes","Pattern","RawOsStr","RawOsStrCow","RawOsString","as_raw_bytes","as_ref","as_ref","assert_from_raw_bytes","assert_from_raw_bytes","assert_from_raw_vec","assert_from_raw_vec","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","cmp","contains","default","default","deref","ends_with","ends_with_os","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","find","fmt","fmt","fmt","fmt","from","from","from","from","from_raw_bytes","from_raw_bytes_unchecked","from_raw_vec","from_raw_vec_unchecked","from_str","from_string","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","into","into","into_box","into_os_str","into_os_string","into_raw_bytes","into_raw_vec","into_raw_vec","into_string","is_empty","iter","new","new","partial_cmp","partial_cmp","provide","raw_len","rfind","rsplit_once","shrink_to_fit","split","split_at","split_off","split_once","starts_with","starts_with_os","strip_prefix","strip_suffix","to_os_str","to_owned","to_owned","to_owned","to_raw_bytes","to_str","to_str_lossy","to_string","trim_end_matches","trim_matches","trim_start_matches","truncate","try_from","try_from","try_into","try_into","type_id","type_id","type_id","Split","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","last","next","next_back","to_owned","try_from","try_into","type_id"],"q":["os_str_bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os_str_bytes::iter","","","","","","","","","","","","","","",""],"d":["The error that occurs when a byte sequence is not …","A platform agnostic variant of <code>OsStrExt</code>.","A platform agnostic variant of <code>OsStringExt</code>.","Allows a type to be used for searching by <code>RawOsStr</code> and …","A container for borrowed byte strings converted by this …","Extensions to <code>Cow&lt;RawOsStr&gt;</code> for additional conversions.","A container for owned byte strings converted by this crate.","Returns the byte string stored by this container.","","","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","","","","","","","","Equivalent to <code>String::clear</code>.","","","","","","","Equivalent to <code>str::contains</code>.","","","","Equivalent to <code>str::ends_with</code>.","Equivalent to <code>str::ends_with</code> but accepts this type for the …","","","","","","","","","","","","","","Equivalent to <code>str::find</code>.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","Wraps a string, without copying or encoding conversion.","Wraps a string, without copying or encoding conversion.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Equivalent to <code>String::into_boxed_str</code>.","Converts this representation back to a platform-native …","Converts this representation back to a platform-native …","Returns the byte string stored by this container.","Converts a platform-native string into an equivalent byte …","Returns the byte string stored by this container.","Equivalent to <code>OsString::into_string</code>.","Equivalent to <code>str::is_empty</code>.","Iterators provided by this crate.","Converts a platform-native string into a representation …","Converts a platform-native string into a representation …","","","","Returns the length of the byte string stored by this …","Equivalent to <code>str::rfind</code>.","Equivalent to <code>str::rsplit_once</code>.","Equivalent to <code>String::shrink_to_fit</code>.","Equivalent to <code>str::split</code>, but empty patterns are not …","Equivalent to <code>str::split_at</code>.","Equivalent to <code>String::split_off</code>.","Equivalent to <code>str::split_once</code>.","Equivalent to <code>str::starts_with</code>.","Equivalent to <code>str::starts_with</code> but accepts this type for …","Equivalent to <code>str::strip_prefix</code>.","Equivalent to <code>str::strip_suffix</code>.","Converts this representation back to a platform-native …","","","","Converts a platform-native string into an equivalent byte …","Equivalent to <code>OsStr::to_str</code>.","Converts this string to the best UTF-8 representation …","","Equivalent to <code>str::trim_end_matches</code>.","Equivalent to <code>str::trim_matches</code>.","Equivalent to <code>str::trim_start_matches</code>.","Equivalent to <code>String::truncate</code>.","","","","","","","","The iterator returned by <code>RawOsStr::split</code>.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,2,28,1,29,2,1,2,2,6,1,2,6,2,2,6,2,6,1,2,1,1,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,6,1,1,2,6,6,2,2,2,6,28,1,29,2,1,2,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,6,2,30,2,30,29,2,2,1,0,1,2,1,2,6,1,1,1,2,1,1,2,1,1,1,1,1,1,1,2,6,28,1,1,6,1,1,1,2,2,6,2,6,1,2,6,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26],"f":[0,0,0,0,0,0,0,[1],[1,1],[2,1],[[],3],[[],1],[[[5,[4]]]],[[[5,[4]]],2],[[]],[[]],[2,1],[[]],[[]],[[]],[[]],[2],[2,2],[6,6],[[]],[[]],[[1,1],7],[[2,2],7],[1,8],[[],1],[[],2],[2],[1,8],[[1,1],8],[[1,9],8],[[1,10],8],[[1,1],8],[[1,2],8],[[1,2],8],[[1,9],8],[[2,2],8],[[2,9],8],[[2,1],8],[[2,10],8],[[2,1],8],[[2,10],8],[[6,6],8],[1,[[12,[11]]]],[[1,13],14],[[2,13],14],[[6,13],14],[[6,13],14],[[]],[9,2],[[[15,[1]]],2],[[]],[[],[[16,[3,6]]]],[[],1],[[[5,[4]]],[[16,[6]]]],[[[5,[4]]],2],[10,1],[9,2],[1],[2],[[1,[17,[11]]]],[[1,[18,[11]]]],[[1,[19,[11]]]],[[1,[20,[11]]]],[[1,[21,[11]]]],[[1,22]],[[2,[19,[11]]]],[[2,[20,[11]]]],[[2,[18,[11]]]],[[2,[17,[11]]]],[[2,[21,[11]]]],[[2,22]],[[]],[[]],[2,[[15,[1]]]],[[],[[3,[23]]]],[2,24],[[],3],[[],[[5,[4]]]],[2,[[5,[4]]]],[2,[[16,[9,2]]]],[1,8],0,[23,[[3,[1]]]],[24,2],[[1,1],[[12,[7]]]],[[2,2],[[12,[7]]]],[25],[1,11],[1,[[12,[11]]]],[1,12],[2],[1,26],[[1,11]],[[2,11],2],[1,12],[1,8],[[1,1],8],[1,[[12,[1]]]],[1,[[12,[1]]]],[1,[[3,[23]]]],[1],[[]],[[]],[[],3],[1,[[12,[10]]]],[1,[[3,[10]]]],[[],9],[1,1],[1,1],[1,1],[[2,11]],[[],16],[[],16],[[],16],[[],16],[[],27],[[],27],[[],27],0,[[]],[[]],[26,26],[[]],[[26,13],14],[[]],[[]],[[]],[26,12],[26,12],[26,12],[[]],[[],16],[[],16],[[],27]],"p":[[3,"RawOsStr"],[3,"RawOsString"],[4,"Cow"],[15,"u8"],[3,"Vec"],[3,"EncodingError"],[4,"Ordering"],[15,"bool"],[3,"String"],[15,"str"],[15,"usize"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Box"],[4,"Result"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeToInclusive"],[3,"RangeTo"],[3,"RangeFrom"],[3,"RangeFull"],[3,"OsStr"],[3,"OsString"],[3,"Demand"],[3,"Split"],[3,"TypeId"],[8,"OsStrBytes"],[8,"OsStringBytes"],[8,"RawOsStrCow"]]},\
"ppv_lite86":{"doc":"","t":[8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,14,14,14,10,10,10,10,10,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,10,11,11,10,10,10,11,11,2,2,2,10,10,10,0,6,6,3,3,3,3,3,3,6,6,6,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,19,19,19],"n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage"],"q":["ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","",""],"i":[0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,0,0,0,25,26,27,25,26,28,28,28,28,28,29,29,29,29,29,29,30,29,29,31,31,31,32,32,32,33,33,33,33,33,33,33,27,34,35,0,28,0,28,0,28,0,28,0,28,0,28,0,28,0,28,0,28,0,28,2,28,28,36,37,37,28,28,0,0,0,38,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,16,17,18,16,17,18,3,4,5,6,7,8,9,10,11,12,14,15,16,16,17,17,18,14,15,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,17,18,17,18,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,16,0,0,0],"fp":[[15,"u32"],[8,"Store"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[8,"Clone"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"],[19,"vec256_storage"],[19,"vec512_storage"],[15,"bool"],[8,"Copy"],[4,"Result"],[3,"TypeId"],[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[8,"MultiLane"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Vector"],[8,"Vec4Ext"],[8,"UnsafeFrom"],[8,"StoreBytes"],[8,"VZip"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","0","0","0","0","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::TokenTree","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[9,8,8,0,0,6,0,6,9,0,0,6,8,8,0,6,0,0,0,0,1,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,4,3,5,4,6,7,8,1,9,10,3,5,4,6,7,8,1,9,10,3,10,5,7,8,9,10,10,5,5,3,3,3,3,16,16,5,5,4,6,6,7,7,8,1,1,9,10,10,3,3,16,5,5,5,4,4,6,6,6,6,6,7,8,1,9,10,3,5,5,5,3,10,3,3,3,3,3,3,3,3,3,3,16,5,4,6,7,8,1,9,10,3,5,5,3,3,4,4,4,5,7,1,10,10,10,16,4,6,7,1,10,3,1,16,6,7,1,10,3,7,7,7,3,3,5,4,6,7,8,1,9,10,3,16,5,6,7,1,10,3,0,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,3,3,3,3,3,3,3,3,3,4,3,3,41,42,43,44,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],4],[2,3],[5,5],[4,4],[6,6],[7,7],[8,8],[1,1],[9,9],[10,10],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],[[],5],[7,8],[[8,8],12],[[9,9],12],[10,12],[[10,10],12],[[5,13]],[[5,13]],[14,3],[14,3],[15,3],[15,3],[[16,17],18],[[16,17],18],[[5,17],18],[[5,17],18],[[4,17],18],[[6,17],18],[[6,17],18],[[7,17],18],[[7,17],18],[[8,17],18],[[1,17],18],[[1,17],18],[[9,17],18],[[10,17],18],[[10,17],18],[[3,17],18],[[3,17],18],[[]],[19,5],[[]],[6,5],[20,4],[[]],[7,6],[1,6],[3,6],[[]],[10,6],[[]],[[]],[[]],[[]],[[]],[[]],[13,5],[13,5],[21,[[22,[5,16]]]],[21,[[22,[3,16]]]],[10],[23,3],[23,3],[24,3],[24,3],[25,3],[25,3],[26,3],[26,3],[27,3],[27,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,28],[5,12],[29,3],[29,3],[[4,4],[[30,[4]]]],[[4,4],4],[[],4],[[],5],[[8,5],7],[[2,9],1],[[21,4],10],[[21,4],10],[[10,10],[[30,[11]]]],[31],[[4,4],4],[[6,4]],[[7,4]],[[1,4]],[[10,4]],[[3,4]],[1,9],[16,4],[6,4],[7,4],[1,4],[10,4],[3,4],[7,4],[7,4],[7,5],[21,3],[[3,[33,[32]]],[[30,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[36,3],[36,3],[37,3],[37,3],[38,3],[38,3],[39,3],[39,3],[40,3],[40,3],[4,20],[32,3],[32,3],0,0,0,0,0,0,[[]],[[]],[28,28],[[]],[[28,17],18],[[]],[[]],[[]],[28,[[30,[6]]]],[28],[[]],[[],22],[[],22],[[],35]],"p":[[3,"Punct"],[15,"char"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[15,"usize"],[8,"RangeBounds"],[3,"String"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[13,"Group"],[13,"Ident"],[13,"Punct"],[13,"Literal"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"rand":{"doc":"Utilities for random number generation","t":[18,8,3,8,18,8,8,16,8,11,11,11,0,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,0,11,5,11,11,0,11,11,11,11,11,0,11,11,5,11,10,11,11,10,11,11,11,11,13,3,3,4,3,3,8,8,13,13,13,3,3,3,3,13,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,8,8,8,16,3,3,3,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,2,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,8,11,11,10,11,10,11,11,10,10,11,10,10,11,11,0,11,11,11,11,10,10,11,11,11,11,11,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","provide","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","next","provide","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AllWeightsZero","InvalidWeight","NoItem","TooMany","WeightedError","WeightedIndex","alias_method","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","into","into","new","provide","sample","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_weights","vzip","vzip","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","provide","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["rand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributionsrand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted::alias_method","","","","","","","","","","","","rand::prelude","","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","Returns the argument unchanged.","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All items in the provided weight collection are zero.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","Too many weights are provided (length greater than <code>u32::MAX</code>…","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","","","","","","","","","","","Update a subset of weights, without changing the number of …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,81,0,1,1,1,0,82,82,15,1,1,1,1,1,81,81,81,82,82,82,82,82,82,82,82,1,1,1,15,15,0,1,0,1,15,0,82,82,82,82,81,0,1,1,0,1,83,82,82,15,1,1,1,1,64,0,0,0,0,0,0,0,28,64,64,0,0,0,0,64,0,0,0,84,25,26,27,28,19,38,29,30,25,32,34,26,27,28,19,38,29,30,25,32,34,26,27,28,29,30,25,32,34,26,27,28,29,30,25,32,34,26,27,28,34,27,28,28,19,38,29,30,25,32,34,26,27,28,19,38,29,30,25,32,34,34,34,26,27,27,28,19,38,29,30,25,32,34,26,19,18,18,27,32,19,28,18,27,38,29,29,30,30,25,32,34,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,18,18,84,84,19,27,28,29,30,25,32,34,26,28,27,28,19,38,29,30,25,32,34,26,27,28,19,38,29,30,25,32,34,26,27,28,19,38,29,30,25,32,34,26,0,27,28,19,38,29,30,25,32,34,26,0,0,0,0,33,0,0,0,0,0,0,85,86,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,59,57,58,59,60,57,58,59,60,57,58,59,60,87,85,34,57,57,57,57,57,57,57,57,57,57,57,57,58,59,59,60,85,34,57,57,57,57,57,57,57,57,57,57,57,57,58,59,59,60,85,57,57,57,57,57,57,57,57,57,57,57,57,58,59,59,60,87,85,57,57,57,57,57,57,57,57,57,57,57,57,59,59,85,57,57,57,57,57,57,57,57,57,57,57,57,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,64,64,64,64,0,0,0,63,64,63,64,63,64,63,64,63,64,63,64,64,63,64,63,64,63,64,63,63,64,64,63,64,63,64,63,64,63,63,64,0,0,66,66,66,66,66,66,66,66,66,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,69,22,68,69,22,68,69,22,68,69,22,68,69,22,68,22,69,68,69,22,68,69,22,68,69,22,69,69,68,69,22,0,68,69,22,68,69,22,68,69,22,68,69,22,68,69,22,68,69,22,68,69,22,68,69,22,0,0,0,70,72,73,70,72,73,70,70,70,72,70,72,73,73,70,72,73,70,72,73,70,72,70,72,70,72,70,73,70,73,70,73,72,70,72,73,70,72,73,70,72,73,70,72,73,70,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,88,0,0,0,75,75,88,89,88,89,89,88,88,89,88,88,75,75,0,75,75,75,75,88,88,75,75,75,75,75,0,0,0,78,80,79,78,80,79,78,79,78,79,78,78,80,79,78,78,78,80,79,78,78,80,79,78,80,79,78,78,78,78,80,79,0,0,80,79,78,79,78,80,79,78,80,79,78,80,79,78,80,79],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],0,[[]],[[]],[[]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[[]],[2,1],[7,1],[[]],[[],[[6,[1]]]],[[]],[[]],[[]],[8,9],[8,9],[[]],[[]],[[10,10],9],[[10,10],9],[1,11],[[]],[[],1],[[],10],[[],12],0,[13],[[]],[1,[[3,[14]]]],[15,[[6,[16,17]]]],0,[18],[18],[[],19],[[],19],[12],0,[1,[[3,[11]]]],[1,[[21,[11,20]]]],[[],22],[[],23],[[],[[6,[1]]]],[[],[[6,[1]]]],[[],[[6,[1]]]],[[],[[6,[1]]]],[[],6],[[],6],[[],24],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[23,16]],[[25,23,16]],[[26,23,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[29,29],[30,30],[25,25],[[[32,[31]]],[[32,[31]]]],[[[34,[[0,[31,33]]]]],[[34,[[0,[31,33]]]]]],[26,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,27],9],[[28,28],9],[[[34,[[0,[35,33]]]],34],9],[[27,4],36],[[28,4],36],[[28,4],36],[[[19,[37,37,37]],4],36],[[[38,[37,37,37,37]],4],36],[[29,4],36],[[30,4],36],[[25,4],36],[[[32,[37]],4],36],[[[34,[[0,[37,33]]]],4],36],[[26,4],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[39,[33]]],[[34,[33]]]],[[]],[[[40,[33]]],[[34,[33]]]],[[]],[[10,10],[[6,[27,28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],38],[[],38],[8,[[6,[27,28]]]],[[],[[6,[32,0]]]],[19,3],[13],[[]],[27,9],[38],[29,8],[29,41],[30,8],[30,41],[25,42],[32],[[[34,[33]]],33],[26,43],[26],[26],[26],[26],[26],[26],[26,8],[26],[26],[26],[26],[26],[26],[26,42],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26,9],[26],[26],[26,44],[26],[26,45],[26],[26],[26],[26,46],[26,47],[26],[26,48],[26,2],[26],[26,49],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26,3],[26,50],[26,51],[26,52],[26,41],[26,53],[26,14],[26,54],[26,55],[26,16],[26,56],[26,12],[26,10],[[],19],[[],19],[16,23],[16,23],[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[31]]],[[57,[31]]]],[58,58],[[[59,[31]]],[[59,[31]]]],[60,60],[[]],[[]],[[]],[[]],[[[57,[35]],57],9],[[[59,[35]],59],9],[[[57,[37]],4],36],[[58,4],36],[[[59,[37]],4],36],[[60,4],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[]],[[],[[34,[33]]]],[[],[[57,[55]]]],[[],[[57,[10]]]],[[],[[57,[42]]]],[[],[[57,[43]]]],[[],[[57,[12]]]],[[],[[57,[52]]]],[[],[[57,[53]]]],[[],[[57,[46]]]],[[],[[57,[14]]]],[[],[[57,[16]]]],[[],[[57,[56]]]],[[],[[57,[54]]]],[[],58],[[],[[59,[8]]]],[[],[[59,[41]]]],[[],60],[[]],[[],[[34,[33]]]],[[],[[57,[54]]]],[[],[[57,[46]]]],[[],[[57,[10]]]],[[],[[57,[55]]]],[[],[[57,[42]]]],[[],[[57,[56]]]],[[],[[57,[16]]]],[[],[[57,[14]]]],[[],[[57,[43]]]],[[],[[57,[12]]]],[[],[[57,[53]]]],[[],[[57,[52]]]],[[],58],[[],[[59,[8]]]],[[],[[59,[41]]]],[[],60],[[]],[[[57,[54]]]],[[[57,[12]]]],[[[57,[16]]]],[[[57,[52]]]],[[[57,[53]]]],[[[57,[56]]]],[[[57,[14]]]],[[[57,[43]]]],[[[57,[46]]]],[[[57,[42]]]],[[[57,[10]]]],[[[57,[55]]]],[58],[[[59,[8]]]],[[[59,[41]]]],[60,61],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[63,[[0,[31,33,62]]]]],[[63,[[0,[31,33,62]]]]]],[64,64],[[]],[[]],[[[63,[[0,[35,33,62]]]],63],9],[[64,64],9],[[[63,[[0,[37,33,62]]]],4],36],[[64,4],36],[[64,4],36],[[]],[[]],[[]],[[]],[[],[[6,[[63,[[0,[33,62]]]],64]]]],[13],[63,16],[[]],[[]],[[],23],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[[63,[[0,[33,62]]]]],[[6,[64]]]],[[]],[[]],0,0,[[]],[[]],[[[66,[[0,[37,65]]]],4],36],[[]],[[]],[[[67,[65]]],[[6,[[66,[65]],64]]]],[[],6],[[],6],[[],24],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[69,69],[22,22],[[]],[[]],[[]],[[],68],[[],22],[[69,69],9],[68],[69],[22],[[68,4],[[6,[5]]]],[[69,4],36],[[22,4],36],[[]],[[]],[[]],[15,[[6,[69,1]]]],[[],69],[[]],[[]],[[]],0,[68,10],[69,10],[22,10],[68,12],[69,12],[22,12],[[]],[[]],[[]],[68,[[6,[1]]]],[69,[[6,[1]]]],[22,[[6,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[]],[[]],[[]],0,0,0,[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[[]],[[[72,[71]]]],[[[70,[15]]]],[[[72,[37]],4],36],[[73,4],36],[[73,4],36],[[[70,[37,37]],4],36],[[]],[[]],[[]],[[]],[[]],[[]],[71,[[72,[71]]]],[12,70],[[[72,[71]]],10],[[[70,[15]]],10],[[[72,[71]]],12],[[[70,[15]]],12],[13],[70,[[6,[1]]]],[73,[[3,[11]]]],[[]],[[],23],[[[72,[71]]],[[6,[1]]]],[[[70,[15]]],[[6,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[]],[[]],[[]],0,[[]],[[]],[74,74],[[]],[[74,74],9],[74],[[74,4],36],[[]],[[]],[[12,12],74],[74,10],[74,12],[[]],[74,[[6,[1]]]],[[],6],[[],6],[[],24],[[]],0,0,0,0,[[]],[[]],[[],3],[[],3],[16,75],[16,67],[[],16],[16,[[6,[75,64]]]],[[],3],[[],3],[[],[[6,[64]]]],[[],[[6,[64]]]],[[[75,[[0,[37,76]],37]],4],36],[[]],0,[[]],[[]],[[[75,[[0,[[77,[16]],76]]]]],16],[[[75,[[0,[[77,[16]],76]]]]],3],[16],[[]],[[[75,[[0,[[77,[16]],76]]]]]],[[],6],[[],6],[[],24],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[78,78],[79,79],[[]],[[]],[[78,78],9],[[78,4],36],[[80,4],36],[[79,4],36],[[[67,[10]]],78],[[[67,[16]]],78],[[]],[[]],[[]],[[78,16],16],[[]],[[]],[[]],[78,79],[[]],[[]],[78,[[67,[16]]]],[78,9],[78,80],[78,16],[80,[[3,[16]]]],[79,3],[[16,16],78],[[16,16],[[6,[78,64]]]],[80],[79],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[]],[[]],[[]]],"p":[[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Error"],[15,"f64"],[15,"bool"],[15,"u32"],[8,"Error"],[15,"u64"],[3,"Demand"],[15,"i32"],[8,"RngCore"],[15,"usize"],[3,"Error"],[8,"Distribution"],[3,"DistIter"],[3,"Global"],[3,"Box"],[3,"ThreadRng"],[3,"String"],[3,"TypeId"],[3,"Alphanumeric"],[3,"Standard"],[3,"Bernoulli"],[4,"BernoulliError"],[3,"OpenClosed01"],[3,"Open01"],[8,"Clone"],[3,"Slice"],[8,"SampleUniform"],[3,"Uniform"],[8,"PartialEq"],[6,"Result"],[8,"Debug"],[3,"DistMap"],[3,"Range"],[3,"RangeInclusive"],[15,"f32"],[15,"u8"],[15,"isize"],[15,"char"],[3,"NonZeroUsize"],[15,"u16"],[3,"NonZeroU128"],[3,"NonZeroU64"],[3,"NonZeroU16"],[3,"Wrapping"],[3,"NonZeroU8"],[15,"i128"],[15,"i64"],[15,"i16"],[15,"i8"],[15,"u128"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Duration"],[8,"PartialOrd"],[3,"WeightedIndex"],[4,"WeightedError"],[8,"Weight"],[3,"WeightedIndex"],[3,"Vec"],[3,"OsRng"],[3,"StdRng"],[3,"ReseedingRng"],[8,"Read"],[3,"ReadRng"],[3,"ReadError"],[3,"StepRng"],[3,"SliceChooseIter"],[8,"Sized"],[8,"Index"],[4,"IndexVec"],[4,"IndexVecIntoIter"],[4,"IndexVecIter"],[8,"SeedableRng"],[8,"Rng"],[8,"Fill"],[8,"DistString"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[8,"SliceRandom"],[8,"IteratorRandom"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,3,4,5,5,6,7,7,2,3,4,5,6,7,2,4,6,3,5,7,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,3,5,7,0,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[7,7],8],[3],[5],[7],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[7,9],10],[[]],[[]],[2,3],[[]],[[]],[4,5],[[]],[[]],[6,7],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[2],[4],[6],[3],[5],[7],[3,11],[5,11],[7,11],[3,12],[5,12],[7,12],[[]],[[]],[[]],[[]],[[]],[[]],[3,13],[5,13],[7,13],[3,11],[5,11],[7,11],0,[[3,11]],[[5,11]],[[7,11]],[[3,12]],[[5,12]],[[7,12]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[15,[14]]]],[5,[[15,[14]]]],[7,[[15,[14]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"RngCore"],[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"u128"],[15,"u32"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"rand_core":{"doc":"Random number generation traits","t":[18,8,8,3,18,3,8,16,8,10,11,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,0,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,8,16,16,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","as_rngcore","as_rngcore","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","provide","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":["rand_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::impls","","","","","","rand_core::le",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[3,0,0,0,3,0,0,26,0,27,2,0,3,2,3,2,2,2,3,2,1,2,3,3,2,3,3,3,2,26,26,26,0,3,3,2,0,3,1,2,1,2,3,3,1,26,3,3,2,3,1,2,3,2,3,2,3,2,0,0,0,21,21,23,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,21,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[],1],[[],1],0,[[]],[[]],[[]],[[]],[2,2],[[]],[3,[[5,[4]]]],[[],2],[[]],[2],[[3,6],7],[[3,6],7],[[2,6],7],[[]],[4,3],[8,3],[[]],[[]],[1,[[9,[3]]]],[[]],0,[3,10],[[]],[[]],0,[[],3],[[],11],[2,11],[[],12],[2,12],[13],[3,[[5,[14]]]],[1,[[9,[15,16]]]],[12],[3,[[5,[10]]]],[3,[[17,[10]]]],[[]],[[],18],[[],[[9,[3]]]],[2,[[9,[3]]]],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],0,0,0,0,0,[[],1],[[]],[[]],[[]],[[]],[[[23,[[0,[20,21,22]]]]],[[23,[[0,[20,21,22]]]]]],[[[24,[[0,[20,21,22]]]]],[[24,[[0,[20,21,22]]]]]],[[]],[[]],0,0,[[[23,[21]]]],[[[24,[21]]]],[[[23,[[0,[21,25]]]],6],7],[[[24,[[0,[21,25]]]],6],7],[[]],[[]],[1,[[9,[[23,[[0,[21,26]]]],3]]]],[1,[[9,[[24,[[0,[21,26]]]],3]]]],[[],[[23,[[0,[21,26]]]]]],[[],[[24,[[0,[21,26]]]]]],[[]],[[[23,[21]],15]],[[[24,[21]],15]],[[[23,[21]]],15],[[[24,[21]]],15],[[]],[[]],[21,[[23,[21]]]],[21,[[24,[21]]]],[[[23,[21]]],11],[[[24,[21]]],11],[[[23,[21]]],12],[[[24,[21]]],12],[[[23,[21]]]],[[[24,[21]]]],[12,[[23,[[0,[21,26]]]]]],[12,[[24,[[0,[21,26]]]]]],[[]],[[]],[[[23,[21]]],[[9,[3]]]],[[[24,[21]]],[[9,[3]]]],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[]],[[]],[[]],[[],11],[[],12],[[],12],[[]],[[]]],"p":[[8,"RngCore"],[3,"OsRng"],[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"Error"],[15,"u32"],[15,"u64"],[3,"Demand"],[15,"i32"],[15,"usize"],[3,"Error"],[3,"Box"],[3,"String"],[3,"TypeId"],[8,"Clone"],[8,"BlockRngCore"],[8,"Sized"],[3,"BlockRng"],[3,"BlockRng64"],[8,"Debug"],[8,"SeedableRng"],[8,"CryptoRngCore"]]},\
"rustix":{"doc":"<code>rustix</code> provides efficient memory-safe and I/O-safe …","tn":["cstr","fd","ffi","io","termios","AsFd","AsRawFd","BorrowedFd","FromRawFd","IntoRawFd","OwnedFd","RawFd","as_fd","as_fd","as_fd","as_filelike","as_filelike","as_filelike_view","as_filelike_view","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_filelike","as_raw_filelike","as_raw_socketlike","as_raw_socketlike","as_socketlike","as_socketlike","as_socketlike_view","as_socketlike_view","borrow","borrow","borrow_mut","borrow_mut","borrow_raw","clone","clone_into","drop","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_fd","from_filelike","from_into_filelike","from_into_socketlike","from_raw_fd","from_raw_fd","from_raw_filelike","from_raw_socketlike","from_socketlike","into","into","into_fd","into_filelike","into_raw_fd","into_raw_fd","into_raw_filelike","into_raw_socketlike","into_socketlike","is_terminal","is_terminal","to_owned","try_clone","try_clone_to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CStr","CString","FromBytesWithNulError","NulError","as_bytes","as_bytes_with_nul","as_c_str","as_ptr","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_char","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","deref","description","description","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_until_nul","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_ptr","from_raw","from_vec_unchecked","from_vec_with_nul","from_vec_with_nul_unchecked","hash","hash","index","index","into","into","into","into_boxed_c_str","into_bytes","into_bytes_with_nul","into_c_string","into_raw","into_string","into_vec","is_empty","new","nul_position","partial_cmp","partial_cmp","provide","provide","to_bytes","to_bytes_with_nul","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string_lossy","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ACCESS","ADDRINUSE","ADDRNOTAVAIL","AFNOSUPPORT","AGAIN","ALREADY","AUTH","BADF","BADMSG","BADRPC","BUSY","CANCELED","CHILD","CLOEXEC","CONNABORTED","CONNREFUSED","CONNRESET","Current","DEADLK","DESTADDRREQ","DOM","DQUOT","DupFlags","ERR","EXIST","End","Errno","FAULT","FBIG","FTYPE","FdFlags","HOSTDOWN","HOSTUNREACH","HUP","IDRM","ILSEQ","IN","INPROGRESS","INTR","INVAL","IO","ISCONN","ISDIR","IoSlice","IoSliceMut","LOOP","MFILE","MLINK","MSGSIZE","MULTIHOP","NAMETOOLONG","NEEDAUTH","NETDOWN","NETRESET","NETUNREACH","NFILE","NOATTR","NOBUFS","NODATA","NODEV","NOENT","NOEXEC","NOLCK","NOLINK","NOMEM","NOMSG","NOPROTOOPT","NOSPC","NOSR","NOSTR","NOSYS","NOTBLK","NOTCONN","NOTDIR","NOTEMPTY","NOTRECOVERABLE","NOTSOCK","NOTSUP","NOTTY","NVAL","NXIO","OPNOTSUPP","OUT","OVERFLOW","OWNERDEAD","PERM","PFNOSUPPORT","PIPE","PIPE_BUF","PRI","PROCLIM","PROCUNAVAIL","PROGMISMATCH","PROGUNAVAIL","PROTO","PROTONOSUPPORT","PROTOTYPE","PollFd","PollFlags","RANGE","RDBAND","RDNORM","REMOTE","ROFS","RPCMISMATCH","Result","SHUTDOWN","SOCKTNOSUPPORT","SPIPE","SRCH","STALE","SeekFrom","Start","TIME","TIMEDOUT","TOOBIG","TOOMANYREFS","TXTBSY","USERS","WOULDBLOCK","WRBAND","WRNORM","XDEV","advance","advance","advance_slices","advance_slices","all","all","all","as_fd","as_filelike","as_filelike_view","as_socketlike","as_socketlike_view","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_revents","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmp","cmp","cmp","complement","complement","complement","contains","contains","contains","deref","deref","deref_mut","difference","difference","difference","dup","dup2","dup3","empty","empty","empty","eq","eq","eq","eq","eq","extend","extend","extend","fcntl_dupfd_cloexec","fcntl_getfd","fcntl_setfd","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_borrowed_fd","from_io_error","from_iter","from_iter","from_iter","from_raw_os_error","hash","hash","hash","hash","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","ioctl_fioclex","ioctl_fionbio","ioctl_fionread","ioctl_tiocexcl","ioctl_tiocnxcl","is_all","is_all","is_all","is_empty","is_empty","is_empty","kind","new","new","new","not","not","not","partial_cmp","partial_cmp","partial_cmp","pipe","poll","pread","preadv","provide","pwrite","pwritev","raw_os_error","raw_stderr","raw_stdin","raw_stdout","read","readv","remove","remove","remove","retry_on_intr","revents","set","set","set","set_fd","stderr","stdin","stdout","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","take_stderr","take_stdin","take_stdout","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","write","writev","0","0","0","Action","B0","B110","B115200","B1200","B134","B150","B1800","B19200","B200","B230400","B2400","B300","B38400","B4800","B50","B57600","B600","B75","B9600","Drain","Flush","ICANON","IFlush","IOFlush","IOff","IOn","Now","OFlush","OOff","OOn","OptionalActions","QueueSelector","Speed","Tcflag","Termios","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VTIME","VWERASE","Winsize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","isatty","speed_value","tcdrain","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcgetwinsize","tcsendbreak","tcsetattr","tcsetpgrp","tcsetwinsize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["rustix","","","","","rustix::fd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustix::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustix::iorustix::io::SeekFrom","","","rustix::termios","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A macro for <code>CStr</code> literals.","Export the <code>*Fd</code> types and traits that are used in rustix’…","Utilities related to FFI bindings.","I/O operations.","Terminal I/O stream operations.","A trait to borrow the file descriptor from an underlying …","A trait to extract the raw file descriptor from an …","A borrowed file descriptor.","A trait to express the ability to construct an object from …","A trait to express the ability to consume an object and …","An owned file descriptor.","Raw file descriptors.","Borrows the file descriptor.","","","","","","","Extracts the raw file descriptor.","","","","","","","","","","","","","","","Return a <code>BorrowedFd</code> holding the given raw file descriptor.","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","Constructs a new instance of <code>Self</code> from the given raw file …","Constructs a new instance of <code>Self</code> from the given raw file …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes this object, returning the raw underlying file …","","","","","","","","Creates a new <code>OwnedFd</code> instance that shares the same …","Creates a new <code>OwnedFd</code> instance that shares the same …","","","","","","","Representation of a borrowed C string.","A type representing an owned, C-compatible, nul-terminated …","An error indicating that a nul byte was not in the …","An error indicating that an interior nul byte was found.","Returns the contents of this <code>CString</code> as a slice of bytes.","Equivalent to <code>CString::as_bytes()</code> except that the returned …","Extracts a <code>CStr</code> slice containing the entire string.","Returns the inner pointer to this C string.","","","","","","","","","","","","Equivalent to C’s <code>char</code> type.","","","","","","","","","","Creates an empty <code>CString</code>.","","","","","","","","","","","","","","","","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …","Converts a Vec&lt;NonZeroU8&gt; into a <code>CString</code> without copying …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a C string wrapper from a byte slice.","Creates a C string wrapper from a byte slice.","Unsafely creates a C string wrapper from a byte slice.","Wraps a raw C string with a safe C string wrapper.","Retakes ownership of a <code>CString</code> that was transferred to C …","Creates a C-compatible string by consuming a byte vector, …","Attempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.","Converts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>CString</code> into a boxed <code>CStr</code>.","Consumes the <code>CString</code> and returns the underlying byte …","Equivalent to <code>CString::into_bytes()</code> except that the …","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","Consumes the <code>CString</code> and transfers ownership of the string …","Converts the <code>CString</code> into a <code>String</code> if it contains valid …","Consumes this error, returning the underlying vector of …","Returns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.","Creates a new C-compatible string from a container of …","Returns the position of the nul byte in the slice that …","","","","","Converts this C string to a byte slice.","Converts this C string to a byte slice containing the …","","","","","Yields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.","","","Converts a <code>CStr</code> into a Cow&lt;str&gt;.","","","","","","","","","","","<code>EACCES</code>","<code>EADDRINUSE</code>","<code>EADDRNOTAVAIL</code>","<code>EAFNOSUPPORT</code>","<code>EAGAIN</code>","<code>EALREADY</code>","<code>EAUTH</code>","<code>EBADF</code>","<code>EBADMSG</code>","<code>EBADRPC</code>","<code>EBUSY</code>","<code>ECANCELED</code>","<code>ECHILD</code>","<code>FD_CLOEXEC</code>","<code>ECONNABORTED</code>","<code>ECONNREFUSED</code>","<code>ECONNRESET</code>","Sets the offset to the current position plus the specified …","<code>EDEADLK</code>","<code>EDESTADDRREQ</code>","<code>EDOM</code>","<code>EDQUOT</code>","<code>O_*</code> constants for use with <code>dup2</code>.","<code>POLLERR</code>","<code>EEXIST</code>","Sets the offset to the size of this object plus the …","The error type for <code>rustix</code> APIs.","<code>EFAULT</code>","<code>EFBIG</code>","<code>EFTYPE</code>","<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.","<code>EHOSTDOWN</code>","<code>EHOSTUNREACH</code>","<code>POLLHUP</code>","<code>EIDRM</code>","<code>EILSEQ</code>","<code>POLLIN</code>","<code>EINPROGRESS</code>","<code>EINTR</code>","<code>EINVAL</code>","<code>EIO</code>","<code>EISCONN</code>","<code>EISDIR</code>","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","<code>ELOOP</code>","<code>EMFILE</code>","<code>EMLINK</code>","<code>EMSGSIZE</code>","<code>EMULTIHOP</code>","<code>ENAMETOOLONG</code>","<code>ENEEDAUTH</code>","<code>ENETDOWN</code>","<code>ENETRESET</code>","<code>ENETUNREACH</code>","<code>ENFILE</code>","<code>ENOATTR</code>","<code>ENOBUFS</code>","<code>ENODATA</code>","<code>ENODEV</code>","<code>ENOENT</code>","<code>ENOEXEC</code>","<code>ENOLCK</code>","<code>ENOLINK</code>","<code>ENOMEM</code>","<code>ENOMSG</code>","<code>ENOPROTOOPT</code>","<code>ENOSPC</code>","<code>ENOSR</code>","<code>ENOSTR</code>","<code>ENOSYS</code>","<code>ENOTBLK</code>","<code>ENOTCONN</code>","<code>ENOTDIR</code>","<code>ENOTEMPTY</code>","<code>ENOTRECOVERABLE</code>","<code>ENOTSOCK</code>","<code>ENOTSUP</code>","<code>ENOTTY</code>","<code>POLLNVAL</code>","<code>ENXIO</code>","<code>EOPNOTSUPP</code>","<code>POLLOUT</code>","<code>EOVERFLOW</code>","<code>EOWNERDEAD</code>","<code>EPERM</code>","<code>EPFNOSUPPORT</code>","<code>EPIPE</code>","<code>PIPE_BUF</code>—The maximum length at which writes to a pipe …","<code>POLLPRI</code>","<code>EPROCLIM</code>","<code>EPROCUNAVAIL</code>","<code>EPROGMISMATCH</code>","<code>EPROGUNAVAIL</code>","<code>EPROTO</code>","<code>EPROTONOSUPPORT</code>","<code>EPROTOTYPE</code>","<code>struct pollfd</code>—File descriptor and flags for use with <code>poll</code>…","<code>POLL*</code> flags for use with <code>poll</code>.","<code>ERANGE</code>","<code>POLLRDBAND</code>","<code>POLLRDNORM</code>","<code>EREMOTE</code>","<code>EROFS</code>","<code>ERPCMISMATCH</code>","A specialized <code>Result</code> type for <code>rustix</code> APIs.","<code>ESHUTDOWN</code>","<code>ESOCKTNOSUPPORT</code>","<code>ESPIPE</code>","<code>ESRCH</code>","<code>ESTALE</code>","Enumeration of possible methods to seek within an I/O …","Sets the offset to the provided number of bytes.","<code>ETIME</code>","<code>ETIMEDOUT</code>","<code>E2BIG</code>","<code>ETOOMANYREFS</code>","<code>ETXTBSY</code>","<code>EUSERS</code>","<code>EWOULDBLOCK</code>","<code>POLLWRBAND</code>","<code>POLLWRNORM</code>","<code>EXDEV</code>","Advance the internal cursor of the slice.","Advance the internal cursor of the slice.","Advance a slice of slices.","Advance a slice of slices.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","Clears the ready events.","","","","","","","","","","","","","","","<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …","<code>dup2(fd, new)</code>—Changes the file description of a file …","<code>dup3(fd, new, flags)</code>—Changes the file description of a …","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …","<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.","<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Constructs a new <code>PollFd</code> holding <code>fd</code> and <code>events</code>.","Extract an <code>Errno</code> value from a <code>std::io::Error</code>.","","","","Construct an <code>Errno</code> from a raw OS error number.","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>ioctl(fd, FIOCLEX)</code>—Set the close-on-exec flag.","<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …","<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …","<code>ioctl(fd, TIOCEXCL)</code>—Enables exclusive mode on a terminal.","<code>ioctl(fd, TIOCNXCL)</code>—Disables exclusive mode on a …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Shorthand for <code>std::io::Error::from(self).kind()</code>.","Constructs a new <code>PollFd</code> holding <code>fd</code> and <code>events</code>.","Creates a new <code>IoSliceMut</code> wrapping a byte slice.","Creates a new <code>IoSlice</code> wrapping a byte slice.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","<code>pipe()</code>—Creates a pipe.","<code>poll(self.fds, timeout)</code>","<code>pread(fd, buf, offset)</code>—Reads from a file at a given …","<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …","","<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.","<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …","Extract the raw OS error number from this error.","<code>STDERR_FILENO</code>—Standard error, raw.","<code>STDIN_FILENO</code>—Standard input, raw.","<code>STDOUT_FILENO</code>—Standard output, raw.","<code>read(fd, buf)</code>—Reads from a stream.","<code>readv(fd, bufs)</code>—Reads from a stream into multiple …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Call <code>f</code> until it either succeeds or fails other than …","Returns the ready events.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the contained file descriptor to <code>fd</code>.","<code>STDERR_FILENO</code>—Standard error, borrowed.","<code>STDIN_FILENO</code>—Standard input, borrowed.","<code>STDOUT_FILENO</code>—Standard output, borrowed.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","<code>STDERR_FILENO</code>—Standard error, owned.","<code>STDIN_FILENO</code>—Standard input, owned.","<code>STDOUT_FILENO</code>—Standard output, owned.","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","<code>write(fd, buf)</code>—Writes to a stream.","<code>writev(fd, bufs)</code>—Writes to a stream from multiple …","","","","<code>TC*</code> values for use with <code>tcflow</code>.","<code>B0</code>","<code>B110</code>","<code>B115200</code>","<code>B1200</code>","<code>B134</code>","<code>B150</code>","<code>B1800</code>","<code>B19200</code>","<code>B200</code>","<code>B230400</code>","<code>B2400</code>","<code>B300</code>","<code>B38400</code>","<code>B4800</code>","<code>B50</code>","<code>B57600</code>","<code>B600</code>","<code>B75</code>","<code>B9600</code>","<code>TCSADRAIN</code>—Make the change after all output has been …","<code>TCSAFLUSH</code>—Discard any pending input and then make the …","<code>ICANON</code>—A flag for the <code>c_lflag</code> field of <code>Termios</code> indicating","<code>TCIFLUSH</code>—Flush data received but not read.","<code>TCIOFLUSH</code>—<code>IFlush</code> and <code>OFlush</code> combined.","<code>TCIOFF</code>—Transmits a STOP byte.","<code>TCION</code>—Transmits a START byte.","<code>TCSANOW</code>—Make the change immediately.","<code>TCOFLUSH</code>—Flush data written but not transmitted.","<code>TCOOFF</code>—Suspend output.","<code>TCOON</code>—Restart suspended output.","<code>TCSA*</code> values for use with <code>tcsetattr</code>.","<code>TC*</code> values for use with <code>tcflush</code>.","<code>speed_t</code>—A return type for <code>cfsetspeed</code> and similar.","<code>tcflag_t</code>—A type for the flags fields of <code>Termios</code>.","<code>struct termios</code> for use with <code>tcgetattr</code>.","<code>VDISCARD</code>","<code>VEOF</code>","<code>VEOL</code>","<code>VEOL2</code>","<code>VERASE</code>","<code>VINTR</code>","<code>VKILL</code>","<code>VLNEXT</code>","<code>VMIN</code>","<code>VQUIT</code>","<code>VREPRINT</code>","<code>VSTART</code>","<code>VSTOP</code>","<code>VSUSP</code>","<code>VTIME</code>","<code>VWERASE</code>","<code>struct winsize</code> for use with <code>tcgetwinsize</code>.","","","","","","","<code>cfgetispeed(termios)</code>","<code>cfgetospeed(termios)</code>","<code>cfmakeraw(termios)</code>","<code>cfsetispeed(termios, speed)</code>","<code>cfsetospeed(termios, speed)</code>","<code>cfsetspeed(termios, speed)</code>","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>isatty(fd)</code>—Tests whether a file descriptor refers to a …","Translate from a <code>Speed</code> code to a speed value <code>u32</code>.","<code>tcdrain(fd, duration)</code>—Wait until all pending output has …","<code>tcflow(fd, action)</code>—Suspend or resume transmission or …","<code>tcflush(fd, queue_selector)</code>—Wait until all pending …","<code>tcgetattr(fd)</code>—Get terminal attributes.","<code>tcgetpgrp(fd)</code>—Get the terminal foreground process group.","<code>tcgetsid(fd)</code>—Return the session ID of the current …","<code>tcgetwinsize(fd)</code>—Get the current terminal window size.","<code>tcsendbreak(fd, 0)</code>—Transmit zero-valued bits.","<code>tcsetattr(fd)</code>—Set terminal attributes.","<code>tcsetpgrp(fd, pid)</code>—Set the terminal foreground process …","<code>tcsetwinsize(fd)</code>—Set the current terminal window size.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,56,2,1,2,1,2,1,70,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,71,2,2,2,2,2,1,2,2,72,2,2,2,2,2,1,1,2,1,2,1,2,1,2,1,0,0,0,0,22,22,22,23,22,23,22,22,25,23,26,22,25,23,26,0,22,25,26,22,25,23,26,22,23,22,23,22,25,26,22,22,25,23,26,22,25,25,23,26,26,22,22,22,22,22,25,26,23,23,23,23,22,22,22,22,22,23,22,23,22,25,26,22,22,22,23,22,22,25,23,22,25,22,23,25,26,23,23,22,25,23,26,23,25,26,23,22,25,26,22,25,26,22,25,23,26,53,53,53,53,53,53,53,53,53,53,53,53,53,48,53,53,53,54,53,53,53,53,0,47,53,54,0,53,53,53,0,53,53,47,53,53,47,53,53,53,53,53,53,0,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,47,53,53,47,53,53,53,53,53,0,47,53,53,53,53,53,53,53,0,0,53,47,47,53,53,53,0,53,53,53,53,53,0,54,53,53,53,53,53,53,53,47,47,53,45,46,45,46,47,48,49,50,50,50,50,50,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,53,47,50,48,49,45,46,54,53,47,50,48,49,45,46,54,50,53,47,50,48,49,46,54,53,47,50,48,49,46,54,0,47,48,49,47,48,49,47,48,49,45,46,45,47,48,49,0,0,0,47,48,49,53,47,48,49,54,47,48,49,0,0,0,53,53,47,47,47,47,47,50,48,48,48,48,48,49,49,49,49,49,45,46,54,53,47,50,48,49,45,46,54,47,48,49,47,48,49,47,48,49,50,53,47,48,49,53,53,47,48,49,47,48,49,47,48,49,47,48,49,53,47,50,48,49,45,46,54,0,0,0,0,0,47,48,49,47,48,49,53,50,45,46,47,48,49,47,48,49,0,0,0,0,53,0,0,53,0,0,0,0,0,47,48,49,0,50,47,48,49,50,0,0,0,47,48,49,47,48,49,47,48,49,0,0,0,53,47,50,48,49,46,54,53,47,48,49,53,47,50,48,49,45,46,54,53,47,50,48,49,45,46,54,53,47,50,48,49,45,46,54,47,48,49,0,0,73,74,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,0,66,66,67,67,65,66,67,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,66,67,65,66,67,0,0,0,0,0,0,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,0,0,0,0,0,0,0,0,0,0,0,0,0,65,66,67,65,66,67,65,66,67,65,66,67],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[1,1],[[],1],[[],1],[[],3],[[],3],[[],4],[2,4],[1,4],[[],4],[[],4],[[],4],[[],4],[[],1],[[],1],[[],5],[[],5],[[]],[[]],[[]],[[]],[4,1],[1,1],[[]],[2],[[2,6],[[8,[7]]]],[[1,6],[[8,[7]]]],[9,2],[[]],[10,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[[]],[2],[2],[[]],[[]],[4],[4,2],[4],[4],[2],[[]],[[]],[[],2],[[],2],[[],4],[2,4],[[],4],[[],4],[[],2],[2,19],[1,19],[[]],[2,[[8,[2,20]]]],[1,[[8,[2,20]]]],[[],8],[[],8],[[],8],[[],8],[[],21],[[],21],0,0,0,0,[22],[22],[22,23],[23,24],[22,23],[23,23],[[]],[22,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[22,22],[25,25],[26,26],[[]],[[]],[[23,22]],[[]],[[22,22],27],[[23,23],27],[[],22],[[],23],[22,23],[25,28],[26,28],[22],[[22,22],19],[[25,25],19],[[23,23],19],[[26,26],19],[[22,6],[[8,[7]]]],[[25,6],[[8,[7]]]],[[25,6],[[8,[7]]]],[[23,6],[[8,[7]]]],[[26,6],[[8,[7]]]],[[26,6],[[8,[7]]]],[[[30,[23,29]]],22],[[[31,[23]]],22],[[[33,[32,29]]],22],[23,22],[[]],[[]],[[]],[[],[[8,[23,34]]]],[[],[[8,[23,26]]]],[[],23],[24,23],[24,22],[[[33,[35,29]]],22],[[[33,[35,29]]],[[8,[22,36]]]],[[[33,[35,29]]],22],[22],[23],[[22,37],23],[[23,[39,[38]]],23],[[]],[[]],[[]],[22,[[30,[23,29]]]],[22,[[33,[35,29]]]],[22,[[33,[35,29]]]],[[[30,[23,29]]],22],[22,24],[22,[[8,[40,41]]]],[25,[[33,[35,29]]]],[23,19],[[],[[8,[22,25]]]],[25,38],[[22,22],[[42,[27]]]],[[23,23],[[42,[27]]]],[43],[43],[23],[23],[[]],[[]],[23,22],[[]],[23,[[8,[28,44]]]],[[],40],[[],40],[23,[[31,[28]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],21],[[],21],[[],21],[[],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[45,38]],[[46,38]],[38],[38],[[],47],[[],48],[[],49],[50,1],[[],1],[[],3],[[],1],[[],5],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47]],[[48,48]],[[49,49]],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47]],[[48,48]],[[49,49]],[47,51],[48,52],[49,52],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47]],[[48,48]],[[49,49]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50],[53,53],[47,47],[50,50],[48,48],[49,49],[46,46],[54,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55],[[47,47],27],[[48,48],27],[[49,49],27],[47,47],[48,48],[49,49],[[47,47],19],[[48,48],19],[[49,49],19],[45],[46],[45],[[47,47],47],[[48,48],48],[[49,49],49],[56,[[57,[2]]]],[[56,2],57],[[56,2,49],57],[[],47],[[],48],[[],49],[[53,53],19],[[47,47],19],[[48,48],19],[[49,49],19],[[54,54],19],[[47,58]],[[48,58]],[[49,58]],[[56,55],[[57,[2]]]],[56,[[57,[48]]]],[[56,48],57],[[53,6],59],[[53,6],59],[[47,6],59],[[47,6],59],[[47,6],59],[[47,6],59],[[47,6],59],[[50,6],59],[[48,6],59],[[48,6],59],[[48,6],59],[[48,6],59],[[48,6],59],[[49,6],59],[[49,6],59],[[49,6],59],[[49,6],59],[[49,6],59],[[45,6],[[8,[7]]]],[[46,6],[[8,[7]]]],[[54,6],[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,[[42,[47]]]],[52,[[42,[48]]]],[52,[[42,[49]]]],[51,47],[52,48],[52,49],[51,47],[52,48],[52,49],[[1,47],50],[20,[[42,[53]]]],[58,47],[58,48],[58,49],[4,53],[53],[47],[48],[49],[[47,47]],[[48,48]],[[49,49]],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],19],[[48,48],19],[[49,49],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[56,57],[[56,19],57],[56,[[57,[60]]]],[56,57],[56,57],[47,19],[48,19],[49,19],[47,19],[48,19],[49,19],[53,61],[47,50],[[],45],[[],46],[47,47],[48,48],[49,49],[[47,47],[[42,[27]]]],[[48,48],[[42,[27]]]],[[49,49],[[42,[27]]]],[[],57],[4,[[57,[38]]]],[[56,60],[[57,[38]]]],[[56,60],[[57,[38]]]],[43],[[56,60],[[57,[38]]]],[[56,60],[[57,[38]]]],[53,4],[[],55],[[],55],[[],55],[56,[[57,[38]]]],[56,[[57,[38]]]],[[47,47]],[[48,48]],[[49,49]],[62,57],[50,47],[[47,47,19]],[[48,48,19]],[[49,49,19]],[50],[[],1],[[],1],[[],1],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47]],[[48,48]],[[49,49]],[[47,47],47],[[48,48],48],[[49,49],49],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[47,47]],[[48,48]],[[49,49]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[47,47],47],[[48,48],48],[[49,49],49],[56,[[57,[38]]]],[56,[[57,[38]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[63,64],[63,64],[63],[[63,64],57],[[63,64],57],[[63,64],57],[65,65],[66,66],[67,67],[[]],[[]],[[]],[[65,65],19],[[66,66],19],[[67,67],19],[[65,6],59],[[66,6],59],[[67,6],59],[[]],[[]],[[]],[65],[66],[67],[[]],[[]],[[]],[56,19],[64,[[42,[68]]]],[56,57],[[56,67],57],[[56,66],57],[56,[[57,[63]]]],[56,[[57,[0]]]],[56,[[57,[0]]]],[56,[[57,[69]]]],[56,57],[[56,65,63],57],0,[[56,69],57],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],21],[[],21],[[],21]],"p":[[3,"BorrowedFd"],[3,"OwnedFd"],[3,"FilelikeView"],[15,"i32"],[3,"SocketlikeView"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"TcpListener"],[3,"UnixStream"],[3,"ChildStderr"],[3,"UnixListener"],[3,"UdpSocket"],[3,"TcpStream"],[3,"File"],[3,"UnixDatagram"],[3,"ChildStdout"],[3,"ChildStdin"],[15,"bool"],[3,"Error"],[3,"TypeId"],[3,"CString"],[3,"CStr"],[15,"i8"],[3,"NulError"],[3,"FromBytesWithNulError"],[4,"Ordering"],[15,"str"],[3,"Global"],[3,"Box"],[4,"Cow"],[3,"NonZeroU8"],[3,"Vec"],[3,"FromBytesUntilNulError"],[15,"u8"],[3,"FromVecWithNulError"],[3,"RangeFull"],[15,"usize"],[3,"RangeFrom"],[3,"String"],[3,"IntoStringError"],[4,"Option"],[3,"Demand"],[3,"Utf8Error"],[3,"IoSliceMut"],[3,"IoSlice"],[3,"PollFlags"],[3,"FdFlags"],[3,"DupFlags"],[3,"PollFd"],[6,"c_short"],[6,"c_int"],[3,"Errno"],[4,"SeekFrom"],[6,"RawFd"],[8,"AsFd"],[6,"Result"],[8,"IntoIterator"],[6,"Result"],[15,"u64"],[4,"ErrorKind"],[8,"FnMut"],[6,"Termios"],[6,"Speed"],[4,"OptionalActions"],[4,"QueueSelector"],[4,"Action"],[15,"u32"],[6,"Winsize"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[13,"Start"],[13,"End"],[13,"Current"]],"a":{"2big":[297],"acces":[182],"errno":[208],"f_dupfd_cloexec":[399],"f_getfd":[400],"f_setfd":[401],"fd_cloexec":[467],"fioclex":[467],"fionbio":[468],"fionread":[469],"pollfd":[279],"stderr_fileno":[496,510,522],"stdin_fileno":[497,511,523],"stdout_fileno":[498,512,524],"tcflsh":[658],"tcgets":[659],"tcsbrk":[663],"tcsets":[664],"tcxonc":[657],"tiocexcl":[470],"tiocgpgrp":[660],"tiocgsid":[661],"tiocgwinsz":[662],"tiocnxcl":[471],"tiocspgrp":[665],"tiocswinsz":[666]}},\
"ryu":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,0,11,11,11,5,5],"n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":["ryu","","","","","","","","","","","","","","","ryu::raw",""],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[0,0,[[]],[[]],[1,1],[[],1],[[1,2],3],[[1,2],3],[[]],[[]],[[],1],0,[[],4],[[],4],[[],5],[[6,7],8],[[9,7],8]],"p":[[3,"Buffer"],[8,"Float"],[15,"str"],[4,"Result"],[3,"TypeId"],[15,"f32"],[15,"u8"],[15,"usize"],[15,"f64"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,2,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,2,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","0","0","0","0","0","0","0","0","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","provide","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::Unexpected","","","","","","","","serde::de::valueserde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","","","","","","","","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,63,64,64,0,64,64,64,64,64,64,64,0,64,64,64,0,65,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,63,64,0,0,66,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,20,20,20,0,0,0,0,67,20,0,0,63,68,69,70,71,0,20,0,0,20,0,20,20,20,20,20,0,20,0,20,20,20,0,20,20,20,72,73,70,0,0,19,20,19,20,19,20,19,20,74,19,65,72,19,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,74,20,73,19,23,23,19,19,20,20,19,20,19,20,67,74,74,74,63,74,71,71,68,68,69,69,69,69,69,69,68,69,71,19,20,20,19,20,19,20,71,19,20,71,74,74,0,70,70,73,19,73,73,73,73,19,73,73,19,73,73,19,73,19,73,73,73,19,73,73,19,73,19,73,19,73,19,73,19,73,19,73,73,19,73,73,73,19,73,73,19,75,76,77,78,79,80,81,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,37,37,37,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,36,54,37,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,36,54,36,36,36,37,36,36,54,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,37,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,29,30,31,32,33,56,0,64,83,84,85,86,87,88,89,0,64,83,84,85,86,87,88,89,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,62,62,64,64,64,90,83,84,85,86,87,88,89,62,62,62,62,62,62,62,62,62,64,66,64,64,64,83,84,62,62,87,64,64,85,86,88,89,62,62,62,62,64,64,64,64,64,87,62,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,87,62,88,89,62,62,62],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[2,1],[3,1],[[2,3],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],0,[[],4],[[],4],0,0,[[],1],[4,1],[[],1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[[[13,[3]]],1],[2,1],[[2,14,2],1],[[],1],[[[13,[3]]],1],[[],1],[2,1],[[2,3],1],[[2,14,2,3],1],[3,1],[[2,3],1],[[2,14,2,3],1],[15,1],[16,1],[14,1],[17,1],[18,1],[[],1],[2,1],[[2,14,2],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[19,19],[20,20],[[]],[[]],[[]],[[],19],[[],1],[[],1],[[],[[1,[19]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[2,1],[3,1],[[2,3],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[2],[[20,20],4],[21,22],[[19,21],22],[21,22],[[23,21],22],[[19,21],22],[21,[[1,[24]]]],[[20,21],22],[[20,21],22],[[]],[[]],[[]],[[]],[[]],[[3,23]],[[20,23]],[[20,23]],[[],4],[2],[[],1],[[],1],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],1],[[],1],[[],[[13,[3]]]],[[],[[13,[3]]]],[[],1],[[]],[[]],[[],25],[[],1],[[],1],[[],1],[[],1],[3,1],[[],26],[[],26],[[],1],[2],[2],0,[[],1],[[],1],[4,1],[[19,4],1],[[],1],[2,1],[[[27,[18]]],1],[[],1],[19,1],[5,1],[[],1],[19,1],[6,1],[7,1],[[19,7],1],[8,1],[[19,8],1],[9,1],[10,1],[11,1],[[19,11],1],[12,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[2,1],[[19,2],1],[25,1],[15,1],[[19,15],1],[16,1],[14,1],[17,1],[[19,17],1],[18,1],[[],1],[19,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[[[54,[53,53]]],[[54,[53,53]]]],[[[55,[53]]],[[55,[53]]]],[[[56,[53]]],[[56,[53]]]],[[[57,[53]]],[[57,[53]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[37,2],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[[28,3],1],[[29,3],1],[[30,3],1],[[31,3],1],[[32,3],1],[[33,3],1],[[34,3],1],[[35,3],1],[[36,3],1],[[38,3],1],[[39,3],1],[[40,3],1],[[41,3],1],[[42,3],1],[[43,3],1],[[44,3],1],[[45,3],1],[[46,3],1],[[47,3],1],[[48,3],1],[[49,3],1],[[50,3],1],[[51,3],1],[[52,3],1],[[54,3],1],[[55,3],1],[[56,3],1],[[57,3],1],[[28,2,3],1],[[29,2,3],1],[[30,2,3],1],[[31,2,3],1],[[32,2,3],1],[[33,2,3],1],[[34,2,3],1],[[35,2,3],1],[[36,2,3],1],[[38,2,3],1],[[39,2,3],1],[[40,2,3],1],[[41,2,3],1],[[42,2,3],1],[[43,2,3],1],[[44,2,3],1],[[45,2,3],1],[[46,2,3],1],[[47,2,3],1],[[48,2,3],1],[[49,2,3],1],[[50,2,3],1],[[51,2,3],1],[[52,2,3],1],[[54,2,3],1],[[55,2,3],1],[[56,2,3],1],[[57,2,3],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[36,1],[54,1],[[37,37],4],[[28,21],22],[[29,21],22],[[30,21],22],[[31,21],22],[[32,21],22],[[33,21],22],[[34,21],22],[[35,21],22],[[36,21],22],[[37,21],22],[[37,21],22],[[38,21],22],[[39,21],22],[[40,21],22],[[41,21],22],[[42,21],22],[[43,21],22],[[44,21],22],[[45,21],22],[[46,21],22],[[47,21],22],[[48,21],22],[[49,21],22],[[50,21],22],[[51,21],22],[[52,21],22],[[54,21],22],[[[55,[58]],21],22],[[[56,[58]],21],22],[[[57,[58]],21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[14,29],[2,30],[2,31],[25,32],[[[59,[2]]],33],[[],34],[[],35],[[],36],[4,38],[12,39],[9,40],[10,41],[11,42],[60,43],[18,44],[16,45],[17,46],[3,47],[6,48],[7,49],[5,50],[8,51],[15,52],[[],54],[[],55],[[],56],[[],57],[36,[[1,[13]]]],[54,[[1,[13]]]],[36,[[1,[13]]]],[36,[[1,[13]]]],[36,1],[61],[36,[[13,[3]]]],[36,[[13,[3]]]],[54,[[13,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[29,1],[30,1],[31,1],[32,1],[33,1],[56,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[[],1],[[],1],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[[]],[[]],[[],4],[[],1],[4,1],[[],1],[5,1],[[],1],[[],1],[62,1],[62,1],[[],1],[6,1],[7,1],[[],1],[[],1],[2,1],[2,1],[[62,2],1],[[62,2],1],[62,1],[62,1],[8,1],[9,1],[10,1],[11,1],[12,1],[[],1],[62,1],[[[13,[3]]],1],[2,1],[[2,14,2],1],[[],1],[[[13,[3]]],1],[[],1],[2,1],[[2,3],1],[[2,14,2,3],1],[3,1],[[2,3],1],[[2,14,2,3],1],[15,1],[16,1],[14,1],[17,1],[18,1],[[],1],[2,1],[[2,14,2],1],[[],1],[62,1],[2,1],[2,1],[[],1],[[],1],[[],26]],"p":[[4,"Result"],[15,"str"],[15,"usize"],[15,"bool"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[3,"IgnoredAny"],[4,"Unexpected"],[3,"Formatter"],[6,"Result"],[8,"Expected"],[3,"Error"],[3,"String"],[3,"TypeId"],[3,"Vec"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[8,"Clone"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[3,"EnumAccessDeserializer"],[8,"Debug"],[4,"Cow"],[15,"isize"],[3,"Demand"],[3,"Impossible"],[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[8,"Error"],[13,"Bool"],[13,"Unsigned"],[13,"Signed"],[13,"Float"],[13,"Char"],[13,"Str"],[13,"Bytes"],[13,"Other"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[8,"Error"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"serde_json":{"doc":"Serde JSON","tn":["Array","Bool","Deserializer","Error","Map","Null","Number","Number","Object","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_from","clone_into","clone_into","collect_str","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_iter","into_iter","into_iter","into_iter","invalid_type","json","map","next","provide","ser","serialize","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","0","0","0","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","into","into","into","into_iter","new","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","0","0","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_char_escape","write_f32","write_f64","write_i128","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u128","write_u16","write_u32","write_u64","write_u8","0","Array","Bool","Index","Map","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0"],"q":["serde_jsonserde_json::Value","","","","","serde_json::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::error","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map::Entry","","serde_json::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::ser::CharEscape","serde_json::valueserde_json::value::Value","","","",""],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","Parses a JSON string as bytes. Note that this function …","","","","","","Parses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a newtype struct as the underlying value.","","","Parses a <code>null</code> as a None, and any other values as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert a <code>Vec</code> to <code>Value</code>","","","Convert 32-bit floating point number to <code>Value</code>","Convert 64-bit floating point number to <code>Value</code>","Convert boolean to <code>Value</code>","Convert <code>String</code> to <code>Value</code>","Convert string slice to <code>Value</code>","","Returns the argument unchanged.","Convert copy-on-write string to <code>Value</code>","Convert <code>Number</code> to <code>Value</code>","Convert map (with string keys) to <code>Value</code>","","","","Convert a slice to <code>Value</code>","Convert <code>()</code> to <code>Value</code>","","","","","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","","Serialize a Rust data structure into JSON data.","","","","","","","","","","","","","","Serialize newtypes without an object wrapper.","","","","","","","","","","","","","","","","","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","","","","","","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from an IO stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","","","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as <code>\\\\r</code>…","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it human …","An escaped quote <code>&quot;</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written to","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a string.","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","","","","","","",""],"i":[2,2,0,0,0,2,0,2,2,0,0,0,2,0,9,35,7,3,4,2,9,35,7,3,4,2,3,2,3,3,2,4,7,7,0,3,2,3,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,7,7,3,2,2,9,35,7,3,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,0,0,0,2,0,3,2,3,2,9,35,7,3,4,2,2,35,3,3,3,7,0,0,35,7,0,3,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,3,2,0,7,2,0,0,0,0,0,0,9,35,7,3,4,2,9,35,7,3,4,2,9,35,7,3,4,2,0,62,63,64,65,66,0,0,0,0,0,0,43,44,45,43,44,45,35,9,43,44,45,0,9,0,9,0,9,43,44,45,9,9,35,43,44,45,43,44,45,43,44,45,43,44,45,0,46,46,0,46,0,46,46,46,7,46,46,7,46,46,46,46,7,7,7,7,7,46,46,46,46,0,0,0,0,0,0,47,0,47,0,0,0,47,3,47,49,48,50,51,53,52,54,55,47,49,48,50,51,53,52,54,55,3,3,3,47,49,48,50,51,53,52,54,55,3,48,3,3,48,3,49,48,47,49,48,50,51,53,52,54,55,50,51,53,52,54,55,48,3,3,3,47,49,48,3,3,50,51,53,52,54,55,3,50,51,53,52,54,55,50,51,53,52,54,55,47,47,3,48,3,3,50,51,53,52,54,55,47,49,48,50,51,53,52,54,55,47,49,48,50,51,53,52,54,55,47,49,48,50,51,53,52,54,55,3,3,3,67,68,59,59,59,0,0,59,0,59,0,59,59,0,59,59,69,57,69,57,69,57,69,57,69,57,69,59,58,57,59,58,57,58,57,58,57,57,69,57,69,57,69,57,69,69,57,69,58,57,59,58,57,59,58,57,4,4,57,4,58,57,0,0,0,0,0,0,59,58,57,59,58,57,59,58,57,4,57,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,2,2,0,0,2,0,2,2,0,2,0,2,2,2,2,30,2,30,2,2,2,2,2,30,60,30,60,30,30,30,60,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,60,30,30,30,30,30,30,30,30,30,30,30,30,30,0,2,2,30,60,30,2,2,2,30,2,30,2,2,2,2,2,30,2,2,30,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,2,30,30,0,60,30,60,30,60,30,62,63,64,65,66],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]],[[3,[1,2]]]],[2,2],[[[3,[1,2]],[3,[1,2]]]],[[]],[[]],[4,5],[6,7],[6,7],0,[[],[[3,[1,2]]]],[[],2],[[],[[8,[[3,[1,2]]]]]],[[],[[8,[2]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[[9,10],5],[[2,10],[[8,[7]]]],[[2,10],[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[[9,10],5],[[2,10],[[8,[7]]]],[[2,10],[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[[9,10],5],[[2,10],[[8,[7]]]],[[2,10],[[8,[7]]]],[[9,11],5],[[2,11],[[8,[7]]]],[[2,11],[[8,[7]]]],[[9,10,11],5],[[2,10,11],[[8,[7]]]],[[2,10,11],[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[9,5],[2,[[8,[7]]]],[2,[[8,[7]]]],[[9,10],5],[[2,10],[[8,[7]]]],[[2,10],[[8,[7]]]],[[[3,[1,2]],[3,[1,2]]],12],[[2,13],12],[[2,14],12],[[2,12],12],[[2,15],12],[[2,13],12],[[2,1],12],[[2,13],12],[[2,12],12],[[2,16],12],[[2,16],12],[[2,16],12],[[2,12],12],[[2,17],12],[[2,18],12],[[2,18],12],[[2,17],12],[[2,2],12],[[2,18],12],[[2,19],12],[[2,19],12],[[2,10],12],[[2,10],12],[[2,19],12],[[2,17],12],[[2,20],12],[[2,20],12],[[2,20],12],[[2,15],12],[[2,14],12],[[2,15],12],[[2,14],12],[[2,21],12],[[2,21],12],[[2,21],12],[[2,22],12],[[2,22],12],[[2,22],12],[[2,23],12],[[2,23],12],[[2,11],12],[[2,11],12],[[2,23],12],[[2,11],12],0,[[[3,[1,2]]]],[[7,24],25],[[7,24],25],[[[3,[1,2]],24],[[8,[26]]]],[[2,24],25],[[2,24],25],[[]],[[]],[[]],[[]],[[]],[22,2],[[[28,[[27,[2]]]]],2],[21,2],[11,2],[23,2],[17,2],[12,2],[1,2],[10,2],[20,2],[[]],[[[29,[10]]],2],[30,2],[[[3,[1,2]]],2],[14,2],[31,2],[19,2],[[],2],[[],2],[18,2],[16,2],[13,2],[15,2],[[],[[3,[1,2]]]],[32,2],[32,2],[[],5],[[],5],[10,5],[10,[[8,[2,7]]]],[2,[[8,[7]]]],[[[3,[1,2]]],2],[2,2],[[[3,[1,2]]],2],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[2],[[]],[3],[[[3,[1,2]]]],[3],[[33,34],7],0,0,[35,[[31,[5]]]],[36],0,[[[3,[1,2]]],8],[2,8],[[4,12],5],[4,5],[[4,37],5],[[4,23],5],[[4,17],5],[[4,38],5],[[4,13],5],[[4,16],5],[[4,18],5],[[4,15],5],[[4,[31,[11]]],5],[[4,10],5],[[4,10,21,10],5],[4,5],[[4,[31,[11]]],5],[4,5],[[4,10],5],[[4,10,11],5],[[4,10,21,10,11],5],[[4,11],5],[[4,10,11],5],[[4,10,21,10,11],5],[[4,39],5],[[4,14],5],[[4,21],5],[[4,22],5],[[4,20],5],[4,5],[[4,10],5],[[4,10,21,10],5],[7,[[31,[40]]]],[[]],[[]],[[],[[5,[1]]]],[[],1],[[],1],[[],[[5,[1]]]],[[],[[8,[2,7]]]],[[],[[5,[[28,[20]]]]]],[[],[[5,[[28,[20]]]]]],[[],5],[[],5],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[35,11],[[[9,[42]]],5],[[]],[[]],[[]],[[],5],[[],[[9,[43]]]],[[],5],[[],[[9,[44]]]],[10,5],[10,[[9,[45]]]],[[]],[[]],[[]],[[[9,[42]]],[[35,[42]]]],[[],9],[[],35],[[],43],[[],44],[10,45],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],41],[[],41],[[],41],0,0,0,0,0,0,0,[[]],[[]],[7,46],[46,46],[[]],[7,11],[[46,46],12],[[46,24],25],[[]],[[]],[7,12],[7,12],[7,12],[7,12],[7,11],[[]],[[],8],[[],8],[[],41],0,0,0,0,0,0,0,0,0,0,0,0,[47,47],[[[3,[1,2]],[3,[1,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]]],[[[3,[1,2]]],12],[[[3,[1,2]]],47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]],[[31,[2]]]],[48,2],[[[3,[1,2]]],31],[[[3,[1,2]]],[[31,[2]]]],[48,2],[[[3,[1,2]],1,2],[[31,[2]]]],[[49,2],2],[[48,2],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,2],[[[3,[1,2]]],12],[[[3,[1,2]]],50],[[[3,[1,2]]],51],[47,1],[49,1],[48,1],[[[3,[1,2]]],52],[[[3,[1,2]]],11],[50,11],[51,11],[53,11],[52,11],[54,11],[55,11],[[],[[3,[1,2]]]],[50,31],[51,31],[53,31],[52,31],[54,31],[55,31],[50,31],[51,31],[53,31],[52,31],[54,31],[55,31],[[47,2],2],[47,2],[[[3,[1,2]]],[[31,[2]]]],[48,2],[[[3,[1,2]]],31],[[[3,[1,2]]]],[50],[51],[53],[52],[54],[55],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[[3,[1,2]]],54],[[[3,[1,2]]],55],[11,[[3,[1,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],56],[57,56],[12,56],[[57,12],56],[[],56],[57,56],[12,56],[[57,12],56],[[],56],[57,56],[[],56],[[]],[[]],[[]],[[]],[[]],[[]],[58,58],[57,57],[[]],[[]],[[],57],[[],56],[57,56],[[],56],[57,56],[[],56],[57,56],[[],56],[[],56],[57,56],[[],56],[[58,24],25],[[57,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[4],[[],4],[[],57],[[],[[4,[57]]]],[[]],[[]],[[],[[5,[1]]]],[[],[[5,[1]]]],[[],[[5,[[28,[20]]]]]],[[],[[5,[[28,[20]]]]]],[[],5],[[],5],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],41],[[],41],[[],41],[[],4],[[],57],[12,56],[59,56],[23,56],[17,56],[38,56],[13,56],[16,56],[18,56],[15,56],[[],56],[10,56],[10,56],[10,56],[39,56],[14,56],[21,56],[22,56],[20,56],0,0,0,0,0,0,0,0,0,0,0,0,[2,[[31,[28]]]],[2,[[31,[28]]]],[2,[[31,[12]]]],[2,[[31,[17]]]],[30,[[31,[17]]]],[2,[[31,[18]]]],[30,[[31,[18]]]],[2,31],[2,[[31,[3]]]],[2,[[31,[3]]]],[2,[[31,[10]]]],[2,[[31,[22]]]],[30,[[31,[22]]]],[[]],[[]],[[]],[[]],[30,30],[[]],[60,[[5,[2]]]],[[],[[8,[30]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,8],[30,8],[30,8],[30,8],[30,8],[30,8],[30,8],[30,8],[[30,10],8],[[30,10],8],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,8],[30,8],[30,8],[30,8],[30,8],[30,8],[[30,10],8],[[30,10],8],[30,8],[30,8],[30,8],[30,8],[30,8],[30,8],[30,8],[30,8],[[30,10],8],[[30,10],8],[[30,11],8],[[30,11],8],[[30,10,11],8],[[30,10,11],8],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,[[8,[7]]]],[30,8],[30,8],[[30,10],8],[[30,10],8],[[30,30],12],[[30,24],25],[[30,24],25],[[]],[21,30],[15,30],[20,30],[19,30],[18,30],[14,30],[22,30],[16,30],[11,30],[[]],[13,30],[17,[[31,[30]]]],[10,[[8,[30]]]],[2,[[8,[7]]]],[[2,61],[[31,[2]]]],[[2,61],[[31,[2]]]],[30],[[]],[[]],[2,12],[2,12],[2,12],[30,12],[2,12],[30,12],[2,12],[2,12],[2,12],[2,12],[2,12],[30,12],[[2,10],[[31,[2]]]],[[2,10],[[31,[2]]]],[30,8],[[60,12],[[5,[2]]]],[60,[[5,[2]]]],[[60,37],[[5,[2]]]],[[60,23],[[5,[2]]]],[[60,17],[[5,[2]]]],[[60,13],[[5,[2]]]],[[60,16],[[5,[2]]]],[[60,18],[[5,[2]]]],[[60,15],[[5,[2]]]],[[60,[31,[11]]],5],[[60,10],[[5,[2]]]],[[60,10,21,10],[[5,[2]]]],[60,[[5,[2]]]],[[60,[31,[11]]],5],[60,[[5,[2]]]],[[60,10],[[5,[2]]]],[[60,10,11],5],[[60,10,21,10,11],5],[[60,11],5],[[60,10,11],5],[[60,10,21,10,11],5],[[60,14],[[5,[2]]]],[[60,21],[[5,[2]]]],[[60,22],[[5,[2]]]],[[60,20],[[5,[2]]]],[60,[[5,[2]]]],[[60,10],[[5,[2]]]],[[60,10,21,10],[[5,[2]]]],[2,2],[[]],[[],1],[[],[[8,[2,7]]]],[[],8],[[],8],[[],8],[[],8],[[],41],[[],41],0,0,0,0,0],"p":[[3,"String"],[4,"Value"],[3,"Map"],[3,"Serializer"],[6,"Result"],[8,"Display"],[3,"Error"],[4,"Result"],[3,"Deserializer"],[15,"str"],[15,"usize"],[15,"bool"],[15,"i16"],[15,"u16"],[15,"i8"],[15,"i32"],[15,"f64"],[15,"i64"],[15,"isize"],[15,"u8"],[15,"u32"],[15,"u64"],[15,"f32"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"Into"],[3,"Vec"],[4,"Cow"],[3,"Number"],[4,"Option"],[8,"IntoIterator"],[4,"Unexpected"],[8,"Expected"],[3,"StreamDeserializer"],[3,"Demand"],[15,"char"],[15,"i128"],[15,"u128"],[8,"Error"],[3,"TypeId"],[8,"Read"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[4,"Category"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"IntoIter"],[3,"Values"],[3,"ValuesMut"],[6,"Result"],[3,"PrettyFormatter"],[3,"CompactFormatter"],[4,"CharEscape"],[3,"Serializer"],[8,"Index"],[13,"Bool"],[13,"Number"],[13,"String"],[13,"Array"],[13,"Object"],[13,"Vacant"],[13,"Occupied"],[8,"Formatter"],[13,"AsciiControl"]]},\
"sha1_smol":{"doc":"A minimal implementation of SHA1 for rust.","t":[17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DIGEST_LENGTH","Digest","DigestParseError","Sha1","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","cmp","cmp","cmp","default","default","digest","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_str","hash","hash","hash","into","into","into","new","partial_cmp","partial_cmp","partial_cmp","reset","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update"],"q":["sha1_smol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The length of a SHA1 digest in bytes","Digest generated from a <code>Sha1</code> instance.","Indicates that a digest couldn’t be parsed.","Represents a Sha1 hash object in memory.","","","","","","","Returns the 160 bit (20 byte) digest as a byte array.","","","","","","","","","Retrieve digest result.","","","","","","","","Returns the argument unchanged.","Shortcut to create a sha1 from some bytes.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an fresh sha1 hash object.","","","","Resets the hash object to it’s initial state.","","","","","","","","","","Update hash with input data."],"i":[0,0,0,0,2,1,3,2,1,3,1,2,1,3,2,1,3,2,1,2,2,1,3,1,1,3,3,2,2,1,3,1,2,1,3,2,1,3,2,2,1,3,2,2,1,3,2,1,3,2,1,3,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1],[2,2],[1,1],[3,3],[[2,2],4],[[1,1],4],[[3,3],4],[[],2],[[],1],[2,1],[[2,2],5],[[1,1],5],[[3,3],5],[[1,6],7],[[1,6],7],[[3,6],7],[[3,6],7],[[]],[8,2],[[]],[[]],[9,[[10,[1,3]]]],[2],[1],[3],[[]],[[]],[[]],[[],2],[[2,2],[[11,[4]]]],[[1,1],[[11,[4]]]],[[3,3],[[11,[4]]]],[2],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[2]],"p":[[3,"Digest"],[3,"Sha1"],[3,"DigestParseError"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"AsRef"],[15,"str"],[4,"Result"],[4,"Option"],[3,"TypeId"]]},\
"strsim":{"doc":"This library implements string similarity metrics.","t":[13,6,4,11,11,5,11,11,11,11,5,5,5,5,5,5,11,5,5,5,5,5,5,11,5,11,11,11,11],"n":["DifferentLengthArgs","HammingResult","StrSimError","borrow","borrow_mut","damerau_levenshtein","eq","fmt","fmt","from","generic_damerau_levenshtein","generic_hamming","generic_jaro","generic_jaro_winkler","generic_levenshtein","hamming","into","jaro","jaro_winkler","levenshtein","normalized_damerau_levenshtein","normalized_levenshtein","osa_distance","provide","sorensen_dice","to_string","try_from","try_into","type_id"],"q":["strsim","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Like optimal string alignment, but substrings can be …","","","","Returns the argument unchanged.","Like optimal string alignment, but substrings can be …","Calculates the number of positions in the two sequences …","Calculates the Jaro similarity between two sequences. The …","Like Jaro but gives a boost to sequences that have a …","Calculates the minimum number of insertions, deletions, …","Calculates the number of positions in the two strings …","Calls <code>U::from(self)</code>.","Calculates the Jaro similarity between two strings. The …","Like Jaro but gives a boost to strings that have a common …","Calculates the minimum number of insertions, deletions, …","Calculates a normalized score of the Damerau–Levenshtein …","Calculates a normalized score of the Levenshtein algorithm …","Like Levenshtein but allows for adjacent transpositions. …","","Calculates a Sørensen-Dice similarity distance using …","","","",""],"i":[3,0,0,3,3,0,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0,3,3,3,3],"f":[0,0,0,[[]],[[]],[[1,1],2],[[3,3],4],[[3,5],[[7,[6]]]],[[3,5],8],[[]],[[],2],[[],9],[[],10],[[],10],[[],2],[[1,1],9],[[]],[[1,1],10],[[1,1],10],[[1,1],2],[[1,1],10],[[1,1],10],[[1,1],2],[11],[[1,1],10],[[],12],[[],7],[[],7],[[],13]],"p":[[15,"str"],[15,"usize"],[4,"StrSimError"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[6,"HammingResult"],[15,"f64"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"syn":{"doc":"github crates-io docs-rs","t":[3,13,13,13,13,3,3,13,13,13,13,13,4,3,6,13,13,3,4,13,3,13,13,13,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,13,13,13,4,3,3,3,13,13,3,13,13,13,13,13,13,3,4,13,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,3,13,3,3,4,3,3,3,13,13,13,4,13,4,3,3,3,3,13,13,4,4,4,3,13,13,13,13,13,13,3,13,13,13,3,4,3,3,3,3,13,3,13,13,13,13,13,4,13,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,13,3,13,13,13,13,3,13,4,13,13,13,3,3,3,3,3,3,3,3,13,13,13,3,13,13,13,13,13,13,13,13,4,13,13,4,4,13,3,3,13,13,13,3,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,13,13,13,13,4,3,3,3,3,13,13,3,13,13,4,13,3,13,13,13,13,13,13,13,13,13,13,6,13,4,13,13,13,13,13,3,13,13,13,13,4,13,4,13,13,13,13,13,13,14,13,13,13,3,4,4,3,3,3,3,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,13,4,13,13,13,13,13,13,13,13,3,3,3,3,3,4,3,3,13,13,13,13,13,13,13,13,3,3,3,4,3,4,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,12,12,12,14,12,0,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,14,14,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,11,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,14,11,11,11,11,14,14,5,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,18,10,3,3,3,16,8,3,6,8,8,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,13,3,3,3,3,4,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_tokenursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","provide","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","0","0","1","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::AttrStyle","syn::BinOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Data","","","syn::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Fields","","syn::FnArg","","syn::ForeignItem","","","","","syn::GenericArgument","","","","","syn::GenericMethodArgument","","syn::GenericParam","","","syn::ImplItem","","","","","syn::Item","","","","","","","","","","","","","","","","","syn::Lit","","","","","","","","syn::MacroDelimiter","","","syn::Member","","syn::Meta","","","syn::NestedMeta","","syn::Pat","","","","","","","","","","","","","","","","syn::PathArguments","","syn::RangeLimits","","syn::ReturnType","","syn::Stmt","","","","","syn::StrStyle","syn::TraitBoundModifier","syn::TraitItem","","","","","syn::Type","","","","","","","","","","","","","","","syn::TypeParamBound","","syn::UnOp","","","syn::UseTree","","","","","syn::Visibility","","","syn::WherePredicate","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated::Pair","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Value of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","","","","In some positions, types may not contain the <code>+</code> character, …cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","","","","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,142,142,142,185,0,0,25,147,25,25,25,0,0,0,25,147,0,0,25,0,186,142,142,142,142,142,142,0,25,129,0,25,166,136,136,25,129,129,25,25,129,72,25,68,74,87,115,120,186,0,0,186,25,337,21,0,0,0,0,165,143,0,142,142,87,138,83,142,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,25,0,0,0,0,0,0,129,87,110,0,25,0,0,0,0,0,87,142,0,0,0,0,104,25,104,147,142,72,0,166,25,87,0,0,0,0,0,0,147,0,25,147,21,11,129,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,25,0,74,79,83,186,0,12,0,15,25,166,0,0,0,0,0,0,0,0,145,25,142,0,25,87,110,115,120,147,166,87,0,25,81,0,0,15,0,0,115,120,25,0,87,142,142,104,12,17,65,142,143,0,147,81,185,143,142,166,11,25,136,147,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,25,104,147,166,0,0,0,0,0,147,21,0,25,166,0,337,0,126,25,147,166,142,142,104,25,166,21,0,25,0,145,142,142,142,142,0,147,166,87,110,0,129,0,25,87,138,166,142,142,0,79,87,87,0,0,0,0,0,0,0,147,25,25,25,147,166,166,0,0,25,68,74,83,87,110,115,120,165,166,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,25,87,138,17,17,65,25,87,0,0,0,0,0,0,0,0,25,87,110,115,120,129,147,166,0,0,0,0,0,0,25,166,25,92,125,149,53,158,174,9,35,49,67,187,184,48,36,107,191,1,29,37,125,16,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,75,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,112,113,114,116,117,118,119,121,122,123,124,127,128,137,146,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,99,30,135,154,30,39,3,5,3,5,29,32,58,62,91,122,37,40,46,63,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,84,75,76,84,85,100,118,151,160,189,33,167,18,48,56,89,92,93,99,109,140,144,177,0,10,26,43,54,148,159,176,0,34,0,168,29,37,171,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,67,105,187,20,60,69,70,75,76,77,84,85,88,97,99,112,116,118,121,180,182,189,71,42,63,73,73,77,88,116,121,157,125,96,38,23,90,0,0,137,73,78,185,75,77,116,117,118,93,121,122,123,135,16,56,175,177,30,39,49,164,160,148,150,155,157,158,159,26,59,161,176,178,42,89,140,7,7,9,65,66,14,27,44,75,77,86,88,97,100,101,121,123,188,33,34,36,40,41,43,44,48,50,53,54,55,57,60,61,64,69,88,97,121,169,0,90,162,71,16,56,98,102,139,141,177,7,7,7,9,65,66,3,5,125,149,40,78,7,7,7,7,7,7,7,8,1,2,9,10,11,12,12,12,12,13,14,15,15,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,74,74,74,74,75,75,76,77,78,79,79,79,80,81,82,83,83,83,83,84,85,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,104,104,104,104,104,105,106,107,108,109,110,110,110,110,110,111,112,113,114,115,115,115,115,115,116,117,118,119,120,120,120,120,120,121,122,123,124,125,126,126,126,127,128,129,129,129,129,129,129,129,129,130,131,132,133,3,3,5,5,134,337,135,136,137,137,137,137,138,138,138,138,139,140,141,142,143,144,145,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,183,184,184,185,186,187,188,189,190,191,52,35,89,93,98,99,100,101,102,118,123,125,137,183,41,150,67,73,78,187,191,71,7,9,65,66,173,9,16,20,75,77,88,89,90,94,95,96,97,98,99,100,101,102,105,106,107,112,113,116,118,121,123,125,137,168,184,188,189,42,93,151,24,40,43,66,146,37,125,149,190,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,17,17,17,17,185,183,185,92,93,99,109,128,17,17,32,34,38,40,46,63,103,183,171,27,28,31,17,54,148,44,146,86,127,76,85,158,73,78,80,84,149,73,52,173,14,45,173,46,67,73,78,187,191,47,94,114,119,124,153,170,95,73,48,39,69,182,49,96,80,37,53,97,112,127,157,158,168,174,70,162,163,18,13,7,9,76,129,130,131,132,133,3,5,134,7,28,31,61,37,37,37,125,149,190,73,13,19,24,35,49,50,59,80,125,149,155,161,178,190,0,0,0,7,9,12,13,14,15,16,18,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,132,133,3,5,134,135,137,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,183,184,186,187,188,189,190,0,7,10,10,135,135,0,10,0,10,183,20,10,0,0,0,20,130,144,25,7,9,40,44,71,146,167,174,179,180,182,12,10,13,14,24,51,56,80,135,156,172,177,179,191,10,82,22,24,0,51,156,172,57,53,125,49,127,90,107,56,55,86,27,28,31,95,183,127,93,96,54,88,90,94,97,98,100,101,103,111,112,113,114,116,117,118,119,121,123,124,139,146,148,7,9,129,130,131,132,133,3,5,134,128,91,111,117,122,7,7,7,8,1,2,9,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,129,130,130,131,131,132,132,133,133,3,3,5,5,134,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,66,134,0,73,108,157,97,112,144,98,139,10,168,129,130,131,132,133,3,5,99,42,52,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,3,5,7,8,1,2,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,0,130,131,132,133,3,5,134,10,135,93,99,100,103,105,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,58,49,20,36,60,77,88,97,101,112,116,121,123,163,180,188,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,73,73,101,113,118,123,152,181,102,141,19,7,62,93,99,125,149,103,130,131,132,133,134,134,125,149,89,140,20,88,89,90,91,95,96,97,98,99,100,101,102,103,111,112,113,121,122,123,137,73,82,63,147,151,160,165,64,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,489,490,491,492,493,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,0,0,220,220,221,220,221,221,221,221,221,221,220,221,221,221,220,221,221,221,220,220,221,221,221,221,221,221,220,221,220,221,220,221,0,532,532,532,0,0,0,216,0,0,0,0,0,0,0,223,226,223,224,231,225,226,223,224,231,225,223,224,225,224,225,225,223,224,0,223,226,223,224,225,223,223,225,225,223,226,223,224,231,225,225,226,223,224,231,225,225,225,225,223,223,225,225,213,223,216,231,216,216,223,226,223,223,223,225,223,225,223,225,224,225,223,225,226,223,224,231,225,226,223,224,231,225,226,223,224,231,225,0,533,238,0,0,0,0,0,0,0,0,238,232,235,239,236,237,207,208,238,232,235,239,236,237,207,208,238,232,232,235,236,237,207,238,232,235,236,237,207,238,232,232,232,232,232,232,232,235,239,236,237,207,208,238,232,232,232,232,232,232,235,239,236,237,207,208,238,232,232,232,235,239,236,237,207,208,232,238,238,232,232,232,232,232,232,235,239,236,237,207,208,232,238,235,239,236,237,207,208,235,239,236,237,207,208,232,232,232,232,232,232,232,238,238,232,232,232,235,239,236,237,207,208,232,238,232,235,236,237,207,238,232,238,232,232,235,239,236,237,207,208,238,232,235,239,236,237,207,208,238,232,235,239,236,237,207,208,238,238,238,534,535,534,0,536,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,201,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,333,334,335,336,201,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,201,240,241,242,243,244,245,246,247,248,249,198,250,251,252,253,254,200,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,202,273,274,199,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"Ident"],[3,"ImplGenerics"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[4,"Visibility"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"MethodTurbofish"],[4,"GenericMethodArgument"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"Generics"],[4,"GenericParam"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"File"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[4,"Stmt"],[3,"Local"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"Variadic"],[4,"ReturnType"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"Crate"],[3,"Super"],[3,"Extern"],[3,"Underscore"],[3,"SelfValue"],[3,"SelfType"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"],[8,"Display"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Nothing"],[3,"Punctuated"],[8,"Peek"],[3,"Demand"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[3,"PairsMut"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[4,"StrStyle"],[13,"Inner"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"BitXor"],[13,"BitAnd"],[13,"BitOr"],[13,"Shl"],[13,"Shr"],[13,"Eq"],[13,"Lt"],[13,"Le"],[13,"Ne"],[13,"Ge"],[13,"Gt"],[13,"AddEq"],[13,"SubEq"],[13,"MulEq"],[13,"DivEq"],[13,"RemEq"],[13,"BitXorEq"],[13,"BitAndEq"],[13,"BitOrEq"],[13,"ShlEq"],[13,"ShrEq"],[13,"Struct"],[13,"Enum"],[13,"Union"],[13,"Array"],[13,"Assign"],[13,"AssignOp"],[13,"Async"],[13,"Await"],[13,"Binary"],[13,"Block"],[13,"Box"],[13,"Break"],[13,"Call"],[13,"Cast"],[13,"Closure"],[13,"Continue"],[13,"Field"],[13,"ForLoop"],[13,"Group"],[13,"If"],[13,"Index"],[13,"Let"],[13,"Lit"],[13,"Loop"],[13,"Macro"],[13,"Match"],[13,"MethodCall"],[13,"Paren"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Repeat"],[13,"Return"],[13,"Struct"],[13,"Try"],[13,"TryBlock"],[13,"Tuple"],[13,"Type"],[13,"Unary"],[13,"Unsafe"],[13,"Verbatim"],[13,"While"],[13,"Yield"],[13,"Named"],[13,"Unnamed"],[13,"Receiver"],[13,"Typed"],[13,"Fn"],[13,"Static"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Lifetime"],[13,"Type"],[13,"Const"],[13,"Binding"],[13,"Constraint"],[13,"Type"],[13,"Const"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Const"],[13,"Enum"],[13,"ExternCrate"],[13,"Fn"],[13,"ForeignMod"],[13,"Impl"],[13,"Macro"],[13,"Macro2"],[13,"Mod"],[13,"Static"],[13,"Struct"],[13,"Trait"],[13,"TraitAlias"],[13,"Type"],[13,"Union"],[13,"Use"],[13,"Verbatim"],[13,"Str"],[13,"ByteStr"],[13,"Byte"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Bool"],[13,"Verbatim"],[13,"Paren"],[13,"Brace"],[13,"Bracket"],[13,"Named"],[13,"Unnamed"],[13,"Path"],[13,"List"],[13,"NameValue"],[13,"Meta"],[13,"Lit"],[13,"Box"],[13,"Ident"],[13,"Lit"],[13,"Macro"],[13,"Or"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Rest"],[13,"Slice"],[13,"Struct"],[13,"Tuple"],[13,"TupleStruct"],[13,"Type"],[13,"Verbatim"],[13,"Wild"],[13,"AngleBracketed"],[13,"Parenthesized"],[13,"HalfOpen"],[13,"Closed"],[13,"Type"],[13,"Local"],[13,"Item"],[13,"Expr"],[13,"Semi"],[13,"Raw"],[13,"Maybe"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Array"],[13,"BareFn"],[13,"Group"],[13,"ImplTrait"],[13,"Infer"],[13,"Macro"],[13,"Never"],[13,"Paren"],[13,"Path"],[13,"Ptr"],[13,"Reference"],[13,"Slice"],[13,"TraitObject"],[13,"Tuple"],[13,"Verbatim"],[13,"Trait"],[13,"Lifetime"],[13,"Deref"],[13,"Not"],[13,"Neg"],[13,"Path"],[13,"Name"],[13,"Rename"],[13,"Glob"],[13,"Group"],[13,"Public"],[13,"Crate"],[13,"Restricted"],[13,"Type"],[13,"Lifetime"],[13,"Eq"],[8,"IdentExt"],[8,"Speculative"],[13,"Punctuated"],[13,"End"],[8,"Spanned"]]},\
"termcolor":{"doc":"This crate provides a cross platform abstraction for …","t":[13,13,3,13,13,13,13,3,3,3,4,4,3,13,13,13,13,3,3,13,13,3,3,13,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Always","AlwaysAnsi","Ansi","Ansi256","Auto","Black","Blue","Buffer","BufferWriter","BufferedStandardStream","Color","ColorChoice","ColorSpec","Cyan","Green","Magenta","Never","NoColor","ParseColorError","Red","Rgb","StandardStream","StandardStreamLock","White","WriteColor","Yellow","ansi","as_mut_slice","as_slice","bg","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","description","dimmed","eq","eq","eq","eq","fg","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","get_mut","get_mut","get_ref","get_ref","intense","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","invalid","is_empty","is_none","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","italic","len","lock","new","new","new","no_color","print","provide","reset","reset","reset","reset","reset","reset","reset","reset","separator","set_bg","set_bold","set_color","set_color","set_color","set_color","set_color","set_color","set_color","set_dimmed","set_fg","set_intense","set_italic","set_reset","set_underline","stderr","stderr","stderr","stdout","stdout","stdout","supports_color","supports_color","supports_color","supports_color","supports_color","supports_color","supports_color","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","write","write","write","write","write","write","0","0","1","2"],"q":["termcolortermcolor::Color","","",""],"d":["Try very hard to emit colors. This includes emitting ANSI …","AlwaysAnsi is like Always, except it never tries to use …","Satisfies <code>WriteColor</code> using standard ANSI escape sequences.","","Try to use colors, but don’t force the issue. If the …","","","Write colored text to memory.","Writes colored buffers to stdout or stderr.","Like <code>StandardStream</code>, but does buffered writing.","The set of available colors for the terminal …","ColorChoice represents the color preferences of an end …","A color specification.","","","","Never emit colors.","Satisfies <code>WriteColor</code> but ignores all color options.","An error from parsing an invalid color specification.","","","Satisfies <code>io::Write</code> and <code>WriteColor</code>, and supports optional …","<code>StandardStreamLock</code> is a locked reference to a …","","This trait describes the behavior of writers that support …","","Create a buffer that uses ANSI escape sequences.","Return the underlying data of the buffer as a mutable …","Return the underlying data of the buffer.","Get the background color.","Get whether this is bold or not.","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Buffer</code> with the current color preferences.","Clears this buffer.","Clears this color specification so that it has no …","","","","","","","","","","","Get whether this is dimmed or not.","","","","","Get the foreground color.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a mutable reference to the inner writer.","Return a mutable reference to the inner writer.","Return a reference to the inner writer.","Return a reference to the inner writer.","Get whether this is intense or not.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this buffer and return the underlying raw data.","Consume this <code>NoColor</code> value and return the inner writer.","Consume this <code>Ansi</code> value and return the inner writer.","Return the string that couldn’t be parsed as a valid …","Returns true if and only if this buffer is empty.","Returns true if this color specification has no colors or …","Returns true if and only if the underlying writer must …","","","","","","","Get whether this is italic or not.","Returns the length of this buffer in bytes.","Lock the underlying writer.","Create a new writer that satisfies <code>WriteColor</code> but drops …","Create a new writer that satisfies <code>WriteColor</code> using …","Create a new color specification that has no colors or …","Create a buffer that drops all color information.","Prints the contents of the given buffer.","","Reset the current color settings to their original …","","","","","","","Get whether reset is enabled or not.","If set, the separator given is printed between buffers. By …","Set the background color.","Set whether the text is bolded or not.","Set the color settings of the writer.","","","","","","","Set whether the text is dimmed or not.","Set the foreground color.","Set whether the text is intense or not.","Set whether the text is italicized or not.","Set whether to reset the terminal whenever color settings …","Set whether the text is underlined or not.","Create a new <code>StandardStream</code> with the given color …","Create a new <code>BufferedStandardStream</code> with the given color …","Create a new <code>BufferWriter</code> that writes to stderr with the …","Create a new <code>StandardStream</code> with the given color …","Create a new <code>BufferedStandardStream</code> with the given color …","Create a new <code>BufferWriter</code> that writes to stdout with the …","Returns true if and only if the underlying writer supports …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get whether this is underline or not.","","","","","","","","","",""],"i":[7,7,0,3,7,3,3,0,0,0,0,0,0,3,3,3,7,0,0,3,3,0,0,3,0,3,1,1,1,2,2,10,12,13,6,1,15,16,7,2,3,8,10,12,13,6,1,15,16,7,2,3,8,6,1,2,7,2,3,8,7,2,3,8,2,8,2,7,2,3,8,2,10,12,13,1,15,16,7,2,3,8,8,10,12,13,6,1,15,16,7,2,3,8,3,15,16,15,16,2,10,12,13,6,1,15,16,7,2,3,8,1,15,16,8,1,2,26,10,12,13,1,15,16,2,1,10,15,16,2,1,6,8,26,10,12,13,1,15,16,2,6,2,2,26,10,12,13,1,15,16,2,2,2,2,2,2,10,13,6,10,13,6,26,10,12,13,1,15,16,7,2,3,8,8,10,12,13,6,1,15,16,7,2,3,8,10,12,13,6,1,15,16,7,2,3,8,10,12,13,6,1,15,16,7,2,3,8,2,10,12,13,1,15,16,27,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[1],[1],[2,[[4,[3]]]],[2,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,1],[1],[2],[7,7],[2,2],[3,3],[8,8],[[]],[[]],[[]],[[]],[[],2],[8,9],[2,5],[[7,7],5],[[2,2],5],[[3,3],5],[[8,8],5],[2,[[4,[3]]]],[10,11],[12,11],[13,11],[1,11],[[[15,[14]]],11],[[[16,[14]]],11],[[7,17],18],[[2,17],18],[[3,17],18],[[8,17],18],[[8,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,[[19,[3,8]]]],[[[15,[14]]]],[[[16,[14]]]],[[[15,[14]]]],[[[16,[14]]]],[2,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[21,[20]]]],[[[15,[14]]],14],[[[16,[14]]],14],[8,9],[1,5],[2,5],[[],5],[10,5],[12,5],[13,5],[1,5],[[[15,[14]]],5],[[[16,[14]]],5],[2,5],[1,22],[10,12],[14,[[15,[14]]]],[14,[[16,[14]]]],[[],2],[[],1],[[6,1],11],[23],[[],11],[10,11],[12,11],[13,11],[1,11],[[[15,[14]]],11],[[[16,[14]]],11],[2,5],[[6,[4,[[21,[20]]]]]],[[2,[4,[3]]],2],[[2,5],2],[2,11],[[10,2],11],[[12,2],11],[[13,2],11],[[1,2],11],[[[15,[14]],2],11],[[[16,[14]],2],11],[[2,5],2],[[2,[4,[3]]],2],[[2,5],2],[[2,5],2],[[2,5],2],[[2,5],2],[7,10],[7,13],[7,6],[7,10],[7,13],[7,6],[[],5],[10,5],[12,5],[13,5],[1,5],[[[15,[14]]],5],[[[16,[14]]],5],[[]],[[]],[[]],[[]],[[],24],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[2,5],[10,[[11,[22]]]],[12,[[11,[22]]]],[13,[[11,[22]]]],[1,[[11,[22]]]],[[[15,[14]]],[[11,[22]]]],[[[16,[14]]],[[11,[22]]]],0,0,0,0],"p":[[3,"Buffer"],[3,"ColorSpec"],[4,"Color"],[4,"Option"],[15,"bool"],[3,"BufferWriter"],[4,"ColorChoice"],[3,"ParseColorError"],[15,"str"],[3,"StandardStream"],[6,"Result"],[3,"StandardStreamLock"],[3,"BufferedStandardStream"],[8,"Write"],[3,"NoColor"],[3,"Ansi"],[3,"Formatter"],[6,"Result"],[4,"Result"],[15,"u8"],[3,"Vec"],[15,"usize"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"WriteColor"],[13,"Ansi256"],[13,"Rgb"]]},\
"test_models":{"doc":"","t":[0,14,14,0,0,0,14,14,14,14,14,14,0,14,14,14,14,14,14,0,2,17,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,2,17,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,2,17,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,17,13,17,4,3,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,2,17,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,17,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,17,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17],"n":["everything","everything_get_one_e_across_r1","everything_get_one_ro_across_r1","imported_object","isa_relationship","one_to_many","one_to_many_get_many_as_across_r1","one_to_many_get_many_bs_across_r2","one_to_many_get_one_tgt_across_r1","one_to_many_get_one_tgt_across_r3","one_to_many_maybe_get_many_cs_across_r3","one_to_many_maybe_get_one_tgt_across_r2","one_to_one","one_to_one_get_one_b_across_r2","one_to_one_get_one_tgt_across_r1","one_to_one_get_one_tgt_across_r2","one_to_one_maybe_get_one_a_across_r1","one_to_one_maybe_get_one_c_across_r3","one_to_one_maybe_get_one_tgt_across_r3","singleton","ObjectStore","UUID_NS","macros","store","types","ObjectStore","borrow","borrow_mut","clone","clone_into","deserialize","exhume_everything","exhume_rando_object","fmt","from","inter_everything","inter_rando_object","into","iter_everything","iter_rando_object","new","serialize","to_owned","try_from","try_into","type_id","Everything","RandoObject","bool","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","float","fmt","fmt","from","from","id","id","int","into","into","new","new","rando","serialize","serialize","string","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ObjectStore","UUID_NS","macros","store","types","ObjectStore","borrow","borrow_mut","clone","clone_into","deserialize","exhume_another_object","fmt","from","inter_another_object","into","iter_another_object","new","serialize","to_owned","try_from","try_into","type_id","AnotherObject","borrow","borrow_mut","clone","clone_into","deserialize","eq","fmt","from","id","into","new","ptr","serialize","to_owned","try_from","try_into","type_id","ObjectStore","UUID_NS","macros","store","types","ObjectStore","borrow","borrow_mut","clone","clone_into","deserialize","exhume_simple_supertype","exhume_subtype_a","exhume_subtype_b","exhume_super_t","fmt","from","inter_simple_supertype","inter_subtype_a","inter_subtype_b","inter_super_t","into","iter_simple_supertype","iter_subtype_a","iter_subtype_b","iter_super_t","new","serialize","to_owned","try_from","try_into","type_id","SimpleSubtypeA","SimpleSubtypeA","SimpleSubtypeB","SimpleSubtypeB","SimpleSupertype","SubtypeA","SubtypeA","SubtypeB","SubtypeB","SuperT","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","get_id","get_id","id","id","into","into","into","into","name","new","new","number","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","ObjectStore","UUID_NS","macros","store","types","ObjectStore","borrow","borrow_mut","clone","clone_into","deserialize","exhume_a","exhume_b","exhume_c","exhume_referent","fmt","from","inter_a","inter_b","inter_c","inter_referent","into","iter_a","iter_b","iter_c","iter_referent","new","serialize","to_owned","try_from","try_into","type_id","A","B","C","Referent","baz","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","id","id","id","id","into","into","into","into","jackpot","name","name","new","new","new","new","ptr","ptr","ptr","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ObjectStore","UUID_NS","macros","store","types","ObjectStore","borrow","borrow_mut","clone","clone_into","deserialize","exhume_a","exhume_b","exhume_c","exhume_referent","fmt","from","inter_a","inter_b","inter_c","inter_referent","into","iter_a","iter_b","iter_c","iter_referent","new","serialize","to_owned","try_from","try_into","type_id","A","B","C","Referent","bit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","id","id","id","id","into","into","into","into","like_water","name","new","new","new","new","number","ptr","ptr","ptr","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ObjectStore","UUID_NS","macros","store","types","ObjectStore","borrow","borrow_mut","clone","clone_into","deserialize","fmt","from","into","new","serialize","to_owned","try_from","try_into","type_id","Singleton"],"q":["test_models","","","","","","","","","","","","","","","","","","","","test_models::everything","","","","","test_models::everything::store","","","","","","","","","","","","","","","","","","","","","test_models::everything::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","test_models::imported_object","","","","","test_models::imported_object::store","","","","","","","","","","","","","","","","","","test_models::imported_object::types","","","","","","","","","","","","","","","","","","test_models::isa_relationship","","","","","test_models::isa_relationship::store","","","","","","","","","","","","","","","","","","","","","","","","","","","test_models::isa_relationship::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","test_models::isa_relationship::types::SimpleSupertype","","test_models::isa_relationship::types::SuperT","","test_models::one_to_many","","","","","test_models::one_to_many::store","","","","","","","","","","","","","","","","","","","","","","","","","","","test_models::one_to_many::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","test_models::one_to_one","","","","","test_models::one_to_one::store","","","","","","","","","","","","","","","","","","","","","","","","","","","test_models::one_to_one::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","test_models::singleton","","","","","test_models::singleton::store","","","","","","","","","","","","","","","test_models::singleton::types"],"d":["Everything Domain","Macro to traverse <code>RandoObject</code> ➡ <code>Everything</code>, via <em>R1</em>","Macro to traverse <code>Everything</code> ➡ <code>RandoObject</code>, via <em>R1</em>","One to Many Domain","Isa Relationship Domain","One to Many Domain","Macro to traverse <code>Referent</code> ➡ <code>A</code>, via <em>R1</em>","Macro to traverse <code>Referent</code> ➡ <code>B</code>, via <em>R2</em>","Macro to traverse <code>A</code> ➡ <code>Referent</code>, via <em>R1</em>","Macro to traverse <code>C</code> ➡ <code>Referent</code>, via <em>R3</em>","Macro to traverse <code>Referent</code> ➡ <code>C</code>, via <em>R3(c)</em>","Macro to traverse <code>B</code> ➡ <code>Referent</code>, via <em>R2(c)</em>","One to One Domain","Macro to traverse <code>Referent</code> ➡ <code>B</code>, via <em>R2</em>","Macro to traverse <code>A</code> ➡ <code>Referent</code>, via <em>R1</em>","Macro to traverse <code>B</code> ➡ <code>Referent</code>, via <em>R2</em>","Macro to traverse <code>Referent</code> ➡ <code>A</code>, via <em>R1(c)</em>","Macro to traverse <code>Referent</code> ➡ <code>C</code>, via <em>R3(c)</em>","Macro to traverse <code>C</code> ➡ <code>Referent</code>, via <em>R3(c)</em>","One to Many Domain","","","Macros for navigating the “Everything” domain","ObjectStore for the instances of the “Everything” …","Types for instances of the “Everything” domain","","","","","","","Exhume <code>Everything</code> from the <code>ObjectStore</code>","Exhume [<code>Rando Object</code>] from the <code>ObjectStore</code>","","Returns the argument unchanged.","Inter <code>Everything</code> into the <code>ObjectStore</code>","Inter <code>RandoObject</code> into the <code>ObjectStore</code>","Calls <code>U::from(self)</code>.","Get an iterator over the internal …","Get an iterator over the internal …","","","","","","","An object, with everything on it!","Just some random object with which we wish to relate","pub bool: <code>bool</code>,","","","","","","","","","","","","","pub float: <code>f64</code>,","","","Returns the argument unchanged.","Returns the argument unchanged.","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub int: <code>i64</code>,","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inter a new RandoObject and return it’s <code>id</code>","Inter a new Everything and return it’s <code>id</code>","pub rando: <code>Rando Object</code>,","","","pub string: <code>std::string::String</code>,","","","","","","","","","","","Macros for navigating the “Imported Object” domain","ObjectStore for the instances of the “Imported Object” …","Types for instances of the “Imported Object” domain","","","","","","","Exhume [<code>Another Object</code>] from the <code>ObjectStore</code>","","Returns the argument unchanged.","Inter <code>AnotherObject</code> into the <code>ObjectStore</code>","Calls <code>U::from(self)</code>.","Get an iterator over the internal …","","","","","","","This is another object, but different.","","","","","","","","Returns the argument unchanged.","pub id: <code>Uuid</code>,","Calls <code>U::from(self)</code>.","Inter a new AnotherObject and return it’s <code>id</code>","<code>nut::sarzak::Object</code>","","","","","","","","Macros for navigating the “Isa Relationship” domain","ObjectStore for the instances of the “Isa Relationship”…","Types for instances of the “Isa Relationship” domain","","","","","","","Exhume [<code>Simple Supertype</code>] from the <code>ObjectStore</code>","Exhume [<code>Subtype A</code>] from the <code>ObjectStore</code>","Exhume [<code>Subtype B</code>] from the <code>ObjectStore</code>","Exhume [<code>Super T</code>] from the <code>ObjectStore</code>","","Returns the argument unchanged.","Inter <code>SimpleSupertype</code> into the <code>ObjectStore</code>","Inter <code>SubtypeA</code> into the <code>ObjectStore</code>","Inter <code>SubtypeB</code> into the <code>ObjectStore</code>","Inter <code>SuperT</code> into the <code>ObjectStore</code>","Calls <code>U::from(self)</code>.","Get an iterator over the internal …","Get an iterator over the internal …","Get an iterator over the internal …","Get an iterator over the internal <code>HashMap&lt;(&amp;Uuid, SuperT)&gt;</code> …","","","","","","","<code>SimpleSubtypeA(SimpleSubtypeA)</code>,","Simple [<code>Subtype</code>] A","<code>SimpleSubtypeB(SimpleSubtypeB)</code>,","Simple [<code>Subtype</code>] B","This [<code>Supertype</code>] is Simple","This [<code>Subtype</code>] has <code>Attribute</code>s","<code>SubtypeA(SubtypeA)</code>,","This [<code>Subtype</code>] has a number","<code>SubtypeB(SubtypeB)</code>,","A [<code>Supertype</code>] with normal [<code>Subtype</code>]s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","pub name: <code>std::string::String</code>,","Inter a new SubtypeA and return it’s <code>id</code>","Inter a new SubtypeB and return it’s <code>id</code>","pub number: <code>i64</code>,","","","","","","","","","","","","","","","","","","","","","","","","","","","Macros for navigating the “One To Many” domain","ObjectStore for the instances of the “One To Many” …","Types for instances of the “One To Many” domain","","","","","","","Exhume <code>A</code> from the <code>ObjectStore</code>","Exhume <code>B</code> from the <code>ObjectStore</code>","Exhume <code>C</code> from the <code>ObjectStore</code>","Exhume <code>Referent</code> from the <code>ObjectStore</code>","","Returns the argument unchanged.","Inter <code>A</code> into the <code>ObjectStore</code>","Inter <code>B</code> into the <code>ObjectStore</code>","Inter <code>C</code> into the <code>ObjectStore</code>","Inter <code>Referent</code> into the <code>ObjectStore</code>","Calls <code>U::from(self)</code>.","Get an iterator over the internal <code>HashMap&lt;(&amp;Uuid, A)&gt;</code> in …","Get an iterator over the internal <code>HashMap&lt;(&amp;Uuid, B)&gt;</code> in …","Get an iterator over the internal <code>HashMap&lt;(&amp;Uuid, C)&gt;</code> in …","Get an iterator over the internal …","","","","","","","This is the [<code>Referrer</code>] side of a 1-M relationship","Connected to TGT via <em>R2</em>. ","This is the [<code>Referrent</code>] side of a 1-Mc","The object of so many relationships","pub baz: <code>std::string::String</code>,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","pub jackpot: <code>f64</code>,","pub name: <code>std::string::String</code>,","pub name: <code>std::string::String</code>,","Inter a new C and return it’s <code>id</code>","Inter a new A and return it’s <code>id</code>","Inter a new Referent and return it’s <code>id</code>","Inter a new B and return it’s <code>id</code>","pub ptr: <code>Referent</code>,","pub ptr: <code>Referent</code>,","pub ptr: <code>Option&lt;Referent&gt;</code>,","","","","","","","","","","","","","","","","","","","","","","","Macros for navigating the “One To One” domain","ObjectStore for the instances of the “One To One” …","Types for instances of the “One To One” domain","","","","","","","Exhume <code>A</code> from the <code>ObjectStore</code>","Exhume <code>B</code> from the <code>ObjectStore</code>","Exhume <code>C</code> from the <code>ObjectStore</code>","Exhume <code>Referent</code> from the <code>ObjectStore</code>","","Returns the argument unchanged.","Inter <code>A</code> into the <code>ObjectStore</code>","Inter <code>B</code> into the <code>ObjectStore</code>","Inter <code>C</code> into the <code>ObjectStore</code>","Inter <code>Referent</code> into the <code>ObjectStore</code>","Calls <code>U::from(self)</code>.","Get an iterator over the internal <code>HashMap&lt;(&amp;Uuid, A)&gt;</code> in …","Get an iterator over the internal <code>HashMap&lt;(&amp;Uuid, B)&gt;</code> in …","Get an iterator over the internal <code>HashMap&lt;(&amp;Uuid, C)&gt;</code> in …","Get an iterator over the internal …","","","","","","","A: Referrer with Conditional <code>Referent</code>","B: Referrer Unconditional to Referent","C: Referrer to <code>Referent</code> Bi-Conditional","The target of our relationship tests.","pub bit: <code>bool</code>,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","pub id: <code>Uuid</code>,","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","pub like_water: <code>f64</code>,","pub name: <code>std::string::String</code>,","Inter a new C and return it’s <code>id</code>","Inter a new A and return it’s <code>id</code>","Inter a new Referent and return it’s <code>id</code>","Inter a new B and return it’s <code>id</code>","pub number: <code>i64</code>,","pub ptr: <code>Option&lt;Referent&gt;</code>,","pub ptr: <code>Referent</code>,","pub ptr: <code>Referent</code>,","","","","","","","","","","","","","","","","","","","","","","","Macros for navigating the “Singleton” domain","ObjectStore for the instances of the “Singleton” domain","Types for instances of the “Singleton” domain","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","This is a singleton type"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,4,6,4,6,4,6,4,6,4,6,4,6,4,4,6,4,6,4,6,4,4,6,4,6,4,4,6,4,4,6,4,6,4,6,4,6,4,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,0,19,0,0,0,22,0,22,0,20,19,22,21,20,19,22,21,20,19,22,21,20,19,22,21,20,19,22,21,20,19,22,21,20,19,22,21,20,19,22,21,19,22,20,21,20,19,22,21,20,20,21,21,20,19,22,21,20,19,22,21,20,19,22,21,20,19,22,21,20,19,22,21,34,35,36,37,0,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,26,24,27,25,26,24,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,26,24,27,25,0,0,0,0,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,32,31,29,32,30,29,31,29,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,31,29,32,30,0,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[],[[2,[1]]]],[[1,3],[[5,[4]]]],[[1,3],[[5,[6]]]],[[1,7],8],[[]],[[1,4]],[[1,6]],[[]],[1,9],[1,9],[[],1],[1,2],[[]],[[],2],[[],2],[[],10],0,0,0,[[]],[[]],[[]],[[]],[6,6],[4,4],[[]],[[]],[[],[[2,[6]]]],[[],[[2,[4]]]],[[6,6],11],[[4,4],11],0,[[6,7],8],[[4,7],8],[[]],[[]],0,0,0,[[]],[[]],[1,6],[[1,6,12,13,14,11],4],0,[6,2],[4,2],0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],10],[[],10],0,0,0,0,0,0,[[]],[[]],[15,15],[[]],[[],[[2,[15]]]],[[15,3],[[5,[16]]]],[[15,7],8],[[]],[[15,16]],[[]],[15,9],[[],15],[15,2],[[]],[[],2],[[],2],[[],10],0,[[]],[[]],[16,16],[[]],[[],[[2,[16]]]],[[16,16],11],[[16,7],8],[[]],0,[[]],[[15,17],16],0,[16,2],[[]],[[],2],[[],2],[[],10],0,0,0,0,0,0,[[]],[[]],[18,18],[[]],[[],[[2,[18]]]],[[18,3],[[5,[19]]]],[[18,3],[[5,[20]]]],[[18,3],[[5,[21]]]],[[18,3],[[5,[22]]]],[[18,7],8],[[]],[[18,19]],[[18,20]],[[18,21]],[[18,22]],[[]],[18,9],[18,9],[18,9],[18,9],[[],18],[18,2],[[]],[[],2],[[],2],[[],10],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[19,19],[22,22],[21,21],[[]],[[]],[[]],[[]],[[],[[2,[20]]]],[[],[[2,[19]]]],[[],[[2,[22]]]],[[],[[2,[21]]]],[[20,20],11],[[19,19],11],[[22,22],11],[[21,21],11],[[20,7],8],[[19,7],8],[[22,7],8],[[21,7],8],[[]],[[]],[[]],[[]],[19,3],[22,3],0,0,[[]],[[]],[[]],[[]],0,[[18,14],20],[[18,13],21],0,[20,2],[19,2],[22,2],[21,2],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[23,23],[[]],[[],[[2,[23]]]],[[23,3],[[5,[24]]]],[[23,3],[[5,[25]]]],[[23,3],[[5,[26]]]],[[23,3],[[5,[27]]]],[[23,7],8],[[]],[[23,24]],[[23,25]],[[23,26]],[[23,27]],[[]],[23,9],[23,9],[23,9],[23,9],[[],23],[23,2],[[]],[[],2],[[],2],[[],10],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,26],[24,24],[27,27],[25,25],[[]],[[]],[[]],[[]],[[],[[2,[26]]]],[[],[[2,[24]]]],[[],[[2,[27]]]],[[],[[2,[25]]]],[[26,26],11],[[24,24],11],[[27,27],11],[[25,25],11],[[26,7],8],[[24,7],8],[[27,7],8],[[25,7],8],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[[23,27,12],26],[[23,27,14],24],[[23,14],27],[[23,[5,[27]],14],25],0,0,0,[26,2],[24,2],[27,2],[25,2],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],0,0,0,0,0,0,[[]],[[]],[28,28],[[]],[[],[[2,[28]]]],[[28,3],[[5,[29]]]],[[28,3],[[5,[30]]]],[[28,3],[[5,[31]]]],[[28,3],[[5,[32]]]],[[28,7],8],[[]],[[28,29]],[[28,30]],[[28,31]],[[28,32]],[[]],[28,9],[28,9],[28,9],[28,9],[[],28],[28,2],[[]],[[],2],[[],2],[[],10],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[29,29],[32,32],[30,30],[[]],[[]],[[]],[[]],[[],[[2,[31]]]],[[],[[2,[29]]]],[[],[[2,[32]]]],[[],[[2,[30]]]],[[31,31],11],[[29,29],11],[[32,32],11],[[30,30],11],[[31,7],8],[[29,7],8],[[32,7],8],[[30,7],8],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[28,[5,[32]],12],31],[[28,32,13],29],[[28,14],32],[[28,32,11],30],0,0,0,0,[31,2],[29,2],[32,2],[30,2],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],0,0,0,0,0,0,[[]],[[]],[33,33],[[]],[[],[[2,[33]]]],[[33,7],8],[[]],[[]],[[],33],[33,2],[[]],[[],2],[[],2],[[],10],0],"p":[[3,"ObjectStore"],[4,"Result"],[3,"Uuid"],[3,"Everything"],[4,"Option"],[3,"RandoObject"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[3,"TypeId"],[15,"bool"],[15,"f64"],[15,"i64"],[3,"String"],[3,"ObjectStore"],[3,"AnotherObject"],[3,"Object"],[3,"ObjectStore"],[4,"SimpleSupertype"],[3,"SubtypeA"],[3,"SubtypeB"],[4,"SuperT"],[3,"ObjectStore"],[3,"A"],[3,"B"],[3,"C"],[3,"Referent"],[3,"ObjectStore"],[3,"A"],[3,"B"],[3,"C"],[3,"Referent"],[3,"ObjectStore"],[13,"SimpleSubtypeB"],[13,"SimpleSubtypeA"],[13,"SubtypeA"],[13,"SubtypeB"]]},\
"toml":{"doc":"A serde-compatible TOML-parsing library","t":[2,2,3,2,11,11,11,11,11,11,0,11,11,11,11,11,2,2,11,11,11,11,11,0,11,0,11,11,11,11,2,2,2,14,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,3,3,3,3,13,3,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,4,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,5,11,11,11,11,11,11,12,6,13,13,13,3,3,13,3,2,13,8,13,2,4,13,6,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12],"n":["Deserializer","Serializer","Spanned","Value","borrow","borrow","borrow_mut","clone","clone_into","cmp","de","deserialize","end","eq","fmt","from","from_slice","from_str","get_mut","get_ref","hash","into","into_inner","map","partial_cmp","ser","serialize","span","start","to_owned","to_string","to_string_pretty","to_vec","toml","try_from","try_into","type_id","value","Deserializer","Error","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","custom","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","end","eq","fmt","fmt","from","from","from_slice","from_str","into","into","into_deserializer","line_col","new","provide","set_allow_duplicate_after_longer_table","set_require_newline_after_table","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","contains_key","default","deserialize","entry","eq","extend","fmt","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_mut","get_mut","index","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","new","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","serialize","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","with_capacity","0","0","Custom","DateInvalid","Error","KeyNotString","NumberInvalid","Serializer","UnsupportedNone","UnsupportedType","ValueAfterTable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","custom","eq","fmt","fmt","from","from","into","into","new","pretty","pretty_array","pretty_array_indent","pretty_array_trailing_comma","pretty_string","pretty_string_literal","provide","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","tables_last","to_owned","to_string","to_string","to_string_pretty","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","0","Array","Array","Boolean","Custom","Date","Datetime","Datetime","DatetimeParseError","Entry","Float","Index","Integer","Map","Offset","String","Table","Table","Time","Value","Z","as_array","as_array_mut","as_bool","as_datetime","as_float","as_integer","as_str","as_table","as_table_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","date","day","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","get","get_mut","hour","index","index_mut","into","into","into","into","into","into","into_deserializer","is_array","is_bool","is_datetime","is_float","is_integer","is_str","is_table","minute","month","nanosecond","offset","provide","same_type","second","serialize","serialize","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_str","year","hours","minutes","0","0","0","0","0","0","0"],"q":["toml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::map::Entry","","toml::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::ser::Error","toml::valuetoml::value::Offset","","toml::value::Value","","","","","",""],"d":["","","A spanned value, indicating the range at which it is …","","","","","","","","Deserializing TOML into Rust structures.","","Access the end of the span of the contained value.","","","Returns the argument unchanged.","","","Returns a mutable reference to the contained value.","Returns a reference to the contained value.","","Calls <code>U::from(self)</code>.","Consumes the spanned value and returns the contained value.","A map of String to toml::Value.","","Serializing Rust structures into TOML.","","Get the span of the contained value.","Access the start of the span of the contained value.","","","","","Construct a <code>toml::Value</code> from TOML syntax.","","","","Definition of a TOML value","Deserialization implementation for TOML.","Errors that can occur when deserializing a type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Deserializer::end</code> method should be called after a …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a byte slice into a type.","Deserializes a string into a type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Produces a (line, column) pair of the position of the …","Creates a new deserializer which will be deserializing the …","","Historical versions of toml-rs accidentally allowed a …","Historical versions of toml-rs accidentally allowed a …","","","","","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a toml::Map’s entries.","An iterator over a toml::Map’s entries.","A mutable iterator over a toml::Map’s entries.","An iterator over a toml::Map’s keys.","Represents a TOML key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a toml::Map’s values.","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","","","Returns true if the map contains a value for the specified …","","","Gets the given key’s corresponding entry in the map for …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","","","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","Makes a new empty Map.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Makes a new empty Map with the given initial capacity.","","","A custom error which could be generated when serializing a …","A serialized date was invalid.","Errors that can occur when serializing a type.","The key of all TOML maps must be strings, but …","A serialized number was invalid.","Serialization implementation for TOML.","None was attempted to be serialized, but it’s not …","Indicates that a Rust type was requested to be serialized …","All values in a TOML table must be emitted before further …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new serializer which will emit TOML into the …","Instantiate a “pretty” formatter","Enable or Disable pretty arrays","Set the indent for pretty arrays","Specify whether to use a trailing comma when serializing …","Enable or Disable pretty strings","Enable or Disable Literal strings for pretty strings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience function to serialize items in a map in an …","","Serialize the given data structure as a String of TOML.","","Serialize the given data structure as a “pretty” …","Serialize the given data structure as a TOML byte vector.","","","","","","","","Type representing a TOML array, payload of the <code>Value::Array</code>…","Represents a TOML array","Represents a TOML boolean","Offset between local time and UTC","A parsed TOML date value","A parsed TOML datetime value","Represents a TOML datetime","Error returned from parsing a <code>Datetime</code> in the <code>FromStr</code> …","","Represents a TOML float","Types that can be used to index a <code>toml::Value</code>","Represents a TOML integer","","A parsed TOML time offset","Represents a TOML string","Type representing a TOML table, payload of the <code>Value::Table</code>…","Represents a TOML table","A parsed TOML time value","Representation of a TOML value.","A suffix which, when applied to a time, denotes a UTC …","Extracts the array value if it is an array.","Extracts the array value if it is an array.","Extracts the boolean value if it is a boolean.","Extracts the datetime value if it is a datetime.","Extracts the float value if it is a float.","Extracts the integer value if it is an integer.","Extracts the string of this value if it is a string.","Extracts the table value if it is a table.","Extracts the table value if it is a table.","","","","","","","","","","","","","","","","","","","","","","","","","Optional date. Required for: <em>Offset Date-Time</em>, <em>Local </em>…","Day: 1 to {28, 29, 30, 31} (based on month/year)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Index into a TOML array or map. A string index can be used …","Mutably index into a TOML array or map. A string index can …","Hour: 0 to 23","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Tests whether this value is an array.","Tests whether this value is a boolean.","Tests whether this value is a datetime.","Tests whether this value is a float.","Tests whether this value is an integer.","Tests if this value is a string.","Tests whether this value is a table.","Minute: 0 to 59","Month: 1 to 12","Nanosecond: 0 to 999_999_999","Optional offset. Required for: <em>Offset Date-Time</em>.","","Tests whether this and another value have the same type.","Second: 0 to {58, 59, 60} (based on leap second rules)","","","Optional time. Required for: <em>Offset Date-Time</em>, <em>Local </em>…","","","","","","","","","","","","","","Convert a <code>T</code> into <code>toml::Value</code> which is an enum that can …","","","","","","Interpret a <code>toml::Value</code> as an instance of type <code>T</code>.","","","","","","","","","","","","","Returns a human-readable representation of the type of …","Year: four digits","Hours: -12 to +12","Minutes: 0 to 59","","","","","","",""],"i":[0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,0,0,2,2,2,2,2,0,2,0,2,2,2,2,0,0,0,0,2,2,2,0,0,0,21,19,21,19,19,19,19,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,19,19,19,21,19,0,0,21,19,21,19,21,19,21,21,19,19,21,19,21,19,21,19,0,0,0,0,0,0,25,0,25,0,0,24,25,28,27,29,30,32,31,33,24,25,28,27,29,30,32,31,33,24,24,24,24,24,24,24,24,24,24,24,25,28,27,29,30,32,31,33,24,24,27,24,27,24,24,24,28,27,24,25,28,27,29,30,32,31,33,24,24,24,29,30,32,31,33,27,24,24,24,25,28,27,24,24,29,30,32,31,33,24,29,30,32,31,33,29,30,32,31,33,25,25,24,27,24,29,30,32,31,33,24,24,25,28,27,29,30,32,31,33,24,25,28,27,29,30,32,31,33,24,25,28,27,29,30,32,31,33,24,24,59,60,34,34,0,34,34,0,34,34,34,35,34,35,34,34,34,34,34,34,34,35,34,35,34,35,35,35,35,35,35,35,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,34,0,34,0,0,35,34,35,34,35,34,61,0,23,23,53,0,0,23,0,0,23,0,23,0,0,23,0,23,0,0,53,23,23,23,23,23,23,23,23,23,23,48,50,51,52,53,23,48,50,51,52,53,23,48,50,51,52,53,23,48,50,51,52,53,48,51,23,48,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,48,51,52,53,23,23,48,48,50,50,51,52,53,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,48,50,51,52,53,23,48,23,23,52,23,23,23,48,50,51,52,53,23,23,23,23,23,23,23,23,52,51,52,48,50,23,52,23,48,48,23,48,50,51,52,53,23,48,50,51,52,53,23,23,48,50,51,52,53,23,23,48,50,51,52,53,23,48,50,51,52,53,23,51,62,62,63,64,65,66,67,68,69],"f":[0,0,0,0,[[[2,[1]]],3],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[5]],[2,[5]]],6],0,[[],[[7,[2]]]],[2,8],[[[2,[9]],[2,[9]]],10],[[[2,[11]],12],13],[[]],0,0,[2],[2],[[[2,[14]]]],[[]],[2],0,[[[2,[15]],[2,[15]]],[[16,[6]]]],0,[[[2,[17]]],7],[2],[2,8],[[]],0,0,0,0,[[],7],[[],7],[[],18],0,0,0,[[]],[[]],[[]],[[]],[19,19],[[]],[20,19],[21,[[7,[19]]]],[21,7],[21,7],[21,7],[21,7],[[21,3],[[7,[19]]]],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[[21,3],7],[21,7],[21,7],[21,7],[21,7],[[21,3],[[7,[19]]]],[[21,8],7],[[21,3,8],7],[21,7],[21,7],[21,7],[21,7],[21,7],[[21,3],7],[21,[[7,[19]]]],[[19,19],10],[[19,12],13],[[19,12],13],[[]],[[]],[[],[[7,[19]]]],[3,[[7,[19]]]],[[]],[[]],[21],[19,16],[3,21],[22],[[21,10]],[[21,10]],[[]],[[],1],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[1,23]]]],[[[24,[1,23]]],[[24,[1,23]]]],[[]],[[[24,[1,23]]],10],[[],[[24,[1,23]]]],[[],[[7,[[24,[1,23]]]]]],[[[24,[1,23]]],25],[[[24,[1,23]],[24,[1,23]]],10],[[[24,[1,23]]]],[[[24,[1,23]],12],[[7,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[24,[1,23]]]],[[[24,[1,23]]],[[16,[23]]]],[27,23],[[[24,[1,23]]],[[16,[23]]]],[27,23],[[[24,[1,23]]],23],[[[24,[1,23]]],23],[[[24,[1,23]],1,23],[[16,[23]]]],[[28,23],23],[[27,23],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[1,23]]]],[24],[24],[[]],[[]],[[]],[[]],[[]],[27,23],[[[24,[1,23]]],10],[[[24,[1,23]]],29],[[[24,[1,23]]],30],[25,1],[28,1],[27,1],[[[24,[1,23]]],31],[[[24,[1,23]]],8],[29,8],[30,8],[32,8],[31,8],[33,8],[[],[[24,[1,23]]]],[29,16],[30,16],[32,16],[31,16],[33,16],[29,16],[30,16],[32,16],[31,16],[33,16],[[25,23],23],[25,23],[[[24,[1,23]]],[[16,[23]]]],[27,23],[[[24,[1,23]]],7],[29],[30],[32],[31],[33],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[24,[1,23]]],33],[8,[[24,[1,23]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[34,34],[[]],[20,34],[[34,34],10],[[34,12],13],[[34,12],13],[[]],[[]],[[]],[[]],[1,35],[1,35],[[35,10],35],[[35,8],35],[[35,10],35],[[35,10],35],[[35,10],35],[22],[[35,10],7],[35,7],[[35,36],7],[[35,37],7],[[35,38],7],[[35,39],7],[[35,40],7],[[35,41],7],[[35,42],7],[[35,[16,[8]]],7],[[35,3],7],[[35,3,43,3],7],[35,7],[[35,[16,[8]]],7],[35,7],[[35,3],7],[[35,3,8],7],[[35,3,43,3,8],7],[[35,8],7],[[35,3,8],7],[[35,3,43,3,8],7],[[35,44],7],[[35,43],7],[[35,45],7],[[35,46],7],[35,7],[[35,3],7],[[35,3,43,3],7],[[],7],[[]],[[],[[7,[1,34]]]],[[],1],[[],[[7,[1,34]]]],[[],[[7,[[47,[46]],34]]]],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,[[16,[47]]]],[23,[[16,[47]]]],[23,[[16,[10]]]],[23,[[16,[48]]]],[23,[[16,[38]]]],[23,[[16,[41]]]],[23,[[16,[3]]]],[23,[[16,[49]]]],[23,[[16,[49]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,23],[48,48],[50,50],[51,51],[52,52],[53,53],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[7,[23]]]],[[],[[7,[48]]]],[23,[[7,[19]]]],[23,7],[23,7],[23,7],[23,7],[[23,3],[[7,[19]]]],[23,7],[23,7],[23,7],[23,7],[23,7],[23,7],[23,7],[23,7],[23,7],[[23,3],[[7,[19]]]],[23,[[7,[19]]]],[23,7],[23,7],[23,7],[[23,3],7],[[23,8],7],[[23,3,8],7],[23,7],[23,7],[23,7],[23,7],[23,7],[[23,3],7],[[23,23],10],[[48,48],10],[[51,51],10],[[52,52],10],[[53,53],10],[[23,12],13],[[23,12],13],[[48,12],13],[[48,12],13],[[50,12],13],[[50,12],13],[[51,12],13],[[52,12],13],[[53,12],13],[43,23],[3,23],[46,23],[37,23],[10,23],[[]],[48,23],[38,23],[42,23],[49,23],[40,23],[41,23],[1,23],[[[56,[[0,[[54,[1]],14,55]],[54,[23]]]]],23],[[[57,[[54,[1]],[54,[23]]]]],23],[[[47,[[54,[23]]]]],23],[[]],[[]],[[]],[[]],[[]],[3,[[7,[23]]]],[3,[[7,[48,50]]]],[[23,58],[[16,[23]]]],[[23,58],[[16,[23]]]],0,[23,23],[23,23],[[]],[[]],[[]],[[]],[[]],[[]],[23,23],[23,10],[23,10],[23,10],[23,10],[23,10],[23,10],[23,10],0,0,0,0,[22],[[23,23],10],0,[23,7],[48,7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],7],[[],[[7,[23,34]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[23,[[7,[19]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[23,3],0,0,0,0,0,0,0,0,0,0],"p":[[3,"String"],[3,"Spanned"],[15,"str"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[4,"Result"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"PartialOrd"],[4,"Option"],[8,"Serialize"],[3,"TypeId"],[3,"Error"],[8,"Display"],[3,"Deserializer"],[3,"Demand"],[4,"Value"],[3,"Map"],[4,"Entry"],[3,"Error"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"IntoIter"],[3,"Values"],[4,"Error"],[3,"Serializer"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u32"],[15,"u16"],[15,"u64"],[15,"u8"],[3,"Vec"],[3,"Datetime"],[6,"Table"],[3,"DatetimeParseError"],[3,"Date"],[3,"Time"],[4,"Offset"],[8,"Into"],[8,"Eq"],[3,"HashMap"],[3,"BTreeMap"],[8,"Index"],[13,"Vacant"],[13,"Occupied"],[13,"Custom"],[13,"Custom"],[13,"String"],[13,"Integer"],[13,"Float"],[13,"Boolean"],[13,"Datetime"],[13,"Array"],[13,"Table"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":[5,5],"n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]},\
"unicode_segmentation":{"doc":"Iterators which split strings on Grapheme Cluster, Word or …","t":[3,4,3,3,13,13,13,13,17,3,3,3,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,12],"n":["GraphemeCursor","GraphemeIncomplete","GraphemeIndices","Graphemes","InvalidOffset","NextChunk","PreContext","PrevChunk","UNICODE_VERSION","USentenceBoundIndices","USentenceBounds","UWordBoundIndices","UWordBounds","UnicodeSegmentation","UnicodeSentences","UnicodeWordIndices","UnicodeWords","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","cur_cursor","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","grapheme_indices","graphemes","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_boundary","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_boundary","prev_boundary","provide_context","set_cursor","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_sentence_bound_indices","split_sentence_bounds","split_word_bound_indices","split_word_bounds","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode_sentences","unicode_word_indices","unicode_words","0"],"q":["unicode_segmentation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unicode_segmentation::GraphemeIncomplete"],"d":["Cursor-based segmenter for grapheme clusters.","An error return indicating that not enough content was …","External iterator for grapheme clusters and byte offsets.","External iterator for a string’s grapheme clusters.","An error returned when the chunk given does not contain …","When requesting <code>next_boundary</code>, the cursor is moving past …","More pre-context is needed. The caller should call …","When requesting <code>prev_boundary</code>, the cursor is moving past …","The version of Unicode that this version of …","External iterator for sentence boundaries and byte offsets.","External iterator for a string’s sentence boundaries.","External iterator for word boundaries and byte offsets.","External iterator for a string’s word boundaries.","Methods for segmenting strings according to Unicode …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current offset of the cursor. Equal to the last value …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator over the grapheme clusters of <code>self</code> and …","Returns an iterator over the grapheme clusters of <code>self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Determine whether the current cursor location is a …","Create a new cursor. The string and initial offset are …","","","","","","","","","","","","","","","","Find the next boundary after the current cursor position. …","Find the previous boundary after the current cursor …","Provide additional pre-context when it is needed to decide …","Set the cursor to a new location in the same string.","","","","","","","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over the words of <code>self</code>, separated on …","Returns an iterator over the words of <code>self</code>, separated on …",""],"i":[0,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0,1,3,4,5,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,1,3,6,7,8,9,4,5,6,11,3,6,11,16,18,1,3,6,11,7,8,9,4,5,20,20,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,7,8,9,4,5,6,6,16,18,1,3,7,8,9,4,5,16,18,1,3,4,5,6,6,6,6,1,3,8,9,4,5,20,20,20,20,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,20,20,20,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[4,2],[5,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[6,6],[7,7],[8,8],[9,9],[4,4],[5,5],[6,10],[[11,11],12],[[3,13],14],[[6,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,1],[12,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,2,10],[[15,[12,11]]]],[[10,10,12],6],[16,[[17,[2]]]],[18,17],[1,17],[3,[[17,[2]]]],[7,[[17,[2]]]],[8,[[17,[2]]]],[9,17],[4,[[17,[2]]]],[5,17],[16,[[17,[2]]]],[18,17],[1,17],[3,[[17,[2]]]],[4,[[17,[2]]]],[5,17],[[6,2,10],[[15,[[17,[10]],11]]]],[[6,2,10],[[15,[[17,[10]],11]]]],[[6,2,10]],[[6,10]],[1],[3],[8],[9],[4],[5],[[],9],[[],8],[[],5],[[],4],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],7],[[],18],[[],16],0],"p":[[3,"GraphemeIndices"],[15,"str"],[3,"Graphemes"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[3,"GraphemeCursor"],[3,"UnicodeSentences"],[3,"USentenceBounds"],[3,"USentenceBoundIndices"],[15,"usize"],[4,"GraphemeIncomplete"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"UnicodeWords"],[4,"Option"],[3,"UnicodeWordIndices"],[3,"TypeId"],[8,"UnicodeSegmentation"],[13,"PreContext"]]},\
"uuid":{"doc":"Generate and parse universally unique identifiers (UUIDs).","t":[3,6,2,13,3,13,13,13,13,18,18,18,18,13,13,2,13,13,13,2,3,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,3,3,18,18,18,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,8,16,3,17,11,11,11,11,0,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Builder","Bytes","ClockSequence","Dce","Error","Future","Mac","Md5","Microsoft","NAMESPACE_DNS","NAMESPACE_OID","NAMESPACE_URL","NAMESPACE_X500","NCS","Nil","NoContext","RFC4122","Random","Sha1","Timestamp","Uuid","Variant","Version","as_braced","as_bytes","as_fields","as_hyphenated","as_ref","as_simple","as_u128","as_u64_pair","as_urn","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","braced","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","deserialize","encode_buffer","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes_le","from_bytes_le","from_bytes_ref","from_fields","from_fields","from_fields_le","from_fields_le","from_md5_bytes","from_random_bytes","from_rfc4122_timestamp","from_sha1_bytes","from_slice","from_slice","from_slice_le","from_slice_le","from_str","from_u128","from_u128","from_u128_le","from_u128_le","from_u64_pair","get_timestamp","get_variant","get_version","get_version_num","hash","hash","hyphenated","into","into","into","into","into","into_bytes","into_uuid","is_nil","new_v5","nil","nil","parse_str","partial_cmp","provide","serde","serialize","set_variant","set_version","simple","timestamp","to_bytes_le","to_fields_le","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_u128_le","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_parse","try_parse_ascii","type_id","type_id","type_id","type_id","type_id","urn","uuid","with_variant","with_version","Braced","Hyphenated","LENGTH","LENGTH","LENGTH","LENGTH","Simple","Urn","as_ref","as_ref","as_ref","as_ref","as_uuid","as_uuid","as_uuid","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","encode_lower","encode_lower","encode_lower","encode_lower","encode_upper","encode_upper","encode_upper","encode_upper","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_uuid","from_uuid","from_uuid","from_uuid","hash","hash","hash","hash","into","into","into","into","into_uuid","into_uuid","into_uuid","into_uuid","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","compact","deserialize","serialize","ClockSequence","Output","Timestamp","UUID_TICKS_BETWEEN_EPOCHS","borrow","borrow_mut","clone","clone_into","context","eq","fmt","from","from_rfc4122","from_unix","generate_sequence","hash","into","now","to_owned","to_unix","to_unix_nanos","try_from","try_into","type_id","NoContext","borrow","borrow_mut","clone","clone_into","default","fmt","from","generate_sequence","into","to_owned","try_from","try_into","type_id"],"q":["uuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uuid::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uuid::serde","uuid::serde::compact","","uuid::timestamp","","","","","","","","","","","","","","","","","","","","","","","","uuid::timestamp::context","","","","","","","","","","","","",""],"d":["A builder for creating a UUID.","A 128-bit (16 byte) buffer containing the UUID.","","Version 2: DCE Security.","A general error that can occur when working with UUIDs.","Reserved for future expansion.","Version 1: Timestamp and node ID.","Version 3: MD5 hash.","Reserved by Microsoft for backward compatibility.","UUID namespace for Domain Name System (DNS).","UUID namespace for ISO Object Identifiers (OIDs).","UUID namespace for Uniform Resource Locators (URLs).","UUID namespace for X.500 Distinguished Names (DNs).","Reserved by the NCS for backward compatibility.","The “nil” (all zeros) UUID.","","As described in the RFC4122 Specification (default).","Version 4: Random.","Version 5: SHA-1 hash.","","A Universally Unique Identifier (UUID).","The reserved variants of UUIDs.","The version of the UUID, denoting the generating algorithm.","Get a borrowed <code>Braced</code> formatter.","Returns a slice of 16 octets containing the value.","Returns the four field values of the UUID.","Get a borrowed <code>Hyphenated</code> formatter.","","Get a borrowed <code>Simple</code> formatter.","Returns a 128bit value containing the value.","Returns two 64bit values containing the value.","Get a borrowed <code>Urn</code> formatter.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","Get a <code>Braced</code> formatter.","","","","","","","","","","","","A buffer that can be used for <code>encode_...</code> calls, that is …","","","","","Adapters for alternative string formats.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","Creates a reference to a UUID from a reference to the …","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values.","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values in little-endian …","Creates a <code>Builder</code> for a version 3 UUID using the supplied …","Creates a <code>Builder</code> for a version 4 UUID using the supplied …","Creates a <code>Builder</code> for a version 1 UUID using the supplied …","Creates a <code>Builder</code> for a version 5 UUID using the supplied …","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","","Creates a <code>Builder</code> from a 128bit value.","Creates a UUID from a 128bit value.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from two 64bit values.","If the UUID is the correct version (v1, v6, or v7) this …","Returns the variant of the UUID structure.","Returns the version of the UUID.","Returns the version number of the UUID.","","","Get a <code>Hyphenated</code> formatter.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes self and returns the underlying byte value of the …","Convert the builder into a <code>Uuid</code>.","Tests if the UUID is nil (all zeros).","Creates a UUID using a name from a namespace, based on the …","Creates a <code>Builder</code> with an initial <code>Uuid::nil</code>.","The ‘nil UUID’ (all zeros).","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","","Adapters for alternative <code>serde</code> formats.","","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Get a <code>Simple</code> formatter.","Generating UUIDs from timestamps.","Returns the bytes of the UUID in little-endian order.","Returns the four field values of the UUID in little-endian …","","","","","","","","Returns a 128bit little-endian value containing the value.","","","","","","","","","","","","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","","","","","Get a <code>Urn</code> formatter.","Parse <code>Uuid</code>s from string literals at compile time.","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Format a <code>Uuid</code> as a braced hyphenated string, like …","Format a <code>Uuid</code> as a hyphenated string, like …","The length of a hyphenated <code>Uuid</code> string.","The length of a simple <code>Uuid</code> string.","The length of a URN <code>Uuid</code> string.","The length of a braced <code>Uuid</code> string.","Format a <code>Uuid</code> as a simple string, like …","Format a <code>Uuid</code> as a URN string, like …","","","","","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…","Writes the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as a lower-case hyphenated string …","Writes the <code>Uuid</code> as an upper-case hyphenated string to …","Writes the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as an upper-case hyphenated string …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Hyphenated</code> from a <code>Uuid</code>.","Creates a <code>Simple</code> from a <code>Uuid</code>.","Creates a <code>Urn</code> from a <code>Uuid</code>.","Creates a <code>Braced</code> from a <code>Uuid</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize a <code>Uuid</code> as a <code>[u8; 16]</code>.","Deserialize a <code>[u8; 16]</code> as a <code>Uuid</code>","Serialize from a <code>Uuid</code> as a <code>[u8; 16]</code>","A counter that can be used by version 1 and version 6 …","The type of sequence returned by this counter.","A timestamp that can be encoded into a UUID.","The number of 100 nanosecond ticks between the RFC4122 …","","","","","Default implementations for the <code>ClockSequence</code> trait.","","","Returns the argument unchanged.","Construct a <code>Timestamp</code> from an RFC4122 timestamp and …","Construct a <code>Timestamp</code> from a Unix timestamp, as used in …","Get the next value in the sequence to feed into a …","","Calls <code>U::from(self)</code>.","Get a timestamp representing the current system time.","","Get the value of the timestamp as a Unix timestamp, as …","Get the number of fractional nanoseconds in the Unix …","","","","An empty counter that will always return the value <code>0</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,10,0,11,10,10,11,1,1,1,1,11,10,0,11,10,10,0,0,0,0,1,1,1,1,1,1,1,1,1,8,8,9,10,11,1,8,9,10,11,1,1,9,10,11,1,9,10,11,1,1,1,1,1,9,10,11,1,0,8,9,9,10,11,11,1,1,1,1,8,9,10,11,1,1,1,1,1,8,1,8,1,1,8,1,8,1,8,8,8,8,8,1,8,1,1,8,1,8,1,1,1,1,1,1,9,1,1,8,9,10,11,1,1,8,1,1,8,1,1,1,9,0,1,8,8,1,0,1,1,9,10,11,1,9,11,1,1,8,9,10,11,1,1,8,9,10,11,1,1,1,8,9,10,11,1,1,0,8,8,0,0,4,5,7,2,0,0,4,5,7,2,4,5,7,2,4,4,5,5,7,7,2,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,4,4,4,5,5,5,5,7,7,7,7,2,2,2,2,4,4,5,5,7,7,2,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,4,5,7,2,0,0,0,0,29,0,0,22,22,22,22,0,22,22,22,22,22,29,22,22,22,22,22,22,22,22,22,0,30,30,30,30,30,30,30,30,30,30,30,30,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,3],[1],[1,4],[1],[1,5],[1,6],[1],[1,7],[8,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[9,9],[10,10],[11,11],[1,1],[[]],[[]],[[]],[[]],[[1,1],12],[[],1],[13,[[14,[1]]]],[[]],[[9,9],15],[[10,10],15],[[11,11],15],[[1,1],15],0,[[8,16],17],[[9,16],17],[[9,16],17],[[10,16],17],[[11,16],17],[[11,16],17],[[1,16],17],[[1,16],17],[[1,16],17],[[1,16],17],[[]],[[]],[[]],[[]],[[]],[2,1],[4,1],[5,1],[7,1],[3,8],[3,1],[3,8],[3,1],[3,1],[[18,19,19],8],[[18,19,19],1],[[18,19,19],8],[[18,19,19],1],[3,8],[3,8],[[20,19],8],[3,8],[[],[[14,[8,9]]]],[[],[[14,[1,9]]]],[[],[[14,[8,9]]]],[[],[[14,[1,9]]]],[21,[[14,[1]]]],[6,8],[6,1],[6,8],[6,1],[[20,20],1],[1,[[23,[22]]]],[1,11],[1,[[23,[10]]]],[1,24],[9],[1],[1,4],[[]],[[]],[[]],[[]],[[]],[1,3],[8,1],[1,15],[1,1],[[],8],[[],1],[21,[[14,[1,9]]]],[[1,1],[[23,[12]]]],[25],0,[[1,26],14],[[8,11],8],[[8,10],8],[1,5],0,[1,3],[1],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[1,6],[[],14],[[],14],[[],14],[[],14],[[],14],[21,[[14,[1]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[21,[[14,[1,9]]]],[[],[[14,[1,9]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[1,7],0,[[8,11],8],[[8,10],8],0,0,0,0,0,0,0,0,[4,1],[5,1],[7,1],[2,1],[4,1],[5,1],[7,1],[2,1],[[]],[4,1],[5,1],[[]],[7,1],[[]],[[]],[2,1],[[]],[[]],[[]],[[]],[4,4],[5,5],[7,7],[2,2],[[]],[[]],[[]],[[]],[[4,4],12],[[5,5],12],[[7,7],12],[[2,2],12],[[],4],[[],5],[[],7],[[],2],[4,21],[5,21],[7,21],[2,21],[4,21],[5,21],[7,21],[2,21],[[4,4],15],[[5,5],15],[[7,7],15],[[2,2],15],[[4,16],17],[[4,16],17],[[4,16],17],[[4,16],17],[[5,16],17],[[5,16],17],[[5,16],17],[[5,16],17],[[7,16],17],[[7,16],17],[[7,16],17],[[7,16],17],[[2,16],17],[[2,16],17],[[2,16],17],[[2,16],17],[1,4],[[]],[[]],[1,5],[1,7],[[]],[[]],[1,2],[1,4],[1,5],[1,7],[1,2],[4],[5],[7],[2],[[]],[[]],[[]],[[]],[4,1],[5,1],[7,1],[2,1],[[4,4],[[23,[12]]]],[[5,5],[[23,[12]]]],[[7,7],[[23,[12]]]],[[2,2],[[23,[12]]]],[[4,26],14],[[5,26],14],[[7,26],14],[[2,26],14],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],28],[[],28],[[],28],[[],28],0,[[],[[14,[1]]]],[1,14],0,0,0,0,[[]],[[]],[22,22],[[]],0,[[22,22],15],[[22,16],17],[[]],[[20,19],22],[[29,20,18],22],[[20,18]],[22],[[]],[29,22],[[]],[22],[22,18],[[],14],[[],14],[[],28],0,[[]],[[]],[30,30],[[]],[[],30],[[30,16],17],[[]],[[30,20,18]],[[]],[[]],[[],14],[[],14],[[],28]],"p":[[3,"Uuid"],[3,"Braced"],[6,"Bytes"],[3,"Hyphenated"],[3,"Simple"],[15,"u128"],[3,"Urn"],[3,"Builder"],[3,"Error"],[4,"Version"],[4,"Variant"],[4,"Ordering"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u32"],[15,"u16"],[15,"u64"],[15,"str"],[3,"Timestamp"],[4,"Option"],[15,"usize"],[3,"Demand"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[8,"ClockSequence"],[3,"NoContext"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
